<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2015-06-28T22:11:58+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RailsでSTI（単一テーブル継承）の予約語でハマった話対処]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/06/27/rails-sti/"/>
    <updated>2015-06-27T11:38:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/06/27/rails-sti</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>ここ数日、自分用のアプリを作っているわけなのですが<br/>
その時に起きたエラーを記載しておきます</p>

<p>(STIの予約語のこと忘れてたというオチｗ)</p>

<h3>事象</h3>

<hr />

<p>ActiveRecordで「type」というカラムをもつテーブルに接続し、取得系のメソッドを呼ぶと以下の様なエラーが出た</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1] pry(main)&gt; Hoge.find(1)
</span><span class='line'>  Hoge Load (0.4ms)  SELECT `hoges`.* FROM `hoges` WHERE `hoges`.`id` = 1 LIMIT 1
</span><span class='line'>ActiveRecord::SubclassNotFound: The single-table inheritance mechanism failed to locate the subclass: 'fuga'. This error is raised because the column 'type' is reserved for storing the class in case of inheritance. Please rename this column if you didn't intend it to be used for storing the inheritance class or overwrite Hoge.inheritance_column to use another column for that information.</span></code></pre></td></tr></table></div></figure>


<p>エラーメッセージから分かるように「type」というカラムをrenameしろと出ています<br/>
こんなの場合によっては出来無いわけで・・・</p>

<h3>これは何？</h3>

<hr />

<p>STI（単一テーブル継承）と呼ばれる機能のことを指しています<br/>
つまり、1つのテーブルを複数のModelで利用する仕組みのことを言います。</p>

<p>で、その仕掛けように予約語として、&#8221;type&#8221;という名前をActiveRecordが利用しているようです。</p>

<p>クラスで言うとこんなところでしょうか。<br/>
Humanクラスを継承した、Manクラス、Womanクラスがあったとした場合、以下のような形になります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Human &lt; ActiveRecord::Base
</span><span class='line'>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>class Man &lt; Human
</span><span class='line'>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>class Woman &lt; Human
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>で、例えばManオブジェクトをsaveすると、Humanテーブルにtype:Manとして保存されます。<br/>
Womanならtype:Womanになるようです</p>

<p>それぞれのモデルからデータへの操作を行った場合、適合するTypeのデータのみを操作対象となります<br/>
ManもWomanも関係なく取得したい(両方をまとめて扱いたい)場合は、Humanモデルから操作すればOKです</p>

<p>当然ひとつのテーブルを使っていますので、片方にしか無い項目(カラム)もテーブルに含まなければならないです。<br/>
例えばManとHumanの持つ項目があまりにも違う場合、カラム数が爆発的に増えます。<br/>
(ここは注意するところですね)</p>

<h3>対処</h3>

<hr />

<p>もうざっくりというと、以下の2つの対応ができます</p>

<ol>
<li>カラム名に「type」という名前をつけず、別名に変更する</li>
<li>エラーメッセージにあるようにSTIのカラム名を変更する</li>
</ol>


<p>というわけなので、自分は1の対応を行いました。</p>

<p>では、2の場合はどうするかというと・・・
エラーメッセージにありますが、以下ように設定すればよいようです</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Hoge &lt; ActiveRecord::Base
</span><span class='line'>  self.inheritance_column = :_type_disabled
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>どういう場合に起きそう</h3>

<hr />

<p>ざっと思いつくのはこんなところかな</p>

<ul>
<li>既存のアプリケーション(PHPなりJavaなり)をRailsにのせかえるとき</li>
<li>設計上どうしても止むえずつけたいとき(これはビジネスドメインの場合が当てはまる)</li>
<li>(あんまりないと思うが)STIの機能を使ってリファクタリングするとき</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsのモデル周りのマイグレーション]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/06/21/rails-migration-command/"/>
    <updated>2015-06-21T14:15:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/06/21/rails-migration-command</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>Railsでmigrationするときにいつもアレなんだっけなぁとなることが多いので、<br/>
備忘録程度にまとめておく</p>

<p>こんなものドキュメント見れば理解できるので、ざっくりレベルのサマリー程度にしておく</p>

<h3>基本</h3>

<hr />

<p>マイグレーションファイル作成コマンド</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rails generate migration クラス名</span></code></pre></td></tr></table></div></figure>


<p>モデル作成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rails generate model モデル名</span></code></pre></td></tr></table></div></figure>


<h3>モデル&amp;テーブル作成</h3>

<hr />

<p>フィールド指定で作成する場合、以下の形で行う<br/>
(大体はフィールド指定を行わずに、実行することが多いかも)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rails g model モデル名 フィールド:型</span></code></pre></td></tr></table></div></figure>


<h3>カラムの型指定</h3>

<hr />

<p>細かい調整をしようと思えばできるけど、一旦これだけ覚えておけば良い</p>

<table>
<thead>
<tr>
<th align="left">Ruby側の型 </th>
<th align="left"> DB側の型</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> string </td>
<td align="left"> 文字列</td>
</tr>
<tr>
<td align="left"> text </td>
<td align="left"> 長い文字列</td>
</tr>
<tr>
<td align="left"> integer </td>
<td align="left"> 整数</td>
</tr>
<tr>
<td align="left"> float </td>
<td align="left"> 浮動小数</td>
</tr>
<tr>
<td align="left"> decimal </td>
<td align="left"> 精度の高い小数</td>
</tr>
<tr>
<td align="left"> datetime </td>
<td align="left"> 日時</td>
</tr>
<tr>
<td align="left"> timestamp </td>
<td align="left"> タイムスタンプ</td>
</tr>
<tr>
<td align="left"> time </td>
<td align="left"> 時間</td>
</tr>
<tr>
<td align="left"> date </td>
<td align="left"> 日付</td>
</tr>
<tr>
<td align="left"> binary </td>
<td align="left"> バイナリデータ</td>
</tr>
<tr>
<td align="left"> boolean </td>
<td align="left"> Boolean</td>
</tr>
</tbody>
</table>


<h3>(補足)MySQLで使用する場合の文字列型</h3>

<hr />

<p>MySQLで使用できる文字列型は以下が存在している</p>

<table>
<thead>
<tr>
<th align="left"> DB側の型 </th>
<th align="left"> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> CHAR </td>
<td align="left"> 255Bまでの固定長文字列</td>
</tr>
<tr>
<td align="left"> VARCHAR </td>
<td align="left"> 64KBまでの可変長文字列</td>
</tr>
<tr>
<td align="left"> TINYTEXT </td>
<td align="left"> 255Bまでの可変長文字列</td>
</tr>
<tr>
<td align="left"> TEXT </td>
<td align="left"> 64KBまでの可変長文字列</td>
</tr>
<tr>
<td align="left"> MEDIUMTEXT </td>
<td align="left"> 約1.6MBまでの可変長文字列</td>
</tr>
<tr>
<td align="left"> LONGTEXT </td>
<td align="left"> 約4.3GBまでの可変長文字列</td>
</tr>
</tbody>
</table>


<p>上記をそれぞれmigrationで利用する場合<br/>
以下のようにlimitをつけることで、使用する文字列型を変更することができる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class CreateHoges &lt; ActiveRecord::Migration
</span><span class='line'>  def change
</span><span class='line'>    create_table :articles do |t|
</span><span class='line'>      t.text :value, :limit =&gt; 4294967295
</span><span class='line'>
</span><span class='line'>      t.timestamps null: false
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>実行すると以下のようになる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails db
</span><span class='line'>mysql&gt; show columns from hoges;
</span><span class='line'>+-------------+--------------+------+-----+---------+----------------+
</span><span class='line'>| Field       | Type         | Null | Key | Default | Extra          |
</span><span class='line'>+-------------+--------------+------+-----+---------+----------------+
</span><span class='line'>| id          | int(11)      | NO   | PRI | NULL    | auto_increment |
</span><span class='line'>| value       | longtext     | YES  |     | NULL    |                |
</span><span class='line'>| created_at  | datetime     | NO   |     | NULL    |                |
</span><span class='line'>| updated_at  | datetime     | NO   |     | NULL    |                |
</span><span class='line'>+-------------+--------------+------+-----+---------+----------------+</span></code></pre></td></tr></table></div></figure>


<p>limitの値は、以下のように対応している</p>

<table>
<thead>
<tr>
<th align="left"> 設定値 </th>
<th align="left"> DB側の型</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> 1 ~ 255 </td>
<td align="left"> TINYTEXT</td>
</tr>
<tr>
<td align="left"> 256 ~ 65535 </td>
<td align="left"> TEXT</td>
</tr>
<tr>
<td align="left"> 65536 ~ 16777215 </td>
<td align="left"> MEDIUMTEXT</td>
</tr>
<tr>
<td align="left"> 16777216 ~ 4294967295 </td>
<td align="left"> LONGTEXT</td>
</tr>
</tbody>
</table>


<h3>マイグレーション実行</h3>

<hr />

<p>DB作成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rake db:create</span></code></pre></td></tr></table></div></figure>


<p>マイグレーションの実行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rake db:migrate</span></code></pre></td></tr></table></div></figure>


<p>マイグレーション結果確認</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rake db:migrate:status</span></code></pre></td></tr></table></div></figure>


<p>ロールバック</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rake db:rollback</span></code></pre></td></tr></table></div></figure>


<p>DBの削除</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rake db:drop</span></code></pre></td></tr></table></div></figure>


<p>シードの投入(マスターデータなどシードで投入することが多い)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rake db:seed</span></code></pre></td></tr></table></div></figure>


<h3>既存カラムの変更</h3>

<hr />

<p>カラムを変更したい場合、以下のコマンドでマイグレーションファイルを生成する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rails g migration ChangeColumnTo&lt;モデル名&gt;</span></code></pre></td></tr></table></div></figure>


<p>変更は以下のような形で行う(upとdownを定義することでrollbackにも対応できる)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ChangeColumnToYourModel&lt; ActiveRecord::Migration
</span><span class='line'>
</span><span class='line'>  # 変更内容
</span><span class='line'>  def up
</span><span class='line'>    change_column :users, :hoge, :string, null: false, default: 0
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  # 変更前の状態
</span><span class='line'>  def down
</span><span class='line'>    change_column :users, :hoge, :string, null: true, default: 0
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>気をつけることとして、change_columnは以下のような順で記載すること</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>change_column :&lt;テーブル名&gt;, :&lt;カラム名&gt;, :&lt;型&gt;, &lt;default値やindexといったオプション指定&gt;</span></code></pre></td></tr></table></div></figure>


<h3>カラムの追加/削除</h3>

<hr />

<p>カラムの追加/削除をしたい場合、以下のコマンドでマイグレーションファイルを生成する<br/>
追加の場合は、フィールド指定可能</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rails g migration AddColumnTo&lt;モデル&gt;</span></code></pre></td></tr></table></div></figure>


<p>以下のような形で記載する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class AddColumnToYourModel &lt; ActiveRecord::Migration
</span><span class='line'>  def change
</span><span class='line'>
</span><span class='line'>    # 追加
</span><span class='line'>    add_column :hoges, :hoge, :string
</span><span class='line'>
</span><span class='line'>    # 削除
</span><span class='line'>    remove_column :hoges, :fuga, :string
</span><span class='line'>
</span><span class='line'>    # 追加する場所を指定する場合
</span><span class='line'>    add_column :hoges, :fugafuga, :string, :after =&gt; :hoge
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>インデックスの追加/削除</h3>

<hr />

<p>カラムの追加/削除と基本は変わらない</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rails g migration AddIndexTo&lt;モデル&gt;</span></code></pre></td></tr></table></div></figure>


<p>以下のようにしてindexを設定する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class AddIndexToYourModel &lt; ActiveRecord::Migration
</span><span class='line'>  def change
</span><span class='line'>
</span><span class='line'>    # 追加
</span><span class='line'>    add_index :hoges, :hoge
</span><span class='line'>
</span><span class='line'>    # 削除
</span><span class='line'>    remove_index :hoges, :fuga
</span><span class='line'>
</span><span class='line'>    # 複合インデックスの場合
</span><span class='line'>    add_index :hoges, [:hoge, :fuga]
</span><span class='line'>
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<hr />

<p>ここに書いてる内容は、Railsドキュメント見れば一発で理解できるけどな</p>

<ul>
<li><a href="http://railsdoc.com/model">モデル(model)</a></li>
<li><a href="http://railsdoc.com/migration">マイグレーション(migration)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テーブル単位のmysqldump]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/05/06/mysqldump/"/>
    <updated>2015-05-06T23:39:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/05/06/mysqldump</id>
    <content type="html"><![CDATA[<h2>めちゃくちゃ基礎的な内容なのですが、備忘録を兼ねてメモしておく</h2>

<h3>DBまるごと</h3>

<p>よくやるmysqldumpコマンド</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mysqldump -u root -p development_db  &gt; db_backup.sql</span></code></pre></td></tr></table></div></figure>


<h3>テーブル単位</h3>

<p>tオプションは、「テーブル作成情報（CREATE TABLE ステートメント）を書き込まない」という内容を指す<br/>
migrationなどで先にテーブルを作った場合とかに有効活用できる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mysqldump -u root -p -t development_db my_table1 my_table2 &gt; table_backup.sql</span></code></pre></td></tr></table></div></figure>


<p>上のコマンドのようにテーブル名は複数指定可能(my_table1, my_table2などが該当)</p>

<h3>リストア</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mysql -u root -p development_db &lt; summaries.sql</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BuildConfigを使用して、環境ごとに値を取得仕分けてみる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/03/17/android-build-config/"/>
    <updated>2015-03-17T23:57:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/03/17/android-build-config</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>WebAPIと連携するようなAndroidアプリを作っているのですが
開発と本番で接続先を切り替える必要が出てきました。</p>

<p>それのライトな対応方法をメモ</p>

<h3>build.gradleを編集</h3>

<hr />

<p>以下のような形で記載</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>buildTypes {
</span><span class='line'>  debug {
</span><span class='line'>    buildConfigField "String", "API_URL", "\"http://api-dev.hoge.co.jp\""
</span><span class='line'>  }
</span><span class='line'>  release {
</span><span class='line'>    buildConfigField "String", "API_URL", "\"http://api.hoge.co.jp\""
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>ソースコード側</h3>

<hr />

<p>以下のように特に気にせずBuildConfigを参照すればよい</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String url = BuildConfig.API_URL</span></code></pre></td></tr></table></div></figure>


<p>ビルド環境に応じた値が取得できる</p>

<h3>できたけど・・・</h3>

<hr />

<p>これぐらいなら、まぁbuild.gradleでいいやという気がするもののパラメータ増えたら収拾つかなくなる予感</p>

<p>真面目にやるならBuild Variantsを使うほうがよいかと思います</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku上でJersey + Jetty + Gradleを動かす]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/03/17/jersey-on-heroku/"/>
    <updated>2015-03-17T01:14:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/03/17/jersey-on-heroku</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>JavaでRestfulといえば、JAX-RSが有名ですね。</p>

<p>それを扱いやすくしたFrameworkといえば、<a href="https://jersey.java.net/">Jersey</a>になります。<br/>
これをHerokuで動かすようにしてみます。</p>

<p>ついでにオワコン臭漂うmavenを辞めて、Gradleでビルドができるようにもしてみます</p>

<h3>目標</h3>

<hr />

<p>以下ができていること</p>

<ul>
<li>Heroku上でJerseyが動くこと</li>
<li>HerokuではJettyがサーブレット・コンテナとして動くこと</li>
<li>ビルドツールには、デフォルトのmavenではなくGradleであること</li>
</ul>


<h3>Jersey</h3>

<hr />

<p>まずはmaven ArchTypeから必要なファイルを準備</p>

<p><a href="https://jersey.java.net/download.html">ここ</a>を参考にすると、ArchTypeは2種類あることが分かります。</p>

<p>今回はJettyで動かすので、サーブレットコンテナ用のものを使います</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn archetype:generate -DarchetypeGroupId=org.glassfish.jersey.archetypes -DarchetypeArtifactId=jersey-quickstart-webapp -DarchetypeVersion=2.17</span></code></pre></td></tr></table></div></figure>


<p>必要項目を聞かれますので、以下のような感じで入力していきます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Define value for property 'groupId': : kurobara
</span><span class='line'>Define value for property 'artifactId': : kurobara
</span><span class='line'>Define value for property 'version': 1.0-SNAPSHOT:
</span><span class='line'>Define value for property 'package': kurobara: kurobara</span></code></pre></td></tr></table></div></figure>


<p>成功すれば、以下の構成になります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── pom.xml
</span><span class='line'>├── src
</span><span class='line'>│   └── main
</span><span class='line'>│       ├── java
</span><span class='line'>│       │   └── kurobara
</span><span class='line'>│       │       └── MyResource.java
</span><span class='line'>│       ├── resources
</span><span class='line'>│       └── webapp
</span><span class='line'>│           ├── WEB-INF
</span><span class='line'>│           │   └── web.xml
</span><span class='line'>│           └── index.jsp</span></code></pre></td></tr></table></div></figure>


<h3>mavenの削除</h3>

<hr />

<p>普通に考えると、mavenを使わなければpom.xmlを残してもよいかと思います(自分も最初は思いました)
Herokuではmavenがデフォルトで使われますので、削除してしまいます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm pom.xml</span></code></pre></td></tr></table></div></figure>


<p>どうやら、mavenとGradleの両方のビルドファイルが存在するとHerokuではmavenのものが最優先で使われるようです</p>

<h3>Gradleの追加</h3>

<hr />

<p>以下の内容を<code>build.gradle</code>に記載します</p>

<p>このファイルのミソは<code>task stage(dependsOn: ['clean', 'installApp'])</code>を記載していることです。
Herokuではこのタスクが必要なようです。</p>

<p><a href="https://github.com/heroku/devcenter-gradle">公式</a>を参考にしました。</p>

<p>多分、必要無いと思いますが念のためgradlewも用意しました(自分は一応、これもファイルに追加しています)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply plugin: "java"
</span><span class='line'>apply plugin: "war"
</span><span class='line'>apply plugin: "jetty"
</span><span class='line'>apply plugin: 'application'
</span><span class='line'>
</span><span class='line'>group = "kurobara"
</span><span class='line'>version = 1.0
</span><span class='line'>sourceCompatibility = 1.7
</span><span class='line'>mainClassName = "kurobara"
</span><span class='line'>applicationName = "kurobara"
</span><span class='line'>
</span><span class='line'>def defaultEncoding = 'UTF-8'
</span><span class='line'>[
</span><span class='line'>  compileJava,
</span><span class='line'>  compileTestJava,
</span><span class='line'>  javadoc
</span><span class='line'>]*.options*.encoding = defaultEncoding
</span><span class='line'>
</span><span class='line'>repositories {
</span><span class='line'>  mavenLocal()
</span><span class='line'>  maven { url "http://maven.seasar.org/maven2" }
</span><span class='line'>  mavenCentral()
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>dependencies {
</span><span class='line'>  compile 'org.eclipse.jetty:jetty-server:9.2.10.v20150310'
</span><span class='line'>  compile 'org.eclipse.jetty:jetty-webapp:9.2.10.v20150310'
</span><span class='line'>  compile 'org.glassfish.jersey.core:jersey-server:2.17'
</span><span class='line'>  compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.17'
</span><span class='line'>
</span><span class='line'>  testCompile 'junit:junit:4.10'
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>task stage(dependsOn: ['clean', 'installApp'])
</span><span class='line'>
</span><span class='line'>[jettyRun, jettyRunWar]*.httpPort = 8090
</span><span class='line'>[jettyRun, jettyRunWar]*.contextPath = 'kurobara'
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>task wrapper(type: Wrapper) {
</span><span class='line'>  gradleVersion = '1.6'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Jettyの準備</h3>

<hr />

<p>最低限度の内容でJettyサーバが動くようにします</p>

<p>mainメソッドにサーバの実装を記載します。</p>

<p>Gradleに記載したように、これがmainClassになります(mainClassNameを参照)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import org.eclipse.jetty.server.Server;
</span><span class='line'>import org.eclipse.jetty.webapp.WebAppContext;
</span><span class='line'>
</span><span class='line'>public class Main {
</span><span class='line'>
</span><span class='line'>  public static void main(String[] args) throws Exception {
</span><span class='line'>      Server server = new Server(Integer.valueOf(System.getenv("PORT")));
</span><span class='line'>
</span><span class='line'>      WebAppContext context = new WebAppContext();
</span><span class='line'>      context.setServer(server);
</span><span class='line'>      context.setContextPath("/");
</span><span class='line'>      context.setResourceBase("src/main/webapp");
</span><span class='line'>      context.setClassLoader(Main.class.getClassLoader());
</span><span class='line'>      server.setHandler(context);
</span><span class='line'>
</span><span class='line'>      server.start();
</span><span class='line'>      server.join();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以下の構成になるようにMainクラスを配置します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── build.gradle
</span><span class='line'>├── src
</span><span class='line'>│   └── main
</span><span class='line'>│       ├── java
</span><span class='line'>│       │   └── kurobara
</span><span class='line'>│       │       ├── Main.java &lt;- これを追加
</span><span class='line'>│       │       └── MyResource.java
</span><span class='line'>│       ├── resources
</span><span class='line'>│       └── webapp
</span><span class='line'>│           ├── WEB-INF
</span><span class='line'>│           │   └── web.xml
</span><span class='line'>│           └── index.jsp</span></code></pre></td></tr></table></div></figure>


<h3>動作確認</h3>

<hr />

<p>まずは、テストが動くかどうか確認</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$gradle clean
</span><span class='line'>$gradle test</span></code></pre></td></tr></table></div></figure>


<p>次にアプリをビルドし、サーバを起動</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$gradle clean
</span><span class='line'>$gradle build
</span><span class='line'>$gradle jettyRunWar</span></code></pre></td></tr></table></div></figure>


<p>以下のコマンドで<code>Got it!</code>が返却されるか確認</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -v http://localhost:8090/kurobara/webapi/myresource</span></code></pre></td></tr></table></div></figure>


<h3>Heroku環境用の準備</h3>

<hr />

<p>Herokuで動かすJavaのバージョンを指定するsystem.propertiesを作成<br/>
(以下のようにとりあえず確実に動作するバージョンを指定)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java.runtime.version=1.7</span></code></pre></td></tr></table></div></figure>


<p>Procfileに記載するスクリプトファイルの確認</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$gradle stage</span></code></pre></td></tr></table></div></figure>


<p>こういう形にビルド結果が出力されているので、アプリケーション起動スクリプトのファイルパスを確認する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── build
</span><span class='line'>│   ├── classes
</span><span class='line'>│   │   └── main
</span><span class='line'>│   │       └── kurobara
</span><span class='line'>│   │           ├── Main.class
</span><span class='line'>│   │           └── MyResource.class
</span><span class='line'>│   ├── dependency-cache
</span><span class='line'>│   ├── install
</span><span class='line'>│   │   └── kurobara
</span><span class='line'>│   │       ├── bin
</span><span class='line'>│   │       │   ├── kurobara &lt;- これが起動用ファイル
</span><span class='line'>│   │       │   └── kurobara.bat</span></code></pre></td></tr></table></div></figure>


<p>生成したスクリプトファイルパスをProcfileに記載</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>web: ./build/install/kurobara/bin/kurobara</span></code></pre></td></tr></table></div></figure>


<p>不要ファイルを無視するように.gitignoreを作成<br/>
(Herokuへのデプロイはgitのため)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>build/
</span><span class='line'>.gradle/</span></code></pre></td></tr></table></div></figure>


<p>最終的に以下の構成になります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── .gitignore
</span><span class='line'>├── Procfile
</span><span class='line'>├── build.gradle
</span><span class='line'>├── src
</span><span class='line'>│   └── main
</span><span class='line'>│       ├── java
</span><span class='line'>│       │   └── moonstruckdrops
</span><span class='line'>│       │       ├── Main.java
</span><span class='line'>│       │       └── MyResource.java
</span><span class='line'>│       ├── resources
</span><span class='line'>│       └── webapp
</span><span class='line'>│           ├── WEB-INF
</span><span class='line'>│           │   └── web.xml
</span><span class='line'>│           └── index.jsp
</span><span class='line'>└── system.properties</span></code></pre></td></tr></table></div></figure>


<h3>Herokuへdeploy</h3>

<hr />

<p>herokuへloginする</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install heroku
</span><span class='line'>$ heroku login</span></code></pre></td></tr></table></div></figure>


<p>サーバへデプロイする</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git init
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "Ready to deploy"
</span><span class='line'>$ git remote add heroku your_heroku_path
</span><span class='line'>$ git push heroku master</span></code></pre></td></tr></table></div></figure>


<p>以下のコマンドで<code>Got it!</code>が返却されるか動作確認</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$curl -v http://your_app.herokuapp.com/webapi/myresource</span></code></pre></td></tr></table></div></figure>


<h3>感想</h3>

<hr />

<p>書くと簡単でしたが、実際にやってみると思った以上に嵌まりどころが多かった</p>

<p>特に以下が盛大な罠でした</p>

<ul>
<li>Procfileに書くファイルはどれなのか</li>
<li><code>heroku logs</code>を確認すると<code>app crash</code>と表示されて何がなんだかわからんかったこと</li>
<li><code>app crash</code>起因ですがweb.xmlはいじらなくてもいいのか？なんて思ったこと</li>
</ul>


<p>一度環境さえ準備できれば開発に専念できるようになるので、非常に楽ですね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なぜApacheとTomcatを連携させるのか]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/03/17/apache-plus-tomcat/"/>
    <updated>2015-03-17T00:12:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/03/17/apache-plus-tomcat</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>同僚とApacheとTomcatって何で連携させるんだっけ？<br/>
という話が出たので備忘録的に記載しておきます</p>

<p>ぶっちゃけ、今更感がすごい内容ですが・・・</p>

<h3>Apache</h3>

<hr />

<p>ざっくり言うと、クライアントのブラウザからアクセスし、サービスを提供するためのWebサーバソフトウェア</p>

<h3>Tomcat</h3>

<hr />

<p>こちらもざっくり言うと、以下のもの</p>

<ul>
<li>「サーブレット・コンテナ」(Servlet等を動作させるために必要なWebアプリケーションサーバ)</li>
<li>Servletのインスタンス管理やセッションの管理</li>
<li>Webサーバ機能有り(主に開発とデバッグ用)</li>
</ul>


<h3>連携理由</h3>

<hr />

<p>開発、デバッグ用途としてWebサーバ機能があるので、問題はないのですが
そもそもとして、ApacheなどのWebサーバの性能と同等に捌けるかは疑問があったりするところ</p>

<p>なので、以下の処理分担としたほうが効率よく捌けるため連携をさせることが多い</p>

<ul>
<li>静的コンテンツ(HTMLや画像ファイルなど)の処理はApacheが担当(何故なら、高速でTomcatに比べて高速に処理できるから)</li>
<li>動的コンテンツに関しての処理をTomcatが担当</li>
</ul>


<p>所謂、餅は餅屋ということですな</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APIを作る際のAPIバージョンに関するメモ]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/02/18/api-life-cycle/"/>
    <updated>2015-02-18T23:19:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/02/18/api-life-cycle</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>APIを作るときにどうするか？を開発チーム内で議論したので、備忘録的なメモ</p>

<p>発端となった会話は、こんな感じだったはず</p>

<p>「マイクロアーキテクチャなサービスを作ったときってAPIを作ると思うけど、ライフサイクルって考えてる？」<br/>
「APIを利用するフロントは更新できるけど、APIは依存されるものが多いから簡単には更新できないよね？」<br/>
「APIってモバイルアプリからも利用した場合、修正しづらくない？バージョン管理でもするの？」</p>

<h3>APIの種別</h3>

<hr />

<p>以下の３つぐらいになりそう</p>

<ul>
<li>外部公開向け</li>
<li>モバイルアプリ向け</li>
<li>webサービス向け</li>
</ul>


<h3>外部公開向け</h3>

<hr />

<ul>
<li>API変更の影響が大きい</li>
<li>ドキュメント更新必須</li>
<li>利用者が離れるのでドラスティックな変更はできない</li>
<li>利用者への周知が必須</li>
</ul>


<h3>モバイルアプリ向け</h3>

<hr />

<ul>
<li>アプリのみが影響を受けるので、API変更における影響は少ない</li>
<li>アプリバージョンによるので自由にAPI更新ができない</li>
<li>OSバージョンによってアプリのアップデートができないことが多いので、更新によって使えなくなる可能性有</li>
<li>更新API対応のアプリであっても、アプリが更新されることは無いと思ったほうがよい</li>
</ul>


<h3>webサービス向け</h3>

<hr />

<ul>
<li>クライアントもAPIに合わせて最新にできるので、変更しやすい</li>
<li>キャッシュされたクライアントのコードとのデータ不整合が起きやすい</li>
<li>キャッシュに振り回される(iOSのwebview等)</li>
</ul>


<h3>バージョニング方式</h3>

<hr />

<p>APIのバージョン管理方式は以下のものが採用される傾向にある</p>

<ol>
<li>アクセス先URIそのものを大きく変更する</li>
<li>URIにバージョンを埋め込む</li>
<li>クエリに使用APIバージョンを入れる</li>
<li>メディアタイプにバージョンを指定する</li>
</ol>


<p>世間的には、2のパターンが比較的多く採用される傾向</p>

<h3>URIにバージョンを埋め込み方式</h3>

<hr />

<ul>
<li>「v1」のように「v」をつけてバージョンを明確にすることが多い</li>
<li>日付やリリースバージョン(ハッシュ等)をバージョンにするAPIもある(twillo等)</li>
<li>URIに組み込むバージョンは、メジャー番号のみを含める</li>
<li>APIの修正は、後方互換を保ちつつ対応する</li>
</ul>


<p>バージョニングは以下のセマンティックバージョニング方式を取ることが多い</p>

<ul>
<li>パッチバージョンは、ソフトウェアのAPIに変更がないバグ修正を行ったときに増える</li>
<li>マイナーバージョンは後方互換がある機能変更、特定の機能追加のときに増える</li>
<li>メジャーバージョンは後方互換が無い変更の時に増える</li>
</ul>


<h3>メディアタイプにバージョンを指定する</h3>

<hr />

<ul>
<li>「Accept: application/vnd.example.v2+json」のような形で規定する</li>
<li>URIがリソースを表しているので、HTTPの文法に則っている</li>
<li>「Content-Type」の指定誤りで、サーバ、クライアント側ともにエラーになりやすい傾向</li>
</ul>


<h3>バージョン変更指針</h3>

<hr />

<ul>
<li>APIは基本変更しないほうがよい</li>
<li>変更は後方互換を保ちつつ対応できる場合は、マイナーバージョンアップ(可能な限りこちらを選択)</li>
<li>後方互換が保てない修正の場合はメジャーバージョンアップ</li>
<li>レスポンスデータ整合性/整理のためであれば、バージョンは上げない(後方互換を維持し続け、ドキュメント整理で対応)</li>
</ul>


<h3>メジャーバージョンアップ指針</h3>

<hr />

<p>後方互換が保てない場合のみ実施し、バージョンアップのルールを整理してから行う</p>

<ul>
<li>セキュリティ/権限などのAPI使用ルール変更</li>
<li>認証方式の変更</li>
<li>乱雑に作った(ルールが無い)APIを使いやすくするための整備</li>
</ul>


<h3>APIの提供終了</h3>

<hr />

<ul>
<li>API提供終了前に提供終了日時のアナウンスをする(提供終了後、半年ほどは動かしておくこと)</li>
<li>提供終了までにAPIを利用できなくするブラックアウトテストを数回実施する</li>
<li>API提供終了の仕様をドキュメントに盛り込んでおく(HTTPのステータスコード410(Gone)を返すなど)</li>
<li>利用期限をAPI提供開始時に決めておく</li>
<li>古いAPIを叩いたときに、新APIへのリダイレクトは、混乱を招くので避けたほうがよい</li>
</ul>


<p># モバイル向けAPIの場合、ユーザー体験に直結するので仕様として予め考えておく(モバイル向けの場合、APIの停止はトレンドを見つつ行うこと)
# アプリのアップデートを促すようにしておく(強制アップデートは好まれないが、使えなくなるよりも遥かにマシ)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linuxのログイン履歴確認]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/02/18/linux-login-check/"/>
    <updated>2015-02-18T01:20:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/02/18/linux-login-check</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>毎度なんだっけ？ってなって思い出すのが面倒なので、備忘録的にログイン履歴確認方法を記録</p>

<h3>最近ログインしたアカウント一覧</h3>

<hr />

<p>以下のコマンドで確認できる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$last</span></code></pre></td></tr></table></div></figure>


<p>実行結果(上に行くほど最新)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root     tty1                          Tue May  6 18:59 - crash  (00:16)
</span><span class='line'>root     tty1                          Tue May  6 18:58 - 18:59  (00:00)
</span><span class='line'>reboot   system boot  2.6.32-431.11.2. Tue May  6 17:16 - 21:21  (04:04)</span></code></pre></td></tr></table></div></figure>


<h3>ログファイルから確認する</h3>

<hr />

<p>もう少し細かく見る場合はログファイルを確認する<br/>
バイナリなので中を見たいときはwhoコマンドを使用する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$who /var/log/wtmp</span></code></pre></td></tr></table></div></figure>


<p>実行結果(ログファイルなので、ファイル末尾が新しい)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root     tty1         2014-05-06 18:58
</span><span class='line'>root     tty1         2014-05-06 18:59
</span><span class='line'>root     tty1         2014-05-06 19:19</span></code></pre></td></tr></table></div></figure>


<h3>各アカウントの最終ログインの一覧</h3>

<hr />

<p>普段利用していないアカウントでログインされていないか確認できる<br/>
以下のコマンドで確認できる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$lastlog</span></code></pre></td></tr></table></div></figure>


<p>実行結果(各アカウントの最終ログインが表示)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ユーザ名         ポート   場所             最近のログイン
</span><span class='line'>root             tty1                      **一度もログインしていません**
</span><span class='line'>bin                                        **一度もログインしていません**
</span><span class='line'>daemon                                     **一度もログインしていません**
</span><span class='line'>adm                                        **一度もログインしていません**
</span><span class='line'>lp                                         **一度もログインしていません**
</span><span class='line'>sync                                       **一度もログインしていません**
</span><span class='line'>shutdown                                   **一度もログインしていません**</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressでの画像の表示]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/01/28/octopress-picture/"/>
    <updated>2015-01-28T00:55:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/01/28/octopress-picture</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>常々、画像ファイルってどう表示するのだっけ？と思っていたのでやってみた感じ</p>

<h3>ファイルの格納先</h3>

<hr />

<p><code>octopress/source/images</code>ディレクトリに画像ファイルを格納する</p>

<p>themeで表示している画像が最初から格納されているので、ビビらず画像ファイルを格納すること</p>

<h3>指定方法</h3>

<hr />

<p><a href="http://octopress.org/docs/plugins/image-tag/">公式</a>を参照すればできる模様</p>

<p>そのため前述の格納先を相対URLで指定すると、以下の形になる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![hoge](/images/hoge.jpg)</span></code></pre></td></tr></table></div></figure>


<p>こんな感じでやると画像を表示できる</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TimeCapsuleのethernetを確認する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/01/28/timecapsule-eth0/"/>
    <updated>2015-01-28T00:45:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/01/28/timecapsule-eth0</id>
    <content type="html"><![CDATA[<h3>備忘録的に</h3>

<hr />

<p>TimeCapsuleのIPアドレスを固定にしたかったので、MACアドレスを調べる必要が出てきた</p>

<p>また同じことにならないようにメモしておく</p>

<h3>確認方法</h3>

<hr />

<p>下記の図のように、AirMacユーティリティを開き機器のタイトルを選択すると表示されます</p>

<p><img src="http://moonstruckdrops.github.com/images/airmac.png" alt="AirMac" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidのPull To Refreshをちょっとだけ調べた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/01/17/pull-to-refresh/"/>
    <updated>2015-01-17T23:58:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/01/17/pull-to-refresh</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>ここの内容は完全に備忘録です。<br/>
何故かというと、自分がちょっと実現したい機能があったけどできるのだろうかと調べてみたメモだからです。</p>

<h3>普通のPull To Refresh</h3>

<hr />

<p>所謂、下向きに引っ張るとListViewが更新されるやつですね。</p>

<p>これはAPI Level19のSupport V4 Libraryにて機能提供されているので、簡単に実現できます。<br/>
(ちょっと癖はあるかもしれませんが・・・)</p>

<p>以下にデモとReferenceを記載</p>

<ul>
<li><a href="https://developer.android.com/samples/SwipeRefreshLayoutBasic/index.html">SwipeRefreshLayoutBasic</a></li>
<li><a href="https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html">SwipeRefreshLayout</a></li>
</ul>


<p># デモを見ればわかりますが、扱うだけなら非常に楽に使えるような感じになっています(カスタムは面倒臭さそう)<br/>
# ぐぐれば、いっぱい記事は見つかるので詳細はそちらに譲ります</p>

<h3>やりたかったこと</h3>

<hr />

<p>下から上にListViewを引っ張ると、ListViewが更新されること<br/>
俗に言う、bottomup to refreshってやつです</p>

<h3>調べてみた</h3>

<hr />

<h4>ライブラリは？</h4>

<p><a href="https://github.com/chrisbanes/Android-PullToRefresh">Android-PullToRefresh</a>が、対応している
但し、作者がdeprecated宣言</p>

<h4>カスタム実装は？</h4>

<p>少し試してみた感じだと、標準機能を駆使して実現(Classの継承など)は、まず無理かも</p>

<p># そもそも、そんな感じで簡単にrefreshする機能を上下を入れ替え作られているような感じにはなってなかった</p>

<h4>ソースコードを見れば？</h4>

<p>結論から言うと、onTouchEventでアニメーションの実施の有無など詳細な条件判定とかやっているので今のところ難しそう</p>

<p><a href="https://android.googlesource.com/platform/frameworks/support/+/refs/heads/master/v4/java/android/support/v4/widget/SwipeRefreshLayout.java">SwipeRefreshLayout.java</a></p>

<p># 追いかけた結果を書くのは割愛します</p>

<h5>他の人はどうなの？</h5>

<p>同じことを考える方はいらっしゃるようですね。</p>

<p><a href="http://stackoverflow.com/questions/24867204/swiperefreshlayout-pull-from-bottom">SwipeRefreshLayout - Pull From Bottom</a></p>

<p>ざっくり書くと、こんな感じ</p>

<ul>
<li>今のAPIだと簡単には無理</li>
<li>OSSのコードをコピーして、自前で<a href="https://bitbucket.org/andreyice/swiperefreshlayoutbottom">実装</a>した</li>
<li><a href="http://www.oodlestechnologies.com/blogs/Implementing-Pull-to-refresh-(like-in-Facebook-mobile-app)-for-ANDROID-using-Titanium">ここ</a>を参考に実装すればもしかしたらできるかも</li>
</ul>


<p># ソースコード見た感触とあまり変わらない(´・ω・｀)</p>

<h3>ちょっと調べてとりあえず分かったこと</h3>

<hr />

<p>API叩いて直ぐ実現可能というわけではないようですね(´・ω・｀)</p>

<ul>
<li>クラスを継承した独自のLayoutにすればなんとかできそうかもしれない</li>
<li>但し、onTouchEventを自前で実装するのと処理中のアニメーションを挟むため、一筋縄ではいかない</li>
<li>実現方法の参考実装はあるので、うまくできそうかやってみればいいかもしれない</li>
<li>deprecated宣言しているが、ライブラリを使えば楽にはできる(その後のメンテナンスコストは払う必要は出そうだが・・・)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacsのバージョンで分岐をさせたい]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/01/08/emacs-version/"/>
    <updated>2015-01-08T00:51:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/01/08/emacs-version</id>
    <content type="html"><![CDATA[<h3>発端</h3>

<hr />

<p>Emacsのバージョンを最新にしたことで色々設定が楽に書けることがわかった<br/>
そのため、最新内容を反映させた</p>

<p>とはいえ、下位互換もある程度保ちたかった<br/>
(全部、追従すればいいのだがそうもいかない環境もあるので)</p>

<h3>最初に試してみた</h3>

<hr />

<p>普通にバージョンを取得してみた</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(emacs-version)
</span><span class='line'>"GNU Emacs 24.4.1 (x86_64-apple-darwin14.0.0, NS apple-appkit-1343.16)
</span><span class='line'> of 2015-01-04 on hoge.local"</span></code></pre></td></tr></table></div></figure>


<p>文字列のマッチング処理が多くなりそうで結構めんどくさい・・・</p>

<h3>結果的にこうした</h3>

<hr />

<p>普通のmajor/minor バージョン判定を複合した条件判定するだけの関数を用意</p>

<p>24.3以下の判定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defvar is-less-than-or-equal-24-3 (and (&lt;= emacs-major-version 24) (&lt;= emacs-minor-version 3)))</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web API The Good Parts2章]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/12/22/web-api-good-parts-2/"/>
    <updated>2014-12-22T23:18:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/12/22/web-api-good-parts-2</id>
    <content type="html"><![CDATA[<h2>前置き</h2>

<h4>近況</h4>

<hr />

<p>ざっくりと書くと、お前エンジニアなのに勉強しなくていいの？という状態</p>

<ol>
<li>免許が取れたので単車を乗り回している(運転が楽しくて毎日、運転しているような)</li>
<li>昨年よりも比較的、仲がいい友人(男女問わず)と遊ぶ機会が多くなったかも&#8230;</li>
<li>気の合う仲間と組んで、(Swiftで)アプリ作っている</li>
<li>その気の合う仲間への技術指導していたり&#8230;</li>
</ol>


<p>なんだか、教えることが多くなって自分が学習している時間が比較的減ってきているそんな感じががが</p>

<h4>そういう訳なので</h4>

<hr />

<p>本屋でざっくりと見かけてツボに嵌った本を読んでいこうかと</p>

<p>「Web API The Good Parts」</p>

<p>なのですが、上記3,4が結構あるので中々進まないという(ぉぃ</p>

<p>ということなので、なるたけ気になるところ(覚えておくべきところ)だけまとめていこうかなと</p>

<p>斜め読みした感じでは、結構ツボに嵌る内容なので自分のバイブルに入選してもいいかなと思ってたり。</p>

<h2>エンドポイント設計</h2>

<ol>
<li>公開する機能を先に設計する</li>
<li>覚えやすく、どんな機能を持つURIかひと目で分かるようにする</li>
<li>HTTPメソッドの活用</li>
<li>設計の注意点</li>
<li>クエリパラメータ</li>
<li>ログインや認証</li>
<li>ホスト名とエンドポイント</li>
</ol>


<h4>1に関して</h4>

<hr />

<p>どんなAPIが必要かどうかを先に洗い出しておく</p>

<h4>2に関して</h4>

<hr />

<ul>
<li>短く入力しやすいURI</li>
<li>人間が読んで理解できるURI</li>
<li>大文字、小文字が混在しないURI</li>
<li>改造しやすいURI</li>
<li>サーバ側アーキテクチャが反映されていないURI</li>
<li>ルールが統一されたURI</li>
</ul>


<h4>3に関して</h4>

<hr />

<p>HTTPメソッドを有効活用</p>

<ul>
<li>Restfulな形で活用すれば、一般的な形</li>
</ul>


<h4>4に関して</h4>

<hr />

<ul>
<li>複数形の名詞を利用する</li>
<li>利用する単語に気をつける((ProgramableWeb)[http://www.programmableweb.com/]等、他のサービスを参考に)</li>
<li>スペースやエンコードが必要な文字は避ける</li>
<li>単語をつなげる場合はハイフンにする(SEO的に有利なことも)</li>
</ul>


<h4>5に関して</h4>

<hr />

<ul>
<li>相対位置を使用する場合、データ数が多くなると取得件数が減ること、更新頻度が高いものは不整合が起きやすくなることに注意</li>
<li>絶対位置を使用する場合、クエリパラメータが「x以降」,「この日付よりも古いもの」という形でクエリパラメータをもたせたほうがよい</li>
<li>日付の形式は、RFC3339に規定されている「1970-01-01T00:00:00Z」の形にする</li>
<li>絞り込みのパラメータは、「q」のような形は曖昧検索に取られやすいので完全一致の場合は適切なパラメータにすること</li>
<li>一意なリソースを表すのに必要な情報: パス</li>
<li>省略可能: クエリパラメータ</li>
</ul>


<h4>6に関して</h4>

<hr />

<ul>
<li>OAuthを使用して、標準的な形にする</li>
</ul>


<p>標準的なOAuthに則るとエラーメッセージ(RFC6749, RFC6750)は、以下のような形式となる
(当然ながらhttpステータスは401)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "error": "invalid_token"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>7に関して</h4>

<hr />

<ul>
<li>ホスト名にapiを入れるのが主流</li>
<li>企業で複数のサービスをホストする場合、例外的なホスト名</li>
<li>サービスとしてのapiの場合はホスト名にapiをいれたほうがよい(外部から使われるため)</li>
<li>プラットフォームの場合、service等をホスト名にいれる</li>
</ul>


<h2>まとめ</h2>

<hr />

<ul>
<li>一般的なURI設計がそのまま適用できる</li>
<li>APIならではのルール、デファクトスタンダードがある</li>
<li>URIはリソースを表すものなので、URIとHTTPメソッドの組み合わせで処理の対象と内容を設計をする</li>
</ul>


<h4>Good</h4>

<ul>
<li>覚えやすく、どんな機能を持つかが一目で分かるようにエンドポイントにする</li>
<li>適切なHTTPメソッドを利用する</li>
<li>適切な英単語を利用し、単数形、複数形にも注意する</li>
<li>認証はOAuth2.0を使う</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSで複数のmodalを同時に閉じる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/11/15/back-multi-modal/"/>
    <updated>2014-11-15T17:02:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/11/15/back-multi-modal</id>
    <content type="html"><![CDATA[<h3>こんな状況</h3>

<hr />

<p>[A→B→C→Dの順で画面を開いた状況で、D->Aへ戻りたいという状況</p>

<h3>やり方</h3>

<hr />

<p>戻りたいところのmodalを指定すると、その前のものは全て閉じることができました</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.presentingViewController?.presentingViewController?.dismissViewControllerAnimated(true, completion: nil)</span></code></pre></td></tr></table></div></figure>


<p>画面遷移の状態を覚えてないと辛い感じですね</p>

<h3>元ネタ</h3>

<hr />

<p><a href="dismissViewControllerAnimated:completion:">https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewController_Class/index.html#//apple_ref/occ/instm/UIViewController/dismissViewControllerAnimated:completion:</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacsを再起動せずに設定を反映させる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/11/09/reload-config-emacs/"/>
    <updated>2014-11-09T12:23:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/11/09/reload-config-emacs</id>
    <content type="html"><![CDATA[<h3>やりたいこと</h3>

<hr />

<p>Emacsを再起動せず、設定内容を反映させたい</p>

<h3>解決編</h3>

<hr />

<p>追加した部分だけ、評価する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x eval-region</span></code></pre></td></tr></table></div></figure>


<p>今、現在実行している全てのバッファの式を再評価する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x eval-buffer</span></code></pre></td></tr></table></div></figure>


<p>そもそもの設定ファイルを読みなおす</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x load-file RET ~/.emacs.d/init.el</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gocon-spring]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/05/31/gocon-spring/"/>
    <updated>2014-05-31T13:49:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/05/31/gocon-spring</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryが見つからないよエラーの解消法]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/03/26/update-gemfile/"/>
    <updated>2014-03-26T23:32:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/03/26/update-gemfile</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>今更ながら、Rails3.2のアプリをRails4までアップデートしました。<br/>
そのとき出たエラーと解消方法を残します。</p>

<h3>当該のエラー</h3>

<hr />

<p>それがこれ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>couldn't find file 'jquery'</span></code></pre></td></tr></table></div></figure>


<p>正直、なんで？という感じ</p>

<h3>解消方法</h3>

<hr />

<p>Gemfileの記述が変わってたことが原因でした<br/>
(asset compile周りの仕様変更)</p>

<p>Rails3.x系は、Gemfileに以下がありました</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>group :assets do
</span><span class='line'>
</span><span class='line'>ここにasset compileで使用するgemがある
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>ところが、Rails4系になるとasset groupは無くなる仕様に変わったみたいです。<br/>
代わりの設定は、<code>config/application.rb</code>になるようです。</p>

<p>メジャーアップデートの前に、<a href="http://railscasts.com/episodes/415-upgrading-to-rails-4?language=ja&amp;view=asciicast">移行ガイド</a>に目を通せってことですねw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Bazaar and Conference 2014 Springに行ってきた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/03/23/abc-2014-spring/"/>
    <updated>2014-03-23T22:12:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/03/23/abc-2014-spring</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>もう殆ど、Androidをやっていない身ですが情報追っかけ程度に参加してきました。</p>

<p>因みに、当日は寝坊してやべぇって言ってたのは内緒w</p>

<p>興味が湧いたセッションは2つぐらいだったので、それさえ聴ければいいかなーぐらいの感覚で行ってきました。</p>

<p>というわけで、当日のメモに加筆修正したものを残します。</p>

<h3>UI/UXデザイントレンド 2014</h3>

<hr />

<h4>デザイントレンド</h4>

<ul>
<li>質感がわかるようなデザインに変わりつつ</li>
<li>スキュモーフィズムからフラットデザインへ

<ul>
<li>装飾を外してシンプルに</li>
<li>flatvsrealism.com</li>
</ul>
</li>
<li>フラットのほうが意図が伝わりやすい

<ul>
<li>Androidのデザインガイドラインもフラットなものに変わっている</li>
<li>Googleも力を入れていることがわかる</li>
</ul>
</li>
</ul>


<h4>Androido UI</h4>

<h5>2011年のTrend</h5>

<ul>
<li>派手</li>
<li>白いテキスト</li>
<li>リアルで立体的なアイコン</li>
<li>この当時はiPhoneが流行っていたので、似たようなデザインになるような感じ</li>
</ul>


<h5>2012年のTrend</h5>

<ul>
<li>黒やダークな背景</li>
<li>ダークやマットな色</li>
<li>水色や白のテキスト</li>
<li>レイアウトがグリッドスタイル</li>
<li>ON/OFFボタンなど、ルールが破綻してるところもあった</li>
<li>ボーダレスUI(ひと目でボタンなのかわからないようなものを指す)</li>
</ul>


<h5>2013年のTrend</h5>

<ul>
<li>白や明るい背景</li>
<li>カードスタイル(Googleの殆どのアプリが対応)</li>
<li>影を入れたりして立体感を出している

<ul>
<li>(GooglePlayでの)評価が上がりやすい</li>
<li>platformとの統一感が重要</li>
</ul>
</li>
<li>ボーダレスUIは健在・・・</li>
<li>シンプルなアイコンやイラスト</li>
</ul>


<h4>2014年(1Q)のTrend</h4>

<ul>
<li>Yahoo weatheアプリのような感じになりつつある

<ul>
<li>カードスタイルから変わる</li>
</ul>
</li>
<li>端末のスペックが上がってきたから対応できるようになってきた

<ul>
<li>写真やグラデーション</li>
</ul>
</li>
</ul>


<h4>Android wear</h4>

<ul>
<li>サークルUI

<ul>
<li>アイコンが丸くなっているものが増えてきた</li>
<li>フラットで押したりする領域が分からないという問題への回答かも</li>
</ul>
</li>
<li>より大きな書体</li>
<li>写真やビジュアルリッチに</li>
</ul>


<h4>webサイトデザインとの違い</h4>

<ul>
<li>スケーラブル、モニターによっての情報量が違う

<ul>
<li>スマホ向けは、シンプル・単機能・担当直入な処理デザインに</li>
</ul>
</li>
</ul>


<h4>QAメモ</h4>

<ul>
<li>アプリのUIデザインはどうするの？

<ul>
<li>ゲームUIとアプリUIとは全く違うので、機能を入れ過ぎないようにする</li>
</ul>
</li>
<li>インタラクションにもデザイナーが関わってやっていくほうがよい

<ul>
<li>ダサいものになりづらい</li>
<li>エンジニアも積極的にデザイナーと一緒にやっていく</li>
</ul>
</li>
<li>流行を追っかけるためのデザインサイト

<ul>
<li>Android niceties</li>
</ul>
</li>
<li>デザインにも事業戦略が必要

<ul>
<li>古い端末もサポートするのか？など

<ul>
<li>2.x系はもう切ってもいいかも</li>
<li>１つで全部の対応は難しいので避けたほうがよい</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>トレンドの変遷(最近のAndroidアプリのトレンドについて)</h3>

<hr />

<h4>はじめに</h4>

<ul>
<li>セッションはAndroid Pattern Cookbookの解説&amp;補足</li>
<li><a href="https://play.google.com/store/apps/details?id=yanzm.products.patterncookbook">AndroidPatternCoockbookのデモアプリ</a>あるので確認しながらだと理解進むかも</li>
<li>最近の開発は、タブレット対応も必須</li>
</ul>


<h4>ダッシュボードデザイン</h4>

<ul>
<li>メインコンテンツが複数ある場合、機能が視認しやすいので優位</li>
<li>1回操作挟むのは、ダメじゃね？</li>
</ul>


<h4>タブ</h4>

<ul>
<li>スワイプでタブ間の行き来ができるように</li>
<li>各コンテンツのスワイプはできない・・・</li>
</ul>


<h4>NvigationDrawer</h4>

<ul>
<li>ガイドライン化</li>
<li>メジャーなものは大体NvigationDrawerを使ってる</li>
<li>アイコン左、カウンターは右</li>
</ul>


<h4>アプリの世界観も重要</h4>

<ul>
<li>FeedlyやEvernoteが筆頭

<ul>
<li>出しすぎなところもあるけど・・・</li>
</ul>
</li>
</ul>


<h4>上部にユーザー情報を表示が多い</h4>

<ul>
<li>アカウント切り替えが難しいタイプも・・・</li>
</ul>


<h4>オリジナリティを出す</h4>

<ul>
<li>黒はデザインが難しい</li>
</ul>


<h4>アクションバー</h4>

<ul>
<li>アクションバーとコンテンツの配色は雰囲気になる

<ul>
<li>白だと明るい、清潔感が出やすい</li>
<li>白+黒だと引き締まる</li>
</ul>
</li>
<li>アクションバーの背景

<ul>
<li>下に影をつけるものも多い</li>
</ul>
</li>
<li>フレームワークのアクションバーを使ったほうがよい

<ul>
<li>アプリの世界観次第で独自路線があるならいいけど。</li>
</ul>
</li>
</ul>


<h4>フォント</h4>

<ul>
<li>ライセンス問題になりやすいので、フォントはアプリに内蔵しないほうがいい</li>
<li>fontFamilyを使うと改善できる可能性がある

<ul>
<li>font同士を組み合わせて使うほうといい</li>
</ul>
</li>
</ul>


<h4>ヘルプポップアップ</h4>

<ul>
<li>注目させたい場合、アニメーションを使うと注目させやすい</li>
</ul>


<h4>インストラクション</h4>

<ul>
<li>「ここを押す」などの表示を入れやすい</li>
</ul>


<h4>チュートリアル</h4>

<ul>
<li>読む？テキスト量は減らしたほうがいい</li>
<li>画像で伝え、1行ぐらいがいい</li>
<li>無くてもいいかの検討も重要</li>
</ul>


<h4>viewpager</h4>

<ul>
<li>スクロールできるタブ</li>
<li>タイトルストリップ</li>
<li>インジケータ

<ul>
<li>ページの移動でアイコンが変わるもの</li>
</ul>
</li>
<li>ページ切り替えでエフェクト</li>
</ul>


<h4>タブレット対応</h4>

<ul>
<li>スケールアップは微妙な対応

<ul>
<li>データ量が無ければ、それでもいいかも</li>
<li>画像入れるなりで、余白を減らす</li>
</ul>
</li>
<li>macroreflow

<ul>
<li>グリッドの並び替え

<ul>
<li>数も重要になる</li>
</ul>
</li>
<li>スマホはリストで対応してやるといい</li>
</ul>
</li>
<li>master/detailパターン

<ul>
<li>gmailアプリとかgoogle playアプリ</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsで定数を定義する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/03/23/rails-consts/"/>
    <updated>2014-03-23T20:34:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/03/23/rails-consts</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>Railsで定数を作るとき、いつもどうしてたっけ？っていう個人まとめをつくってみました。</p>

<p>決定版みたいなものが無い感じというのもあったりするので参照用という感じです。</p>

<h3>グローバルな定数定義</h3>

<hr />

<p>以下のような感じの内容で、「config/initializers」に適当なRubyファイルを作成して定義します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HOGE = "HOGE"
</span><span class='line'>FUGA = "FUGA"</span></code></pre></td></tr></table></div></figure>


<p>もしくは、yamlに定数を切り出して、実行タイミング(Rails起動時)にロードという方式でもいいかもしれません。<br/>
# yamlに切り出すと管理が大変になるかも・・・という欠点は無きにしもあらずですね。</p>

<p>欠点は以下が考えられます。</p>

<ul>
<li>namespaceの概念が無いので少々使いづらい</li>
<li>環境ごとに値を変更したい場合、切り替え処理を自前でやる必要がある</li>
</ul>


<p>特に、環境差分とか無ければこれでいいかもしれませんね。<br/>
# 尤も、namespaceを使わなくて済む程度という前提が付きますが・・・</p>

<h3>コントローラー内で共通な定数定義</h3>

<hr />

<p>以下のような感じで、app/controllers/application_controller.rb 内で定義します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ApplicationController &lt; ActionController::Base
</span><span class='line'>  HOGE = "HOGE"
</span><span class='line'>  FUGA = "FUGA"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>単にApplicationControllerがすべてのcontrollerのスーパークラスになっているから参照できるというだけの話です。
# あまりここに定義はしたくないですね。</p>

<h3>rails_configを使って環境ごとに変更する</h3>

<hr />

<p><a href="https://github.com/railsjedi/rails_config">rails_config</a>というgemを使う方法ですね。</p>

<p>以下をGemfileに記述し、インストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rails_config'</span></code></pre></td></tr></table></div></figure>


<p>rails_configを使うように初期設定をします(ただのインストールですが)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rails g rails_config:install</span></code></pre></td></tr></table></div></figure>


<p>ファイルに関しては以下の通り</p>

<table>
<thead>
<tr>
<th align="left">環境</th>
<th align="left">ファイルパス</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">全ての環境で共通</td>
<td align="left">config/settings.yml</td>
</tr>
<tr>
<td align="left">ローカル環境</td>
<td align="left">config/settings.local.yml</td>
</tr>
<tr>
<td align="left">開発環境</td>
<td align="left">config/settings/development.yml</td>
</tr>
<tr>
<td align="left">テスト環境</td>
<td align="left">config/settings/test.yml</td>
</tr>
<tr>
<td align="left">本番環境</td>
<td align="left">config/settings/production.yml</td>
</tr>
</tbody>
</table>


<p>YAMLの記述は以下のような感じで行います</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hoge:
</span><span class='line'>  fuga: 'fugafuga'
</span><span class='line'>  test: 'test'</span></code></pre></td></tr></table></div></figure>


<p>使用する場合は、以下のようなコードで出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Settings.hoge[:fuga]
</span><span class='line'>Settings.hoge['fuga']
</span><span class='line'>Settings[:hoge][:fuga]</span></code></pre></td></tr></table></div></figure>


<p>他に、同じようなことをする有名なgemに、「settingslogic」があります。<br/>
以下の感想でsettingslogicはあまりつかわないです。</p>

<ul>
<li>一つのファイルで全て定義なのでファイルが肥大化しそう</li>
<li>クラス定義も作る必要があるので若干面倒(シンプルに使えない)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでSolrを使うときに気をつけること]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/03/23/ruby-solr/"/>
    <updated>2014-03-23T12:31:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/03/23/ruby-solr</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>タイトルは釣り臭が半端ないですねw</p>

<p>正確なことを言うと使用ライブラリは、<br/>
特性を理解の上で使いましょうということが言いたいだけです</p>

<h3>RubyでSolrを使う際のライブラリと言えば</h3>

<hr />

<p>大体、以下の２つになると思います</p>

<ul>
<li><a href="https://github.com/rsolr/rsolr">RSolr</a></li>
<li><a href="http://sunspot.github.io/">sunspot</a></li>
</ul>


<p>前者は、シンプルな機能に対して、後者は多機能になっています</p>

<h3>RSolr</h3>

<hr />

<p>ここら編は、ドキュメントを見たほうがよいですが自分の理解をダラっと</p>

<ul>
<li>接続やプロキシは、自分で設定できる(タイムアウトやリトライ設定も可能)</li>
<li>上記の為、(実装に応じるが)自由に検索先のスキーマを変更できる</li>
<li>検索クエリ(ファセットクエリ等も含む)は自前で実装しないといけない</li>
<li>rowsやstartなども自前で実装する必要がある</li>
<li>更新や削除(クエリベースやidベースで)もできる上にメソッドとして用意してある</li>
<li>responseはハッシュになっているので、自前で検索結果を整形(ActiveRecordオブジェクト等)する必要がある</li>
<li>ページングも対応している</li>
</ul>


<p>一声で言うと・・・</p>

<ul>
<li>クエリ構築は自前でやる必要がある</li>
<li>検索結果の整形も自前でやる必要がある</li>
<li>実装次第で、接続先のSolrも自由に変更することができる</li>
</ul>


<p>シンプルとか言っておきながら、結構ありますね<sup>^;;</sup></p>

<p>実際、使うとわかりますがかなりシンプルですよ</p>

<h3>sunspot</h3>

<hr />

<p>こちらもドキュメントを見たほうがよいのですが・・・</p>

<ul>
<li>検索クエリ(facetクエリなら)をDSLライクに記述できる</li>
<li>検索はdismaxで行ってくれる</li>
<li>検索クエリの結果はActiveRecordオブジェクトで取得できる</li>
<li>全文検索も直感的に記述できるうえにboost値も設定できる</li>
<li>ページングやグルーピングにも対応している</li>
<li>緯度、経度のデータも検索できる</li>
<li>検索ハイライトやスキーマデータの結合にも対応している</li>
<li>indexingもsunspotのみで完結することができる(削除もできます)</li>
<li>勿論、手動でクエリを構築することも可能</li>
<li>sunspot自体がRSolrに依存しているので、その気になればRSolrの機能も一応使うことができる</li>
</ul>


<p>これだけ、高機能なので当然の如く欠点もありまして・・・</p>

<ol>
<li>Solrのスキーマ定義がsunspotに依存した形になってしまうこと</li>
<li>indexするデータの一部もsunspotに依存した形になってしまうこと</li>
<li>Solrのフィールドに対応する形でActiveRecordのmodelクラスに定義が必要になること</li>
<li>sunspotが吐き出すクエリを理解しないと使いづらいこと</li>
<li>sunspot自体がmethod_missingを使った実装なのでコードが読みづらいこと・・・</li>
</ol>


<h3>日本語を扱う場合の注意点</h3>

<hr />

<p>基本的に、検索文字列の処理はSolr側のtokenizerで行われます。</p>

<p>ところがsunspotで日本語を使う場合だと、全文字列がエスケープされてしまいます。</p>

<p>例えば、「あいうえお」を検索したい場合だと「\あ\い\う\え\お」になってしまいます。</p>

<p>因みに、英語検索は問題ありません。</p>

<p>原因がどこにあるかと言うと、 <a href="https://github.com/sunspot/sunspot/blob/master/sunspot/lib/sunspot/query/restriction.rb">restriction.rb</a>にあります。</p>

<p>具体的な箇所は、このmodule内で使用されているescapeメソッドが原因です。<br/>
このescapeメソッドの実装は、<a href="https://github.com/rsolr/rsolr/blob/master/lib/rsolr/char.rb">char.rb</a>ですね。<br/>
つまり、RSolr側の不具合に近いでしょう。<br/>
また、RSolrを使って自前で実装するときもこのescapeメソッドを使用しないほうがいいです。</p>

<p>sunspotの依存gem側の問題なので、簡単に修正するのも難しいですね。</p>

<h3>対処方法は？</h3>

<hr />

<p>モンキーパッチを使えば、対処できました。</p>

<p>escapeメソッドを使っているところを全部上書き実装すればいいだけです。</p>

<p>Railsで使う場合だと、「config/initialize/sunspot.rb」みたいなのを作ればいいですね。<br/>
その中で、上記の処理を使えば対応可能です。</p>

<p>まぁ、根本解決ではないなと思いますが・・・</p>
]]></content>
  </entry>
  
</feed>
