<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2013-06-27T22:20:35+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[日経ソフトウェア7月号の特集を読んだ感想]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/06/18/nikkei-software-07/"/>
    <updated>2013-06-18T23:36:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/06/18/nikkei-software-07</id>
    <content type="html"><![CDATA[<p>日経ソフトウェア7月号の特集「そのコードは古い!」を読んだ感想。</p>

<p>これとは別の技術書を書店まで買いに行きました。</p>

<p>そこで日経ソフトウェアを手に取りました。</p>

<p>いつもは、日経ソフトウェアを書店でパラパラ目を通す程度です(エンジニアに端くれかみたいな感想は兎も角)
ただ、今回は特集のタイトルに惹かれて買ってじっくり読んでみました。</p>

<p>なので、特集に限って読んだ感想というメモを残します。
あくまで、私めの意見というか感想なので・・・スルーしていただけると。</p>

<h3>C言語編</h3>

<hr />

<p>point1「void mainはやめよう」とありますが、これは入門書のサンプルが諸悪の根源かと思います。<br/>
自分がC言語を学習したときは、普通にvoid mainで教わりました。<br/>
当時は、Unix/Linuxの知識も無いので当たり前ですし、戻り値が、intになっていてもおまじない程度の認識でした。</p>

<p>なので、intの意味まで教えてあげるべきかなーと思います。(特に初学者に対してですが)<br/>
こうやって、サンプルコードとして教えてあげればいいかなーとか思いました。(これなら処理が正常終了していることが明確になるかと)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include&lt;stdio.h&gt;
</span><span class='line'>#include&lt;stdlib.h&gt;
</span><span class='line'>
</span><span class='line'>int main(void){
</span><span class='line'> printf("Hello world");
</span><span class='line'> return EXIT_SUCCESS;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以下のものは当たり前の話かなーと思いました。</p>

<ul>
<li>point2「文字定数にchar型は使わない」(関数同士で受け渡す際はint型に変換されるから)</li>
<li>point3「古い関数定義はやめよう」(K&amp;Rの記述方法。本を読めば分かります)</li>
<li>point4「gets関数は古い」(確保された領域以上のものが入力されたらバッファオーバーフローになっちゃうから)</li>
<li>point5「switch文あり気で考えない」(これはどの言語でも言える話で、コードが見づらくなっちゃう上に、break文忘れるとバグになってしまう)</li>
<li>point6「何でも#defineで定数や関数マクロを定義するのは古い」(コンパイル時の型チェック等スルーする上、関数マクロは記述ミスをしやすくなるから)</li>
<li>point7「定数の羅列に#defineは古い」(意味のある連続したものだとenum使ったほうが便利ですね)</li>
<li>point8「ポインタサイズでメモリを確保しない」(ポインタ型とデータ型は処理系によってサイズが違うから)</li>
</ul>


<p>point8の良くないコードは以下のもの</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>double *d
</span><span class='line'>d = (double *)malloc(sizeof(d)*100)</span></code></pre></td></tr></table></div></figure>


<p>良いコードは以下のもの</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>double *d
</span><span class='line'>d = (double *)malloc(sizeof(*d)*100)</span></code></pre></td></tr></table></div></figure>


<p>書いて思ったけど、普通のことだな。。。</p>

<h3>java編</h3>

<hr />

<p>お仕事柄メイン(?)で使ってたので・・・</p>

<ul>
<li>point1「C言語で主流だったハンガリアン記法は古い」</li>
<li>point2「スネークケースは使わない」</li>
<li>point3「メソッドの先頭に変数宣言を並べるのは古い」</li>
<li>point4「エラー種別をintで返さない」</li>
<li>point5「処理結果を引数に格納しない」</li>
</ul>


<p>このあたりはCの悪癖なんで、マジ勘弁して下さい・・・。<br/>
コードレビューにこんなコード出してきたら速攻Rejectしちゃいますよ。。。<br/>
poin4は、Exceptionをthrowすればいいのでなんとかなります(尤もjniに依存するようなコードだと考えてもいいかなーなんて個人的には考えてしまいます)<br/>
point5なんか副作用が山盛りなコードになりますしね。</p>

<p>気を取り直して・・・。</p>

<ul>
<li>point6「ジェネリクスを使用しないコードは古い」(リストを型安全にできますよねー。キャスト地獄はヤダー)</li>
<li>point7「定数インターフェースは古い」(static importとか、定数の機能分割をやるでしょ)</li>
<li>point8「意味のない定数値は書かない」(enumにしろって話。これもC言語の定数定義の話と同じですね)</li>
<li>point9「finally句でcloseするのは古い定石」(java7以降だとそうですね。java6までだとこの定石を使いましょう)</li>
<li>point10「ジェネリクスで型を省略しないのは古い」(point6と矛盾してるような感じですが、こちらはjava7の話で俗にダイヤモンド演算子と呼ばれるもの)</li>
<li>point11「ファイルの読み込みには数行も使うな」(java7以降に限る話です。java6までは従来道理の読み込み処理を書きましょう)</li>
<li>point12「定番ライブラリはApacheCommonsだけではない」(それもそうだよねーって話。ジェネリクス非対応だったり、流れるようなインターフェースもなかったりだし)</li>
<li>point13「Listからある条件に一致した要素を取り出す際、for文を使うのは古い」(filterメソッドを使ったらいいよってこと。因みにGroovy使えって言ったらダメ？)</li>
</ul>


<p>point9で言ってるjava7での新しい定石「close句の省略」</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try ( FileReader in = new FileReader("hoge.txt");
</span><span class='line'>    BufferdReader br = new BufferedReader(in);{
</span><span class='line'>    // 詳細な処理
</span><span class='line'>}catch(Exception e){
</span><span class='line'>    // 例外処理
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>point10のダイヤモンド演算子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>List&lt;String&gt; list = new ArrayList&lt;&gt;();</span></code></pre></td></tr></table></div></figure>


<p>point11のファイル読み込み処理(Filesクラスが便利になった)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Files.readAllLines("hoge.txt",Charset.defaultCharset());</span></code></pre></td></tr></table></div></figure>


<p>因みに、従来の長い処理(途中の前後を省略)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BufferdReader br = new BufferedReader(in);
</span><span class='line'>String line;
</span><span class='line'>while((line = br.readLine()) == null){
</span><span class='line'>    // 読み込んだときの処理
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>javascript編</h3>

<hr />

<p>思うところというよりも・・・<br/>
HTML5といいJQuery,CoffieScript,Dart等、言語の発展が最近めざましいと個人的に思ってます。<br/>
そのため、感想というよりもこうするのが最近のトレンドだよねーみたいな感じでした。</p>

<ul>
<li>point1「HTMLのform要素に処理を埋め込むのは古い」(特殊な事をしなければ、HTML5で事足りることが増えてきたと思う)</li>
<li>point2「ロールオーバにa要素を使っているのは古い」(ブラウザのサポートに依るのは？と思った。SE/SIerなところだと未だにIE6でみたいなことがまかり通るし、一概に古いと断言するのはどうかと思った。)</li>
<li>point3「JavaSriptライブラリを使わないのは時代遅れ」(これはそうかなーと思う。実際にjQueryは使いますし。)</li>
<li>point4「jQueryを使わないコードは古い」(古いと断言するのは、どうかと思うが使うほうが楽できる。コラムにあったけど万能ではないね。特にIEが絡むとなると途端に辛くなる)</li>
<li>point5「HTML5のAPIを使わないと時代遅れ」(新規に書く場合ならHTML5を使っていき、補助(Flashがやってたとことか)でJSを使うのがいいのかなーと思う)</li>
<li>point6「多言語の助けを借りる」(DartとかTypeScriptかな。得手不得手があるので適材適所で使えばいいと思う。jsとかで書きづらいところはサーバサイドJavaとかでやってもいいわけだしね)</li>
</ul>


<h3>C#編</h3>

<hr />

<p>自分が、C#を現在進行形で勉強中なので、感想が出てくるより先にこう書けばいいのかー。<br/>
なんてことを思いました。<br/>
サンプルのあるのが全てではないよ～的な感じですね。</p>

<h3>Ruby編</h3>

<hr />

<p>これは、好きな言語</p>

<ul>
<li>point1「大量の引数が必要な際ハッシュオブジェクトを利用するのは古い」(このテクニック自体は好きだけど、ハッシュキーが無かったら大惨事になることがありますね)</li>
<li>point2「配列のグループ分けを長々と書くのは古い」(1.8系に限らず、1.9系でも思わずやってしまいそうな処理がコード例だった。chunkメソッドで配列のグループ分けができるのか)</li>
<li>point3「配列からランダムに値を抽出する際delete_atメソッドは古い」(samplingって意味から作ったっぽいsampleメソッドを使用すればランダムに値を抽出できる)</li>
<li>point4「テストフレームワークは１つと考えるのは古い」(要するに適材適所。RSpecとTestUnitの両方を併用(てテスト範囲なり、記述方法なり、assertなり)してテストをすればいいと個人的に思ってる)</li>
<li>point5「execコマンドでjavaのクラスを読み込むのは古い」(一々、外出しにしたjavaを読み込む何かの実行ファイルを作成する必要はなく、JRubyを使えばいいよって話。割りと普通かと思ってた)</li>
</ul>


<p>point1はRuby2.0で導入されたキーワード引数でデフォルト値を設定すればいいですね。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def keyword(hoge:0,fuga:"fugafuga")
</span><span class='line'>    puts #{hoge}
</span><span class='line'>    puts #{fuga}
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>keyword hoge:10 fuga:"hogehoge"</span></code></pre></td></tr></table></div></figure>


<p>point2の配列のグループ分け(偶数のものと奇数のもを分ける)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1,2,4,7,9].chunk{|a| a.even?}.each{|k,v| puts "#{k} #{v}"}</span></code></pre></td></tr></table></div></figure>


<p>point3の配列からランダムに値を抽出する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1,2,4,7,9].sample(2) #-&gt; [4,9]</span></code></pre></td></tr></table></div></figure>


<p>point5のJRubyで実行する話(Jythonとかも似たような感じですね)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'java'
</span><span class='line'>import 'java.lang.System'
</span><span class='line'>
</span><span class='line'>puts "hogehoge"
</span><span class='line'>System.out.println("fugafuga");
</span></code></pre></td></tr></table></div></figure>


<p>特集を読んだ感想は以上かなー。
なんとなく、書籍のサンプルがアレな時があるって感じじゃねーの？みたいな感想でごめんなさい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependency Injectionについて]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/06/10/dependency-injection/"/>
    <updated>2013-06-10T19:28:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/06/10/dependency-injection</id>
    <content type="html"><![CDATA[<p>DI(Dependency Injection)について、あるところで聞かれたので回答したときのメモでも残します。</p>

<p>簡単に言うと、よく言われる「依存性の注入」といいます。</p>

<p>が、なんのことかさっぱりわからないですね。
少し言い換えてあげると</p>

<h6>「依存性をモジュールもしくはクラス内部に抱え込まずに外部から依存内容を設定してあげる」</h6>

<p>となります。</p>

<p>擬似コードを出すとDI前にこんなコードとすると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public Hoge(){
</span><span class='line'>    this.fuga = new Fuga("hogefuga");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>DI後の擬似コードはこんな感じ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public Hoge(Fuga fuga){
</span><span class='line'>    this.fuga = fuga;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>コンストラクタの引数Fugaを差し替えるだけで容易に設定内容を変更できます。<br/>
依存前のコードだと、依存性はFugaコンストラクタの中にありますが、依存後のコードは依存性は外部にあります。(引数の内容次第)<br/>
このFugaのコンストラクタがリソースに関わる何かだとDI前のコードであればユニットテストが大変になりますね。<br/>
しかし、DI後のコードであれば引数を差し替えるだけでユニットテストができるようになります。</p>

<p>なので、DIをするメリットというと(個人的に)以下が挙げられます。</p>

<ul>
<li>依存しているものが外部にあるので、ユニットテストで差し替えが簡単にできる(外部からモックにしやすい)</li>
<li>IFさえ同じものであれば、別の実装を行ったものを設定として渡してやることができる(柔軟性)</li>
</ul>


<p>面倒になるのは、事前準備ですがメリットのほうが大きいと個人的には思ってます。<br/>
面倒な事前処理(主にコンストラクタ生成ですが)をやってくれるのがDIコンテナですね。</p>

<p>よく使うDIコンテナだと、有名なjavaのコンテナはこんなところですかね。</p>

<ul>
<li>GoogleGuice</li>
<li>Seaser2</li>
<li>SpringFramework</li>
</ul>


<p>自分が使うときの基準だと、以下になりますね。</p>

<ul>
<li>Seaser2なプロダクト(SAStrutsとか)を使っている、もしくは使う場合は、「Seaser2」のDIコンテナ</li>
<li>Spring関係の何かを使っている、もしくは使う場合は、「SpringFramework」のDIコンテナ(尤も殆ど使ったことないです)</li>
<li>それ以外の場合なら、大体「GoogleGuice」(どこかに事例とかあればいいですし、大体がWicketとかで使います)</li>
</ul>


<p>AndroidにもDIコンテナ(RoboguiceやDagger)あるのですが、殆ど使いませんね。<br/>
使い勝手が悪かったり、ドキュメントがなかったりなので・・・</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubymineを使ってみる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/06/08/use-rubymine/"/>
    <updated>2013-06-08T17:26:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/06/08/use-rubymine</id>
    <content type="html"><![CDATA[<p>皆さんはRubyやRailsでアプリを書くときどのようなエディタを使いますでしょうか？</p>

<h6>僕は、Emacsで書いていることが多いです。。。</h6>

<p>多いのですが・・・<br/>
こんな感じで若干面倒な面もあってですね。</p>

<ul>
<li>設定がともかく面倒くさい・・・。</li>
<li>色々設定を追加しているので、重くなってきた(僕の設定が悪いのかもしれませんが・・・)</li>
<li>補完周りも効くのか効かないのか微妙な時も(僕の設定が悪いry)</li>
<li>オムニ補完が・・・効きすぎてお節介すぎる(僕の設定がry)</li>
<li>その他色々。。。</li>
</ul>


<p>良い面もありまして、僕が思う良い面はこんな感じ。</p>

<ul>
<li>キーバインドがカスタムできるよ</li>
<li>画面が分割できるので、TDDにも向いてるよ</li>
<li>オムニ補完が良い感じに効いたときは、さくさくコードが書ける</li>
<li>タブやフォーマットとか「{ }」の自動補完とかきっちりやってくれる</li>
<li>あとは、タグを使ってソースからソースへのコードジャンプができる</li>
</ul>


<p>殆ど、Emacsの機能ですねw</p>

<p>で、面倒くさい面もあるのでRuby開発に限ってはEmacsを卒業してもいいのではないかと最近思うようになりました。</p>

<p>なので、Rubyをスムーズに開発できるエディタってなんだろうとか気になりだした訳です。<br/>
エディタとして候補が挙げれたものは・・・</p>

<ul>
<li>Vim</li>
<li>Text Mate</li>
<li>Sublime text2</li>
<li>Coda</li>
<li>Aptana Studio(Eclipse)</li>
<li>RubyMine</li>
</ul>


<p>自分が観測できた範囲だとこんだけ。</p>

<p>色々ありますね。とりかえず今回はRubyMineを使ってみます。</p>

<h6>Rails コマンド</h6>

<p>「$rails migration」とか実行する場合、「Ctrl + Option + G」<br/>
よく使いそうなものは大体実行できます。<br/>
主に以下のようなことができる。(ここでは一部のみ記載)</p>

<ul>
<li>scaffold</li>
<li>migration</li>
<li>helper</li>
<li>controller</li>
<li>その他色々</li>
</ul>


<h6>Rails Server</h6>

<p>サーバを起動する場合、「Option + Shift + F10」<br/>
デバッグ実行やプロダクション起動、リリース</p>

<h6>リファクタリング</h6>

<p>変更箇所をカーソルで選択後「Shift + F6」<br/>
プレビューが表示されるので、「Do Refactor」を実行しましょう。<br/>
いちいち、「Do Refactor」ボタンを押さないといけないところに操作性のムカツキを感じる。</p>

<h6>その他</h6>

<p>エディタ自身の設定でデフォルトで有効になっている「フリーカーソール」をOFFにしたい。(余白をクリックすると、行の末尾にいかない)<br/>
設定項目のエディタ設定で、「Vertual Space」を見つけます。</p>

<h6>「Allow Placement of caret after the end of line」のチェックボックスを外します。</h6>

<p>そうすると、余白をクリックしても行の末尾にいくようになります</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vi(Vim) on Emacsを思いつきでやってみた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/06/07/vi-on-emacs/"/>
    <updated>2013-06-07T11:57:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/06/07/vi-on-emacs</id>
    <content type="html"><![CDATA[<p>ただのネタカテゴリですwww</p>

<p>昨夜、盛大に悪酔いしましてその時思いつきました。</p>

<p>手順とか見れば、誰でも思いつくでしょう。</p>

<p>という訳で以下に起動手順と感想を書いてみました。</p>

<h3>Vi(Vim) on Emacsの手順</h3>

<hr />

<ol>
<li>ターミナルを起動します。</li>
<li>おもむろにemacsとタイプしてEnterを押します。</li>
<li>M-x shellを実行し、shellモードを起動します。</li>
<li>shellモードで入力受付状態になりますので、おもむろに「vi」もしくは「vim」とタイプしてEnterを押します。</li>
</ol>


<p>あら不思議、Emacs上でVi(もしくはVim)が起動しましたよっと。</p>

<h3>Vi(Vim) on Emacs使った感想</h3>

<hr />

<p>やめておけの一言!!
ざっと、使用してみた感覚だとこんな感じ。</p>

<ul>
<li>Escを押したのか押してないのか判断がつけられない</li>
<li>モード切り替えの挙動が怪しい</li>
<li>環境かもしれないけど、Macだとスクリーン表示がおかしい</li>
</ul>


<p>ネタとしてはありですが、実用にはとても耐えられるものではないのでやめましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初海外がGoogleI/Oだったので、準備とか苦労したことのメモ]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/05/31/oversea-travel/"/>
    <updated>2013-05-31T06:59:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/05/31/oversea-travel</id>
    <content type="html"><![CDATA[<p>GoogleI/O2013に行ってました。</p>

<p>初海外の人が如何にして海外に行ってきたかを記録します。</p>

<h3>前提</h3>

<hr />

<p>何はともあれGoogleI/Oのチケットを手に入れましょう。<br/>
話はそれからです。</p>

<h3>必要なもの</h3>

<hr />

<p>海外へ渡航するにあたって必要なものは以下のものでした。</p>

<ol>
<li>パスポート</li>
<li>ESTA</li>
<li>航空チケット(もしくは海外に行ける手段)</li>
<li>宿泊先の確保</li>
<li>旅行期間の調整(会社とか学校とか)</li>
<li>スーツケース</li>
<li>衣類など</li>
<li>印刷物一式</li>
<li>その他</li>
</ol>


<p>上から順番に解説します。</p>

<h5>パスポート</h5>

<p>これは当たり前なので、解説不要でしょう。<br/>
持ってなくても、チケット購入から開催日まで一ヶ月以上日数があるので<br/>
チケット購入してからすぐに申請すれば十分間に合います。(パスポートの受け取りも含めて)<br/>
戸籍抄本とか必要なので、このあたりの準備がネックでしょうか。</p>

<h5>ESTA</h5>

<p>アメリカ旅行では必要です。<br/>
ネットから申請できるので、実施しましょう。<br/>
お金がかかるのとパスポート番号の入力があるので気をつけましょう。<br/>
パスポート持ってない場合は、チケット購入後パスポートを直ぐに取得してればESTAの申請も間に合います。</p>

<h5>航空チケット</h5>

<p>ここはお任せで・・・。 <br/>
自分の失敗談は後述します。</p>

<h5>宿泊先の確保</h5>

<p>大体、こんなパターンになるのではないかと思います。</p>

<ul>
<li>エクスペディアで宿泊先を確保する</li>
<li>後述する情報交換で、相部屋募集にのっかる</li>
</ul>


<p>自分は、勝手がわからなかったので、相部屋募集にのっかりました。</p>

<p>宿泊先は、開催地に近いほうが何かと便利です。
エクスペディアで申し込むところは、KingGeorgeホテルがオススメだったりします。</p>

<h5>旅行期間の調整</h5>

<p>社会人だと当然だと思いますが、やりましょう。<br/>
宿泊期間に直結します。観光やMakerFairも参加となると長期になります。<br/>
できれば、調整は、チケット取る前がいいと思います。</p>

<h5>スーツケース</h5>

<p>大きいほうがよいと思います。<br/>
I/Oでお土産をいただきますので、お土産が入るぐらいのがベストですね。</p>

<h5>衣類など</h5>

<p>思ったほど要らないかも。<br/>
現地は、朝と晩は寒いので防寒対策にパーカーぐらいあったほうがいいかもしれないです。(寒いといっても気にならない程度かもしれないですけど)<br/>
というのも、I/OにチェックインしたときにTシャツ貰えたり、会場でTシャツ配ってたりしてるため。<br/>
自分は合計で13枚貰ってました(ぇ<br/>
実は現地にユニクロあるので、服の調達はそこでーみたいな人は殆ど要らないかも。</p>

<h5>印刷物一式</h5>

<p>あったほうがいいですね。<br/>
I/Oのチェックインはバーコード読み取り式なのですが、携帯からだと精度があまり良くないようです。<br/>
これはGoogleの中の人も話してました。(うまくいくことはうまくいくようですが・・・)<br/>
他にも空港のチケット発券や入出国で航空チケットや宿泊先など聞かれたりすることもあるので、印刷しておくとスムーズに事が進みます。</p>

<p>自分はこれだけ印刷して行きました。</p>

<ul>
<li>往復の航空チケット(支払い証明やフライト情報)</li>
<li>I/Oのチケット</li>
<li>ESTA</li>
<li>現地滞在先ホテル情報(入国時の申請書類に記入するため)</li>
<li>ちょっとしたメモ(空港案内や宿泊先までのルートなど)</li>
</ul>


<p>あとここには書いてませんが、ガイドブックもあるといいですね。<br/>
ほとんど不要だと思いますが、入国とか出国とかで提出する書類の記載方法が参考になります。</p>

<h5>その他</h5>

<p>通信事情ですが、auであればAT&amp;Tに自動(設定でデータローミングをオンにする必要はあります)で接続してくれます。<br/>
ドコモやSoftBankは知りません。<br/>
が、値段はお高いで１日いくらの料金なので５日もデータローミングで使用しまくると大変な金額になります。<br/>
現地で、simカードを購入することをオススメします。(T-mobileがオススメです)<br/>
T-mobileであれば、会場の近辺に店があります。(Powel Streetにありますね)<br/>
会場(モスコーン)はwifiを提供していますが、T-mobileだと殆ど繋がりません。(特に基調講演時は接続出来ませんでした)<br/>
基調講演以外では繋がってたような気がします。</p>

<p>飲料水事情ですが、かなり安い値段で水が売ってました。(1ドルしたかしなかったぐらい)<br/>
僕はトランクに1.5Lを詰めて持って行きましたが、８割ぐらいしか飲みませんでした。<br/>
持っていくにしても500ml２本ぐらいがベターじゃないかなー。</p>

<p>電源ケーブルですが、日本と同じ端子(２つ口)が使用できました。<br/>
が、電圧が少し高い(らしい)ので不安であれば変圧器(だったけ？)を持って行くといいかもしれないです。<br/>
旅行用に何か買うことは不要だと思います。</p>

<h3>情報交換</h3>

<hr />

<p>皆さんがよく使われるところで参加者どうし情報交換を行なっています。</p>

<ul>
<li>Twitter</li>
<li>Facebook(参加者用のグループとメッセージ)</li>
<li>Google+(参加者用のコミュニティ)</li>
</ul>


<p>参加権限とかなければ、Twitterとかで参加者を探せば入れてくれると思います。<br/>
# 自分は過去の参加者の招待でコミュニティに入れて頂きました。</p>

<h3>現地通貨はどうやってたのか</h3>

<hr />

<p>殆どがクレジットで支払っていました。<br/>
アメリカは、信用や支払い能力の世界なのでクレジットが有効です。<br/>
ドルで払うことはあるにありましたが、殆どがクレジットで支払っていました。</p>

<p>アメリカで使用できるクレジットの会社ですが、「VISA」、「American Express」が９割でした。<br/>
日本で使用できる「JCB」は殆ど使用出来ません。(自分はコレでやばいってなりました)</p>

<p>一応、紙幣でドル札も３万円用意していました。<br/>
高額紙幣は、現地で嫌われるため、最大で２０ドルで換金して行くとよいでしょう。<br/>
３万あれば、チップ等含めて０にすることが出来ました。</p>

<p>さて、チップの話ですが特に意識してチップに何か使うということはあんまりありませんでした。<br/>
お高いレストランに行ったときはサービス料として会計に含まれていました。<br/>
精々ベッドメイキングとその他ほそぼそぐらいでしたね。<br/>
大体、1ドル程度置いておけばいいでしょう。(ここらへんはその人やサービス内容によりけりです)
#ベッドメイキングは枕元に１ドル置いておきましょう。(どこに置けばいいだろうになりました)</p>

<h3>現地での言語とかコミュニケーションはどうしたか</h3>

<hr />

<p>現地は殆どで英語でしたが、特に困ることはありませんでした。<br/>
これは本当です。</p>

<p>英語を話す機会がある最初の関門は入国審査です。(飛行機は日本語話せるスタッフがいるので英語話せなくても困りません)<br/>
ここできっちり英語で会話できれば、入国してから特に困らないでしょう。<br/>
重要なことなので、もう一度言います。(一応、日本語で入国審査通ることもできるようですが、入国してからが困ります。)</p>

<h5>入国審査時に英語で会話して乗り切りましょう</h5>

<p>さて、入国してからですが・・・。<br/>
相手はしどろもどろの英語でもきっちり聞いてくれます。(相手によりけりかもしれませんが、基本的に聞いてくれます)<br/>
ここらへんは、日本でいうところの方言に近い感じなんですかね。<br/>
日本でも海外の方に道を尋ねられたりすると聞こうとするので、同じ感覚かもしれないですね。<br/>
多少訛っても気にならないような感じ。</p>

<h3>失敗したこと</h3>

<hr />

<p>ここからは自分の失敗談を記載します。</p>

<h6>航空チケット</h6>

<p>これは、往復で購入したほうがよいです。<br/>
料金が高くなってしまいます。(大体1.5倍くらいします)
内訳は以下のような感じです。</p>

<ul>
<li>NRT->SFO : 約23万</li>
<li>SFO->NRT : 約14万</li>
</ul>


<p>大体これぐらいしました。往復便で買えば、23万ぐらい(?)で済みます。<br/>
勿論、料金は航空会社や時期にもよりますがI/Oの時期だとこれぐらいですね。<br/>
日本は航空便が高いですね。</p>

<p>但し、片道で行くメリットもありまして・・・</p>

<ul>
<li>航路を自分で選択できるので、面倒な乗り換えの手間がなくなる</li>
<li>乗りたい飛行機の航空会社を選択できる</li>
<li>経由することで、旅行気分を変えることができる</li>
</ul>


<p>自分は、乗り換えの手間を極力省きたかっただけですね・・・。<br/>
初海外で、飛行機の乗り換えや経由は厳しいと思ったので。</p>

<h6>手荷物</h6>

<p>これは、失敗と言うよりもI/Oだから不要といったものでしょうか。<br/>
手荷物で以下のものを持っていました。</p>

<ul>
<li>iPad mini</li>
<li>iPhone4S(sim free)</li>
<li>iPhone5(国内版)</li>
<li>Nexus7</li>
<li>MacBookPro</li>
<li>モバイルブースター</li>
<li>Walkman</li>
<li>Shure SE530(遮音性高いので飛行機とか耳栓代わりになる)</li>
</ul>


<p>こんだけ持ってましたが、使用しないものが大半でした。<br/>
不要なものを列挙すると・・・</p>

<ul>
<li>iPad mini(飛行機の中で使用してればよいと思っていた)</li>
<li>Nexus7(飛行機の中で使用してればよいと思っていた)</li>
<li>MacBookPro(盗難にあうと不味いので常時持っていたのですが、兎に角重い)</li>
<li>Walkman(飛行機や海外で使用した記憶無し)</li>
</ul>


<p>ぐらいでしょうか。自分の場合、２台あるiPhoneはどちらも必要でした。</p>

<p>逆に持って行ったほうがよかったものを列挙します。</p>

<ul>
<li>デジカメ(当たり前ですが撮影機会は非常に多いです)</li>
<li>Android端末(sim freeかつNexusとかXperiaとかの著名な端末)</li>
<li>MacBookAir(常時持ち運びするなら軽いほうがいいですね)</li>
</ul>


<p>なので、こんなところにしておけばよかったとおもいます。</p>

<ul>
<li>MacBookAir</li>
<li>デジカメ</li>
<li>Android端末</li>
<li>iPhone</li>
<li>モバイルブースター</li>
<li>Shure SE530</li>
</ul>


<h6>金銭周り</h6>

<p>事前に調べてなかったのが悪かったのですが、クレジットで「JCB」が使用できなかったことです。<br/>
手持ちの「VISA」カードの利用残高が殆どなくってかなりキツかったです。(3万少々ぐらいだったはず)<br/>
航空チケットに「VISA」カードを使用したのが失敗でした(支払い期日がちょうど５月末だったので利用残高が増やせなかった)<br/>
カード会社によりますが、事前に申請することで海外用に利用残高を一時的に増やすことができます。<br/>
本当に事前にやりましょう。現地でやっても増額申請が降りませんでした。(２日以上かかるようでした)</p>

<p>あと、ベッドメイキング毎にチップを置きましょう・・・。
忘れていました。</p>

<h5>次回(あれば)この失敗は繰り返さないようにする。</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ IDEAで/usrディレクトリ配下のものが選択できなかった]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/05/29/intellij-select/"/>
    <updated>2013-05-29T00:32:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/05/29/intellij-select</id>
    <content type="html"><![CDATA[<p>そんなことがあったのでメモしておく。</p>

<h3>どういうことかと</h3>

<hr />

<p>ProjectStructureでSDKとか設定する訳なのだが・・・<br/>
これ、MacだとSDKの場所をGUIで選べって方式なんですよね。</p>

<p>それはそれで便利だし楽でいいんだけども</p>

<h4>/usr/ディレクトリ配下にあるものは選択できない!!</h4>

<p>( ﾟдﾟ)</p>

<p>Macの隠しディレクトリを表示する以下のコマンドを実行しても選択することが出来なかった。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$defaults write com.apple.finder AppleShowAllFiles -boolean true
</span><span class='line'>$killall</span></code></pre></td></tr></table></div></figure>


<h3>結局どうしたか</h3>

<hr />

<p>ものすごく力技ですが・・・</p>

<h4>ホームディレクトリから/usr/ディレクトリまでシンボリックリンク張っちゃいました</h4>

<p>とりあえずこの方法で解決しました。<br/>
あんまりよくないというのは理解していますが、しょうもないことに時間取られるのも嫌だったのでこうしました。<br/>
うまい解決方法あったら教えて下さい。</p>

<h3>正直なところ</h3>

<hr />

<p>そんなところにファイル置いてるほうが悪いのでは？と言われるかもしれないですが、SDKとかって「/usr/local」の下に入れたくなるじゃないですか。<br/>
特にLinuxとか弄ってると</p>

<p>ぶっちゃけ、IDEAが悪いわけではきっとないと思っているし、ステマでもなんでもないです。</p>

<p>本当だよ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitを教えたときの話]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/05/28/git-talk/"/>
    <updated>2013-05-28T20:33:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/05/28/git-talk</id>
    <content type="html"><![CDATA[<h3>前置き</h3>

<hr />

<p>事の発端はある人と作業してたことから始まりました。。。<br/>
というのも、自分が海外に行ってるいる間、作業をお願いしていました。</p>

<p>作業をお願いしていたのはいいのですが<br/>
彼は普段使っていないGitを使ってみたかったようです。</p>

<p>今回は、そのとき伝えたことをネタにします。<br/>
もっとネタにするものはありますが(ぉぃ</p>

<h3>基本操作以外に覚えて欲しいと伝えたこと</h3>

<hr />

<ul>
<li>GitのGUIツールを捨てろ(言い過ぎだと思うし、賛否両論あると思っている)</li>
<li>状態は常に確認するようにしよう</li>
<li>ファイルを編集前状態に戻すやり方</li>
<li>マージやリベースで、ファイル競合状態になったときの対処(エラーログとか読んでみる)</li>
<li>ヘッド位置の意識</li>
<li>ヘッドの操作方法やヘッドの位置がどこにあるのか</li>
<li>落ち着いてブランチを切って、Git操作を試してみる(カジュアルに作れるので、作ったブランチで操作を試してみる)</li>
<li>masterでのファイル編集をやめる</li>
</ul>


<p>コミットの取り消しや歴史の改変とかも覚えてて貰いたいけどな</p>

<p>教えたはいいけど、自分もまだまだ使いこなせてないのでは？と思ったりしてます。</p>

<h3>伝えた元に戻す系のコマンド類</h3>

<hr />

<p>元に戻し方とかそんな感じのことを以下にメモレベルで記載</p>

<p>ファイルをインデックス(元々のヘッド状態)の状態に戻す</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git checkout -- &lt;元に戻したいファイル&gt;</span></code></pre></td></tr></table></div></figure>


<p>ワークツリーとインデックスをコミットIDに指定した状態に戻す</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git reset --hard &lt;コミットID&gt;</span></code></pre></td></tr></table></div></figure>


<p>現在のコミットからブランチを作成する<br/>
作業はここでしちゃいましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git checkout -b &lt;ブランチ名&gt;</span></code></pre></td></tr></table></div></figure>


<p>リベースでおかしなこと(ファイルの競合とか)が起きた時に元に戻す</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git rebase --abort</span></code></pre></td></tr></table></div></figure>


<p>ここに書いた以外のやり方なんていくらでもあるので、参考程度で。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux上にあるユーザーアカウントの追加と削除をする]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/24/linux-user-add/"/>
    <updated>2013-04-24T23:40:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/24/linux-user-add</id>
    <content type="html"><![CDATA[<p>すごくド基礎なのですが・・・。<br/>
ユーザーアカウント削除ってどうやるんだっけな？ってなったのでついでにメモしておく。</p>

<h3>ユーザーアカウントの追加</h3>

<hr />

<p>基本中の基本ですね。<br/>
以下のコマンドのような感じで追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$useradd -u 500 -g wheel -m kurobara</span></code></pre></td></tr></table></div></figure>


<p>以下の表によく使用するオプションを記載します。</p>

<table>
<thead>
<tr>
<th align="left">オプション</th>
<th align="left">意味</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">c コメント      </td>
<td align="left">ユーザーのコメントを設定</td>
</tr>
<tr>
<td align="left">d ディレクトリ  </td>
<td align="left">ユーザーのログインディレクトリを指定</td>
</tr>
<tr>
<td align="left">e mm/dd/yy </td>
<td align="left">ユーザーの有効期限をmm/dd/yy形式で指定</td>
</tr>
<tr>
<td align="left">g グループ   </td>
<td align="left">ユーザーの所属するイニシャル・グループを指定</td>
</tr>
<tr>
<td align="left">G グループ    </td>
<td align="left">ユーザーの所属するグループを指定します(「,」で複数指定可能)</td>
</tr>
<tr>
<td align="left">u ユーザーID </td>
<td align="left">ユーザーのユーザーIDを指定</td>
</tr>
<tr>
<td align="left">s シェル </td>
<td align="left">ユーザーのログインシェルを指定</td>
</tr>
<tr>
<td align="left">m        </td>
<td align="left">ホームディレクトリの作成を自動で行う</td>
</tr>
</tbody>
</table>


<h3>ユーザーアカウントの削除</h3>

<hr />

<p>以下のコマンドでユーザーアカウントの削除ができます。<br/>
なお、オプションにrを付与すると、ホームディレクトリまで削除してくれます。<br/>
但し、他のファイルシステムにあるファイル等は探しだして手動で削除する必要があります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$userdel &lt;ユーザーアカウント名&gt;</span></code></pre></td></tr></table></div></figure>


<p>常識ですね(ぉぃ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コマンドで暗号化Zipファイルを作成する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/22/zip-pass/"/>
    <updated>2013-04-22T23:48:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/22/zip-pass</id>
    <content type="html"><![CDATA[<h3>暗号化Zipファイル作成</h3>

<hr />

<p>大概GUIありのツールでやってしまうのですが、必要に駆られたのでコマンドでやることになりました。<br/>
以下のようにzipコマンドのeオプションを使うだけで簡単にできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$zip -e &lt;zipファイル名&gt; &lt;圧縮対象のファイル&gt;</span></code></pre></td></tr></table></div></figure>


<p>恥ずかしながらあんまりやらないので、いざというときには忘れてしまいます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EmacsのScratchバッファに設定を追加してみた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/14/emacs-scratch-setting/"/>
    <updated>2013-04-14T22:06:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/14/emacs-scratch-setting</id>
    <content type="html"><![CDATA[<p>Emacsのscratchバッファってすごく便利ですよね。</p>

<p>特に以下のことによく使います。</p>

<ul>
<li>ちょっとしたメモしたり</li>
<li>URLメモを取ったり</li>
<li>ちょっとした引用メモの整形とか</li>
<li>マクロの実験とか</li>
</ul>


<p>まぁよく使うわけです・・・
が、ついうっかりでEmacsを終了したりとか、Emacs本体がゾンビプロセスになったりとかでロストしてしまうことがあります。<br/>
自分はこれでよく泣きました(> &lt;;)</p>

<p>また、メモを保存しておこうと思った時にバッファの先頭にある初期メッセージが鬱陶しくなってきます。</p>

<p>今回は、これらの問題を解決してしまいます。</p>

<p>まずは、scratchの初期メッセージ消去します。<br/>
以下の内容を「.emacs/init.el」に追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq initial-scratch-message "")</span></code></pre></td></tr></table></div></figure>


<p>この設定を加えて、Emacsを再起動するとscratchバッファの初期メッセージがなくなります。
即座に反映したければ、評価してもいいとおもいます。</p>

<p>次に、Emacsが終了してしまったときにScratchバッファの保存と再起動時にScratchバッファの内容を復元する方法ですが・・・</p>

<p>以下の内容を「.emacs/init.el」に追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defun save-scratch-data ()
</span><span class='line'>  (let ((str (progn
</span><span class='line'>               (set-buffer (get-buffer "*scratch*"))
</span><span class='line'>               (buffer-substring-no-properties
</span><span class='line'>                (point-min) (point-max))))
</span><span class='line'>        (file "~/.emacs.d/backups/.scratch"))
</span><span class='line'>    (if (get-file-buffer (expand-file-name file))
</span><span class='line'>        (setq buf (get-file-buffer (expand-file-name file)))
</span><span class='line'>      (setq buf (find-file-noselect file)))
</span><span class='line'>    (set-buffer buf)
</span><span class='line'>    (erase-buffer)
</span><span class='line'>    (insert str)
</span><span class='line'>    (save-buffer)
</span><span class='line'>    (kill-buffer buf)))
</span><span class='line'>
</span><span class='line'>(defadvice save-buffers-kill-emacs
</span><span class='line'>  (before save-scratch-buffer activate)
</span><span class='line'>  (save-scratch-data))
</span><span class='line'>
</span><span class='line'>(defun read-scratch-data ()
</span><span class='line'>  (let ((file "~/.emacs.d/backups/.scratch"))
</span><span class='line'>    (when (file-exists-p file)
</span><span class='line'>      (set-buffer (get-buffer "*scratch*"))
</span><span class='line'>      (erase-buffer)
</span><span class='line'>      (insert-file-contents file))
</span><span class='line'>    ))
</span><span class='line'>
</span><span class='line'>(read-scratch-data)</span></code></pre></td></tr></table></div></figure>


<p>上のEmacsLispが何をやっているかと言うと・・・<br/>
終了時にScratchの内容をファイルに書き込み、起動時に書き出したScratchバッファの内容を読み込みしているだけです。</p>

<p>これで、Scratchバッファをちょっとしたメモ帳として大いに活用できますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Conference 2013 springに行って来ました。 #GoCon]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/13/gocon-spring/"/>
    <updated>2013-04-13T10:02:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/13/gocon-spring</id>
    <content type="html"><![CDATA[<p>午前中と午後はモクモクとコード書いてました。。。<br/>
XML周りの処理とかちょっとしたい感じだったので書いてみました。</p>

<p>「XMLの構造が分かっていたら、 Unmarshal関数を使ったほうがいいね。」</p>

<p>というのが感想です。<br/>
真面目にDOMを用意してみるとかなりコード書かないといけないので辛い感じ。<br/>
個人的には、XMLをDOMで操作するならRubyを使います(ぉぃ</p>

<p>動作速度まで測ってませんが、多分Goのほうが圧倒的速度で処理してくれるでしょう・・・。<br/>
機会があればやってみます。</p>

<p>以下、セッションメモ</p>

<h3>Goでの思考方法</h3>

<hr />

<p>class = type
object = value
method attache any type
interface はmethod(?)</p>

<p># 途中から何かしてたので聞き逃した。
# 何処かにスライド上がってないだろうか？</p>

<h3>Go言語で作るWebアプリ</h3>

<hr />

<p>Webサーバ作るときは、以下のやり方が基本</p>

<ul>
<li>http.Serverに渡して、http.Handlerで処理する</li>
<li>ListenAndServerで起動する</li>
<li>複数のハンドラを設定できる(http.serverMux型)</li>
<li>ハンドラを実装するのは大変なのでhttp.HandlerFuncを使う</li>
<li>serverMuxを作るのがめんどいなら、DefaultServerMuxというグローバル変数を使うといい</li>
<li>静的なhtmlを表示する場合は、http.FileServerを指定してやればいい</li>
</ul>


<p>Restful APIを作る</p>

<ul>
<li>GoWebを使えば、楽にできる</li>
<li>リクエストの受け取りやレスポンスをxmlやjsonで返せる</li>
<li>ルーティング管理ができる</li>
<li>Controllerを作るだけでいい</li>
<li>インタフェースを実装すればよい感じ</li>
</ul>


<p>テストパッケージやnginxと連携とかテンプレートエンジンとかあるので話したかった・・・</p>

<h3>GAE/Goの話</h3>

<hr />

<ul>
<li>main関数はAppEngineのRuntimeがやるので、実装しなくてもよい</li>
<li>構造体にデータ(kind)を作ってしまう</li>
<li>keyを作成する(AppEngineユーザーにはお馴染みの処理)</li>
<li>それからデータストアにputする</li>
<li>SDKはPythonが起動→Goで書いたアプリ起動の流れ</li>
<li>PythonとGoが連動してるのでGo単体のテストは辛い</li>
<li>AppEngineとGoは安心して使いづらい(単体テストが厳しいため)</li>
<li>Spin-Upは相当早い(Python 約386ms,Go 約48ms)</li>
<li>使用メモリは、Pythonに比べて少ない</li>
<li>Spin-Upと省メモリなので、Goは優位かも</li>
<li>I/O待ちがあるので、常にGoが早いと言えない</li>
<li>最初からAppEngineに入る場合には選択肢に入るかも</li>
<li>無理に既存のものを載せかる必要性はない</li>
<li>Pythonでメイン処理を書いて、GoをBackground処理にするという方法もアリ</li>
</ul>


<p># AppEngineで動かしてるオレオレのサービスの追加機能はGoで実装してみようかなぁ</p>

<h3>GoRoutine&amp;Channelでの並行処理</h3>

<hr />

<ul>
<li>並行処理のアプローチは「メモリのシェア」、「メッセージパッシング」の２つが大体使われる</li>
<li>GoはCSPとパイ計算がベースになっている</li>
<li>slectとclosureも並行処理で使える</li>
<li>ユーザーランドだと関数のまえにgoをつけると、goroutineが実行できる</li>
<li>gotoutineの終了は、処理が最後まで行った時、return文やgo_exitでできる</li>
<li>channelでgoroutine同士でメッセージできる</li>
<li>メッセージのバッファサイズも決めれる</li>
<li>goroutineを複数やる場合、waitegroupを使えばいい</li>
<li>Worker</li>
<li>Selectは読み出しがブロックするのを待っている</li>
<li>channelにはバッファ機能があり、バッファサイズ以上を書き込もうとするとブロックする(セマフォっぽいイメージ)</li>
<li>Goroutineでcoroutineっぽいものもできる</li>
<li>複数コアを使う場合、自分で明示的にコア設定してやる必要がある</li>
<li>netchanが昔はあったが、今はdeprecatedになっている。(I/Fが複雑になりすぎたかららしい。ノウハウ貯まれば復活するかも)</li>
</ul>


<p>\ # channelのcloseはレシーバ側で行うっぽい？</p>

<h3>goroutineのスケジューラの話</h3>

<hr />

<ul>
<li>スタックコントローラーやプロセスコントローラーで実行されてる</li>
<li>上を実現するため、Goは一部’アセンブラで書かれている</li>
<li>スケジューラ:G(goroutine),M(ワーカースレッド、マシン),P(プロセス。MAXPROCSに指定できる最大値はこいつ)</li>
<li>GOMAXPROCSは、スレッド数と同じではない(異なることもある)</li>
<li><a href="https://gist.github.com/methane/5377227">スケジューラを解析していた方のメモ</a>に詳しく流れが記載されています</li>
<li>go buildにsオプションをつけるとどんなランタイム呼ばれてるのかわかるようになる</li>
</ul>


<h3>Goのよいところ</h3>

<hr />

<p>最初の気に入らないところ</p>

<ul>
<li>第一印象、人形もコードもキモい！！違和感があった</li>
<li>似てるようで違うところが多くてキモい(C++/Java/Pythonと比較して)</li>
</ul>


<p>良かったところ</p>

<ul>
<li>読みやすい</li>
<li>シンプルな仕様(最近の言語は、便利機能多いけど複雑すぎる)</li>
</ul>


<p>Goを書き慣れてくると・・・<br/>
印象が変わる!!</p>

<ul>
<li>他の言語の複雑な型宣言にムカつく(複雑になってくるとGoのほうが有利)</li>
<li>ダックタイピングも複雑になってくると、動くことはわかるけどコードを読むときによく分からなくなる(Goだとinteeface型を作ればややこしくなくなる)</li>
<li>オブジェクト指向もGoのほうが便利(PythonもJavaもクラス設計をしっかりしないといけない)</li>
<li>スコープも調べるのが大変だし、アクセスしたいものもアクセスできないとかある(Goは大文字だとpublicそれ以外はpackage private)</li>
<li>未使用なコードもGoだとビルド時に検出してくれる(dependencyを残すと大規模開発になるとメンテが大変になる。どうしてものこしたければ「_」をつける)</li>
<li>エラー処理は、javaとかpythonはExceptionにしたがる(変なGoToしてるだけ、それは多値返せば、処理の流れは破綻しないでしょ)</li>
<li>panicは本当にどうしようもないときにだけ使用する。普通はエラーできっちり返してあげる設計にするべき</li>
<li>Goで解決したいものの多くは、サーバとかのインフラの並列処理</li>
</ul>


<p># 話聞いてると頷ける話で、確かに個人的にJavaはうざいと思うのは事実・・・
# 個人的にAPIのサンプルがドキュメントに載ってたらいいなぁなんて思いました。。。</p>

<h3>goでゲームを作る</h3>

<hr />

<ul>
<li>画面、音、入力のライブラリがある</li>
<li>なんか似たようなもので複数あるっぽい(描画だけでもGoGLとかglとか)</li>
<li>GoGL,go-flwでできる</li>
</ul>


<p>大まかな流れ</p>

<p>1 初期化で、キー入力とウィンドウ処理をしてやる(main関数ではこれだけにする)
2 初期化のタイミングでウィンドウの設定をしてやる
3 初期化以降はメインループを実行する
4 ゲームのランを行う(ウィンドウが開いてる間実行するように実装する)
5 フレームに対して描画を行う
6 ゲームを実装してる本体でキーボードとかの入力を受け取るようにする
7 描画メソッドではひたすら描画の実装をしてやる</p>

<h3>A Case Study</h3>

<hr />

<ul>
<li>Rubyにはいいところもあるが良くないところもある</li>
<li>CloudFundryでEventMachineをRubyでやっていた</li>
<li>Rubyは特に好きだ</li>
</ul>


<p>設立したベンチャー企業では
+ 複数のOSサポート
+ システムのスケールもさせたい
+ そのためGo vs Node.jsになった</p>

<p>Node.js</p>

<ul>
<li>v8ランタイム</li>
<li>イベント駆動</li>
<li>JSベース</li>
<li>ランタイム依存</li>
<li>JSベースなので(コールバック地獄)</li>
<li>実験的な機能が・・・</li>
</ul>


<p>Go</p>

<ul>
<li>設計メンバーが良かった</li>
<li>同期モデル</li>
<li>プラットフォームのサポートがよかった</li>
<li>新しい言語</li>
<li>標準ライブラリはどう使えば？</li>
<li>GCやスケジューラが隠れている</li>
</ul>


<p>いいところが多いので15分でGoを採用することになった(チームで決めた)</p>

<ul>
<li>学習が簡単だった</li>
<li>標準でライブラリが揃っている</li>
<li>なぜGoなのか(聞き取れなかった)</li>
<li>GoのGCはスタックベースなので良かった。</li>
<li>暗号化通信はOpenSSLのラッパーを用意した(パフォーマンスの問題？)</li>
<li>文字列とバイト配列の変換</li>
<li>SQLは低レベルすぎて辛いのでORMとドライバーは自前で用意した</li>
<li>mapも遅い。多分1.1で治るはず・・・</li>
<li>いけてない面もまだまだあるけど、Goを選択したのはよかった</li>
<li>GoはIaaSやPaaSで主役になれる!!</li>
</ul>


<p>まとめ</p>

<ul>
<li>GoはGoogleが採用しているだけあってシステム書くには向いている</li>
<li>Goは標準ライブラリが揃っている</li>
<li>テストやドキュメントもビルトインである</li>
<li>学習も楽にできる</li>
<li>GCもStackベースなので遅延が起きることは少ない</li>
<li>いくつかの問題は1.1で解決されることに期待!!</li>
</ul>


<p># 最後のセッションのこいつはうろ覚え(聞き取りながらで辛かった)</p>

<h3>感想</h3>

<hr />

<p>Goに関してのいいところや悪いところを吸収できたかなーと思う。<br/>
密度が濃い一日だったと思いました。　　
なによりGoでモクモクできたのが良かったなーとおもいます。(まともに書いたのはアーリーアダプター以来だった思う。。。)
コンパイルと実行が下のコマンドでできることには驚いた。(昔は8g,8lとかしてたコンパイルしてた記憶)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$go run &lt;プログラムファイル&gt;</span></code></pre></td></tr></table></div></figure>


<p>仕事でシステム周りの実装するならGo言語をぜひとも採用させたいですね。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rsyncを使って自前サーバでOctpressを運用する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/08/rsync-octpress/"/>
    <updated>2013-04-08T21:35:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/08/rsync-octpress</id>
    <content type="html"><![CDATA[<p>Octpressが便利すぎ。。。<br/>
Bloggerとは何だったんだって感じです。</p>

<p>どうも、どうもこんにちは。kurobaraです。</p>

<p>便利すぎるんで、</p>

<p>「ちょっと、外部に公開できないけどーみたいな感じで何でも書けるようなブログ」</p>

<p>欲しくなるわけですよ。(主に会社で、ですが・・・)</p>

<p>結論から先に言っちゃうと、自前サーバでOctpressを動かせます。<br/>
Apacheのディレクトリ制限を噛ますことでアクセス制限なんてこともできます。</p>

<p>という訳で、Octpressを自前サーバで動かす方法をやってみます。</p>

<h3>準備</h3>

<hr />

<p>思いつく感じのこと</p>

<ul>
<li>クライアントから自前のサーバにSSHでアクセスできること</li>
<li>クライアントにrsyncがあること</li>
<li>クライアントでOctpressが動作すること</li>
</ul>


<p>こんな感じ、移行で設定します。</p>

<h3>Rakefileの編集</h3>

<hr />

<p>Rakeコマンドを使ってる訳なので、deploy先を変更するため以下のように編集します。</p>

<ul>
<li>「ssh_user」を実際のユーザー名とサーバ名に変更します</li>
<li>「document_root」でサーバ配置のディレクトリを指定します</li>
<li>「ssh_port」はデフォルトで22ですが、必要に応じて変えます</li>
<li>「deploy_default」をpushからrsyncに変更します。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh_user       = "user@server"
</span><span class='line'>ssh_port       = 22
</span><span class='line'>document_root  = "/var/www/html/"
</span><span class='line'>rsync_delete   = true
</span><span class='line'>deploy_default = "rsync"</span></code></pre></td></tr></table></div></figure>


<p>ぶっちゃけ、自前サーバで動かすだけならこれで終わりです。<br/>
が、これだけだと寂しいのでサブディレクトリで動作するようにしてみます。<br/>
# 当たり前ですが、普通はサブディレクトリ単位でコンテンツをApacheに配備すると思います。</p>

<h3>サブディレクトリ運用</h3>

<hr />

<p>http://＜サーバURL＞/hoge のようにサブディレクトリ運用する場合は、以下のようにします。</p>

<ul>
<li>サブディレクトリを作成します</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rake set_root_dir[hoge]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>_config.yamlでサブディレクトリを追加します</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>url: http://&lt;サーバURL&gt;/hoge</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Rakefileのdocument_rootをサブディレクトリに変更します</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>document_root = "/var/www/html/octopress"</span></code></pre></td></tr></table></div></figure>


<p>あとは、Apache2でサブディレクトリの設定を施してやれば動作します。<br/>
認証を付けたければ、認証の設定をすれば認証付きのBlogになります。</p>

<p>これで、要件を満たせたので作業メモとか残せて幸せになれますね。(多分)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[万葉.rbに参加してきました。#everyrb]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/06/ranyo-rb/"/>
    <updated>2013-04-06T13:01:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/06/ranyo-rb</id>
    <content type="html"><![CDATA[<p>参加メモメモ。</p>

<h3>オープニング</h3>

<hr />

<p>Matzからの挨拶。<br/>
楽しい設計の言語が真面目に仕事になって嬉しい。<br/>
万葉をよろしく!!</p>

<h3>基調公演(島田さん)</h3>

<hr />

<p>言葉は軽く聞こえるけど、会社経営だとすごい!!</p>

<p>最近思う「コミュニティと会社の私」</p>

<ul>
<li>会社は孤立している。契約とか仕事程度(内側のつながりはない)</li>
<li>コミュニティではゆるく繋がっているので、今は繋がっているのではないのか</li>
<li>Rubyのコミュニティは面白い方々多い</li>
<li>地域Ruby会議に行くと、質問したり自分のことを見直すきっかけになるのでいいかもしれない</li>
<li>普通、ビジネス主体としての会社</li>
<li>もう１つは、コミュニティとしての会社</li>
<li>中の人が見えるというのはいい</li>
</ul>


<h3>万葉社長</h3>

<hr />

<p>コードについて言いたいこと</p>

<p>プログラミングはどういう仕事？</p>

<p>良い考えが最良とは限らない(衝突が起きる)</p>

<ul>
<li>クラス名が仕様書番号とか最低すぎる</li>
<li>わかりやすい名前</li>
<li>自動テストあるといいよ</li>
<li>PHP悪くてRubyがいいという意見は、別れる</li>
<li>MVCとオブジェクト指向は？</li>
<li>DRYと読みやすさ</li>
<li>RDB的に最適解とオブジェクト指向</li>
<li>安全と自由(型など)</li>
</ul>


<p>そのため、一般的に悪いといわれることが役立つこともある。</p>

<p>他にも・・・</p>

<ul>
<li>すべてを一気に解決することはできない。</li>
<li>どの局面で問題を解決をするのが重要</li>
<li>正解なんてものはない。</li>
</ul>


<p>大事なこと</p>

<ul>
<li>意思の表明。思ってるだけでは何もできない</li>
<li>考えていることを言語化することが必要</li>
<li>たのしくソフトウェア開発ができること</li>
<li>意思をもって選びとること</li>
</ul>


<h3>LT</h3>

<hr />

<p>角谷さん</p>

<ul>
<li>Rubyで仕事しだすと会社とコミュニティと個人のつながりを考えだす</li>
<li>WHYから始める</li>
</ul>


<p>和田さん</p>

<ul>
<li>6年続くのはすごい</li>
<li>生き生きできるのはレッドじゃなくてサブ</li>
<li>オススメ本:はじめの一歩を踏み出そう</li>
</ul>


<p>これ以外は聞くほうが面白かったのでメモってません。<br/>
ごめんなさいm(<em> </em>)m</p>

<h3>宿題的なアレ</h3>

<hr />

<p>万葉の中の人にやってること、超面白いし聞きたいんで是非LTやってくださいと勧められました。<br/>
なので、機会があればどこかでネタを話たいなーと思います。</p>

<p># 思ってるだけだとダメなので実際どこかで行動しないといけないですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シェルスクリプトで引数を順次処理する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/05/shell-args/"/>
    <updated>2013-04-05T23:36:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/05/shell-args</id>
    <content type="html"><![CDATA[<p>表題のようなことをしたいときってありますよね。</p>

<p>特にオレオレのスクリプトで、引数の数だけ処理を実行したいってときなんかがあると思います。<br/>
まーいわゆる引数の回数分、forをグルグル回すだけですね。</p>

<p>以下は、シェルの引数「$@」を変数「arg」に順次格納して、標準入出力に表示してます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>for arg in $@
</span><span class='line'>do
</span><span class='line'>　　echo ${arg}
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>


<p>簡単だけど、忘れがちなのでメモしておきました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhoneのカレンダーアプリとGoogleCalendarを同期する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/05/iphone-google-calendar/"/>
    <updated>2013-04-05T08:13:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/05/iphone-google-calendar</id>
    <content type="html"><![CDATA[<p>iPhone/iPad購入後、１度しかやらないのでよく忘れます。<br/>
そのため、端末を新しくするとやり方を忘れるのでキモだけメモ。</p>

<h3>設定アプリ</h3>

<hr />

<ul>
<li>メール/連絡先/カレンダーの設定項目で、Gmailアカウントを登録する</li>
<li>作ったアカウントの設定項目で、カレンダーを「オン」にする</li>
<li>その他の項目は、「オフ」でもよい</li>
</ul>


<h3>カレンダーアプリ</h3>

<hr />

<ul>
<li>カレンダーの設定項目で、左下にある同期を押下する</li>
<li>Gmail項目が出るので、同期したいものをチェックする</li>
</ul>


<h3>参考</h3>

<hr />

<ul>
<li><a href="http://support.google.com/calendar/answer/151674?hl=ja&amp;ref_topic=13950">Google公式</a></li>
<li><a href="http://oshiete.appbank.net/archives/1585">画像入りの設定方法</a></li>
</ul>


<p>偶にしかやらないと忘れてしまいますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3分で認証とか考慮しないWebDavを構築してみる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/02/httpd-webdav/"/>
    <updated>2013-04-02T00:30:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/02/httpd-webdav</id>
    <content type="html"><![CDATA[<p>大したことはないし、そこらへんに構築メモは転がってるので要らないと思うけど・・・</p>

<p>という訳で、一から最低限の機能のみを構築しますという体で進めます。<br/>
日本語の文字化け対策にエンコーディングを入れてーみたいなことはしません。</p>

<p>動かすことのみに注力します。</p>

<h3>環境</h3>

<hr />

<p>・CentOS6.3 x86_64</p>

<h3>Apacheのインストール</h3>

<hr />

<p>以下のコマンドでApacheをインストールします。<br/>
このとき、インストールするパッケージはdevelにします。(色々必要なものが一緒に入るので)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo yum install httpd-devel</span></code></pre></td></tr></table></div></figure>


<h3>モジュールの確認</h3>

<hr />

<p>WebDavは、Apacheの追加モジュールです。<br/>
develパッケージでインストールした場合、自動でインストールされますが念の為に確認します。<br/>
以下の２つが、「/etc/httpd/conf/httpd.conf」に記載されているか確認します。</p>

<ul>
<li>LoadModule dav_module modules/mod_dav.so</li>
<li>LoadModule dav_fs_module modules/mod_dav_fs.so</li>
</ul>


<p>記載が無ければ、「/usr/lib/httpd/modules/」に上記モジュールがあるか確認します。<br/>
モジュールが存在していれば、追加しましょう。</p>

<h3>WebDavの設定</h3>

<hr />

<p>以下の内容で、「/etc/httpd/conf.d/webdav.conf」を作成します。<br/>
ACLやBasic認証とかもここで設定できますが、最低限動作なので実施しません。<br/>
因みに、ディレクトリに対して細かい設定ができます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#
</span><span class='line'># This is to permit URL access to WebDav.
</span><span class='line'>#
</span><span class='line'>Alias /webdav/ "/var/www/html/webdav/"
</span><span class='line'>&lt;IfModule mod_dav.c&gt;
</span><span class='line'>    DAVMinTimeout 600
</span><span class='line'>    &lt;Location /webdav&gt;
</span><span class='line'>        DAV On
</span><span class='line'>    &lt;/Location&gt;
</span><span class='line'>&lt;/IfModule&gt;</span></code></pre></td></tr></table></div></figure>


<h3>WebDav用のディレクトリ作成</h3>

<hr />

<p>WebDavとして共有するためのディレクトリを作成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo mkdir -p /var/www/html/webdav</span></code></pre></td></tr></table></div></figure>


<p>ディレクトリをApacheから制御できるように所有者・所有グループを「apache」に変更します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo chown apache:apache /var/www/html/webdav</span></code></pre></td></tr></table></div></figure>


<h3>iptablesの設定</h3>

<hr />

<p>iptablesを未設定のままにすると、iptablesによってアクセスできないので、80番ポートのアクセスを許可するように設定変更します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo emacs /etc/sysconfig/iptables</span></code></pre></td></tr></table></div></figure>


<p>80番での通信を許可するよう、以下の内容をREJECTの前に追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<p>iptablesを再起動します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo /etc/init.d/iptables restart</span></code></pre></td></tr></table></div></figure>


<h3>Apacheの起動</h3>

<hr />

<p>以下のコマンドで起動します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo /etc/init.d/httpd start</span></code></pre></td></tr></table></div></figure>


<p><a href="http://localhost/webdav">http://localhost/webdav</a>にアクセス出来れば完了です。</p>

<p>この程度だと、大したことないし知ってれば３分要らないかもw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[findコマンドのメモ]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/03/31/find-command/"/>
    <updated>2013-03-31T00:04:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/03/31/find-command</id>
    <content type="html"><![CDATA[<p>普段から常用しているコマンドなのですが、今更という感じです。</p>

<p>滅多に使用しないオプションを今回使用することになったので、記録しておこうかと思った次第です。<br/>
※今回、使ったのは日時オプションです</p>

<table>
<thead>
<tr>
<th align="left"> コマンドオプション    </th>
<th align="center"> 機能          </th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> -name [filename]    </td>
<td align="center"> 指定した文字でファイル、ディレクトリを検索</td>
</tr>
<tr>
<td align="left"> -user [username]    </td>
<td align="center"> 指定したユーザーが所有するファイル、ディレクトリを検索</td>
</tr>
<tr>
<td align="left"> -group [groupname]  </td>
<td align="center"> 指定したグループが所有するファイル、ディレクトリを検索</td>
</tr>
<tr>
<td align="left"> -type [type]        </td>
<td align="center"> ファイルの種類を指定して検索(b：ブロック型特殊ファイル　c：キャラクタ型特殊ファイル　d：ディレクトリ　l：シンボリックリンク　f：通常ファイル)</td>
</tr>
<tr>
<td align="left"> -atime (+/-)n       </td>
<td align="center"> 最後にアクセスしたのがn日前で検索(+をつけると~日以上、-をつけると~日以下)</td>
</tr>
<tr>
<td align="left"> -ctime (+/-)n       </td>
<td align="center"> 最後にステータスが変更されたのがn日前で検索(+をつけると~日以上、-をつけると~日以下)</td>
</tr>
<tr>
<td align="left"> -mtime (+/-)n       </td>
<td align="center"> 最後にデータが修正されたのがn日前で検索(+をつけると~日以上、-をつけると~日以下)</td>
</tr>
<tr>
<td align="left"> -mmin (+/-)n        </td>
<td align="center"> 最後にデータが修正されたのがn分前で検索(+をつけると~日以上、-をつけると~日以下)</td>
</tr>
<tr>
<td align="left"> -newer [filename]   </td>
<td align="center"> 指定したファイルよりも後に更新されているものを検索対象にする</td>
</tr>
<tr>
<td align="left"> -size n[c/k/b]      </td>
<td align="center"> nのサイズのファイルを検索(c:バイト、k:キロバイト、b:ブロック)</td>
</tr>
<tr>
<td align="left"> -ls                 </td>
<td align="center"> 検索結果のファイル、ディレクトリの詳細を表示する(lsコマンドと同じ)</td>
</tr>
<tr>
<td align="left"> -print              </td>
<td align="center"> 検索結果を標準出力に出す(元々結果表示されるんで不要かも)</td>
</tr>
<tr>
<td align="left"> -fprint [filename]  </td>
<td align="center"> 検索結果をファイルに出力する(>でファイル出力できるので不要かも)</td>
</tr>
<tr>
<td align="left"> -exec [command] {}\;</td>
<td align="center"> 検索結果を指定コマンドにの引数に設定して実行する</td>
</tr>
</tbody>
</table>


<p>(例)カレントディレクトリ配下のファイルに「hogehoge」という文字が含まれているかどうか調べる</p>

<p>以下のコマンドで調べることができます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$find . -type f -exec grep hogehoge {}\;</span></code></pre></td></tr></table></div></figure>


<p>こちらでも同じ結果を得られます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$find . -type f |xargs grep "hogehoge"</span></code></pre></td></tr></table></div></figure>


<p>どちらでもいいと思いますが、自分はよく後者を利用しますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octpressで画像ファイルを扱う]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/03/30/octpress-image-tag/"/>
    <updated>2013-03-30T01:47:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/03/30/octpress-image-tag</id>
    <content type="html"><![CDATA[<p>Octpressで画像を扱う場合、どうすればよかったっけな？ってなりましたのでメモしておきます。</p>

<h3>画像の格納ディレクトリ</h3>

<hr />

<p>画像の格納場所は、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~source/images</span></code></pre></td></tr></table></div></figure>


<p>に格納すればよい</p>

<p>imagesディレクトリの配下にも、blogというディレクトリがあるのでブログ用の画像はそちらに格納すればよいっぽい。</p>

<h3>Octpress公式の手順</h3>

<hr />

<p><a href="http://octopress.org/docs/plugins/image-tag/">公式の手順</a></p>

<p>以下の書式に従って記載すれば、いいらしい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{\% img [class names] /path/to/image [width] [height] [title text [alt text]] \%}</span></code></pre></td></tr></table></div></figure>


<p>そのため、画像サイズを640x480で表示させたい場合、以下のように書くことができます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{\% img left /images/picture.png 640 480 \%}</span></code></pre></td></tr></table></div></figure>


<p>コード上の「\」は不要です。(何故か、エスケープが正しく動作しなかった)</p>

<h3>markdownを使用した方法</h3>

<hr />

<p>これは、前にも書いたように以下のようにすればよいでしょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[テスト画像](/images/picture.png "title")</span></code></pre></td></tr></table></div></figure>


<p>但し、画像サイズは指定できないという欠点があります。<br/>
画像は、加工するしかないようですね。</p>

<h3>htmlを直接記載する方法</h3>

<hr />

<p>以下のような感じで、htmlを使用した書き方もできるようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;img src="http://moonstruckdrops.github.com/images/picture.png" alt="alt" title="title" width="640" height="480"&gt;</span></code></pre></td></tr></table></div></figure>


<p>注意する点があるとすれば、必ず前後に<p>タグが挿入されてしまうことです。<br/>
インラインで使用することは、できないっぽいです。</p>

<h3>まとめ</h3>

<hr />

<p>個人的な見解は以下のような感じ</p>

<ul>
<li>基本はmarkdown記法で記載</li>
<li>画像サイズを変更したい場合、Octpressの記法に従う</li>
<li>汎用的にしたい場合、htmlで記載する</li>
<li>ブログ記事用の画像の場合、「souce/images/blog」の下に格納する</li>
<li>ブログ記事以外の画像の場合、「source/images」の下に格納する</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyで画像ファイルをダウンロードする]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/03/28/ruby-web-file/"/>
    <updated>2013-03-28T23:34:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/03/28/ruby-web-file</id>
    <content type="html"><![CDATA[<p>少しばかり、やることがあったのでやってみた。<br/>
煩悩丸出しですいませんw</p>

<h3>HTTP Responseのbodyを利用する</h3>

<hr />

<p>直感的ではないけど、素直なやりかた</p>

<ol>
<li>書き込みモードでファイルを開く</li>
<li>urlで接続したbodyデータをファイルに書き込む</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def save_file(url)
</span><span class='line'>   filename = File.basename(url)
</span><span class='line'>   open(filename, "wb") do  |file|
</span><span class='line'>          file.puts Net::HTTP.get_response(URI.parse(url)).body
</span><span class='line'>   end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>open-uriを使用する方法</h3>

<hr />

<p>説明しやすいのでこっちのほうがわかりやすいかもしれない。</p>

<ol>
<li>書き込みモードでファイルを開く</li>
<li>書き込みモードで開いたファイルに対して、urlで接続したデータを書き込む</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def save_file(url)
</span><span class='line'>    filename = File.basename(url)
</span><span class='line'>    open(filename, 'wb') do |file|
</span><span class='line'>        open(url) do |data|
</span><span class='line'>            file.write(data.read)
</span><span class='line'>      end
</span><span class='line'>    end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>真面目にやるなら、レスポンスコードもチェックしたほうがいいかもしれないですね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaのHashmapを使ったiteratorの実装]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/03/25/java-map-iterator/"/>
    <updated>2013-03-25T18:29:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/03/25/java-map-iterator</id>
    <content type="html"><![CDATA[<p>偶に忘れるのでメモしておきます。<br/>
iterationは忘れたらダメだと思いつつも、偶にアレなんだっけ？ってなります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Map map = new HashMap();
</span><span class='line'>for (Iterator it = map.entrySet().iterator(); it.hasNext();) {
</span><span class='line'>    Map.Entry entry = (Map.Entry)it.next();
</span><span class='line'>    Object key = entry.getKey();
</span><span class='line'>    Object value = entry.getValue();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Javaを書かなくなると忘れてしまいますねw</p>
]]></content>
  </entry>
  
</feed>
