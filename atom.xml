<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2015-02-19T00:09:54+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[APIを作る際のAPIバージョンに関するメモ]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/02/18/api-life-cycle/"/>
    <updated>2015-02-18T23:19:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/02/18/api-life-cycle</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>APIを作るときにどうするか？を開発チーム内で議論したので、備忘録的なメモ</p>

<p>発端となった会話は、こんな感じだったはず</p>

<p>「マイクロアーキテクチャなサービスを作ったときってAPIを作ると思うけど、ライフサイクルって考えてる？」<br/>
「APIを利用するフロントは更新できるけど、APIは依存されるものが多いから簡単には更新できないよね？」<br/>
「APIってモバイルアプリからも利用した場合、修正しづらくない？バージョン管理でもするの？」</p>

<h3>APIの種別</h3>

<hr />

<p>以下の３つぐらいになりそう</p>

<ul>
<li>外部公開向け</li>
<li>モバイルアプリ向け</li>
<li>webサービス向け</li>
</ul>


<h3>外部公開向け</h3>

<hr />

<ul>
<li>API変更の影響が大きい</li>
<li>ドキュメント更新必須</li>
<li>利用者が離れるのでドラスティックな変更はできない</li>
<li>利用者への周知が必須</li>
</ul>


<h3>モバイルアプリ向け</h3>

<hr />

<ul>
<li>アプリのみが影響を受けるので、API変更における影響は少ない</li>
<li>アプリバージョンによるので自由にAPI更新ができない</li>
<li>OSバージョンによってアプリのアップデートができないことが多いので、更新によって使えなくなる可能性有</li>
<li>更新API対応のアプリであっても、アプリが更新されることは無いと思ったほうがよい</li>
</ul>


<h3>webサービス向け</h3>

<hr />

<ul>
<li>クライアントもAPIに合わせて最新にできるので、変更しやすい</li>
<li>キャッシュされたクライアントのコードとのデータ不整合が起きやすい</li>
<li>キャッシュに振り回される(iOSのwebview等)</li>
</ul>


<h3>バージョニング方式</h3>

<hr />

<p>APIのバージョン管理方式は以下のものが採用される傾向にある</p>

<ol>
<li>アクセス先URIそのものを大きく変更する</li>
<li>URIにバージョンを埋め込む</li>
<li>クエリに使用APIバージョンを入れる</li>
<li>メディアタイプにバージョンを指定する</li>
</ol>


<p>世間的には、2のパターンが比較的多く採用される傾向</p>

<h3>URIにバージョンを埋め込み方式</h3>

<hr />

<ul>
<li>「v1」のように「v」をつけてバージョンを明確にすることが多い</li>
<li>日付やリリースバージョン(ハッシュ等)をバージョンにするAPIもある(twillo等)</li>
<li>URIに組み込むバージョンは、メジャー番号のみを含める</li>
<li>APIの修正は、後方互換を保ちつつ対応する</li>
</ul>


<p>バージョニングは以下のセマンティックバージョニング方式を取ることが多い</p>

<ul>
<li>パッチバージョンは、ソフトウェアのAPIに変更がないバグ修正を行ったときに増える</li>
<li>マイナーバージョンは後方互換がある機能変更、特定の機能追加のときに増える</li>
<li>メジャーバージョンは後方互換が無い変更の時に増える</li>
</ul>


<h3>メディアタイプにバージョンを指定する</h3>

<hr />

<ul>
<li>「Accept: application/vnd.example.v2+json」のような形で規定する</li>
<li>URIがリソースを表しているので、HTTPの文法に則っている</li>
<li>「Content-Type」の指定誤りで、サーバ、クライアント側ともにエラーになりやすい傾向</li>
</ul>


<h3>バージョン変更指針</h3>

<hr />

<ul>
<li>APIは基本変更しないほうがよい</li>
<li>変更は後方互換を保ちつつ対応できる場合は、マイナーバージョンアップ(可能な限りこちらを選択)</li>
<li>後方互換が保てない修正の場合はメジャーバージョンアップ</li>
<li>レスポンスデータ整合性/整理のためであれば、バージョンは上げない(後方互換を維持し続け、ドキュメント整理で対応)</li>
</ul>


<h3>メジャーバージョンアップ指針</h3>

<hr />

<p>後方互換が保てない場合のみ実施し、バージョンアップのルールを整理してから行う</p>

<ul>
<li>セキュリティ/権限などのAPI使用ルール変更</li>
<li>認証方式の変更</li>
<li>乱雑に作った(ルールが無い)APIを使いやすくするための整備</li>
</ul>


<h3>APIの提供終了</h3>

<hr />

<ul>
<li>API提供終了前に提供終了日時のアナウンスをする(提供終了後、半年ほどは動かしておくこと)</li>
<li>提供終了までにAPIを利用できなくするブラックアウトテストを数回実施する</li>
<li>API提供終了の仕様をドキュメントに盛り込んでおく(HTTPのステータスコード410(Gone)を返すなど)</li>
<li>利用期限をAPI提供開始時に決めておく</li>
<li>古いAPIを叩いたときに、新APIへのリダイレクトは、混乱を招くので避けたほうがよい</li>
</ul>


<p># モバイル向けAPIの場合、ユーザー体験に直結するので仕様として予め考えておく(モバイル向けの場合、APIの停止はトレンドを見つつ行うこと)
# アプリのアップデートを促すようにしておく(強制アップデートは好まれないが、使えなくなるよりも遥かにマシ)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linuxのログイン履歴確認]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/02/18/linux-login-check/"/>
    <updated>2015-02-18T01:20:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/02/18/linux-login-check</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>毎度なんだっけ？ってなって思い出すのが面倒なので、備忘録的にログイン履歴確認方法を記録</p>

<h3>最近ログインしたアカウント一覧</h3>

<hr />

<p>以下のコマンドで確認できる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$last</span></code></pre></td></tr></table></div></figure>


<p>実行結果(上に行くほど最新)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root     tty1                          Tue May  6 18:59 - crash  (00:16)
</span><span class='line'>root     tty1                          Tue May  6 18:58 - 18:59  (00:00)
</span><span class='line'>reboot   system boot  2.6.32-431.11.2. Tue May  6 17:16 - 21:21  (04:04)</span></code></pre></td></tr></table></div></figure>


<h3>ログファイルから確認する</h3>

<hr />

<p>もう少し細かく見る場合はログファイルを確認する<br/>
バイナリなので中を見たいときはwhoコマンドを使用する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$who /var/log/wtmp</span></code></pre></td></tr></table></div></figure>


<p>実行結果(ログファイルなので、ファイル末尾が新しい)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root     tty1         2014-05-06 18:58
</span><span class='line'>root     tty1         2014-05-06 18:59
</span><span class='line'>root     tty1         2014-05-06 19:19</span></code></pre></td></tr></table></div></figure>


<h3>各アカウントの最終ログインの一覧</h3>

<hr />

<p>普段利用していないアカウントでログインされていないか確認できる<br/>
以下のコマンドで確認できる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$lastlog</span></code></pre></td></tr></table></div></figure>


<p>実行結果(各アカウントの最終ログインが表示)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ユーザ名         ポート   場所             最近のログイン
</span><span class='line'>root             tty1                      **一度もログインしていません**
</span><span class='line'>bin                                        **一度もログインしていません**
</span><span class='line'>daemon                                     **一度もログインしていません**
</span><span class='line'>adm                                        **一度もログインしていません**
</span><span class='line'>lp                                         **一度もログインしていません**
</span><span class='line'>sync                                       **一度もログインしていません**
</span><span class='line'>shutdown                                   **一度もログインしていません**</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressでの画像の表示]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/01/28/octopress-picture/"/>
    <updated>2015-01-28T00:55:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/01/28/octopress-picture</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>常々、画像ファイルってどう表示するのだっけ？と思っていたのでやってみた感じ</p>

<h3>ファイルの格納先</h3>

<hr />

<p><code>octopress/source/images</code>ディレクトリに画像ファイルを格納する</p>

<p>themeで表示している画像が最初から格納されているので、ビビらず画像ファイルを格納すること</p>

<h3>指定方法</h3>

<hr />

<p><a href="http://octopress.org/docs/plugins/image-tag/">公式</a>を参照すればできる模様</p>

<p>そのため前述の格納先を相対URLで指定すると、以下の形になる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![hoge](/images/hoge.jpg)</span></code></pre></td></tr></table></div></figure>


<p>こんな感じでやると画像を表示できる</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TimeCapsuleのethernetを確認する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/01/28/timecapsule-eth0/"/>
    <updated>2015-01-28T00:45:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/01/28/timecapsule-eth0</id>
    <content type="html"><![CDATA[<h3>備忘録的に</h3>

<hr />

<p>TimeCapsuleのIPアドレスを固定にしたかったので、MACアドレスを調べる必要が出てきた</p>

<p>また同じことにならないようにメモしておく</p>

<h3>確認方法</h3>

<hr />

<p>下記の図のように、AirMacユーティリティを開き機器のタイトルを選択すると表示されます</p>

<p><img src="http://moonstruckdrops.github.com/images/airmac.png" alt="AirMac" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidのPull To Refreshをちょっとだけ調べた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/01/17/pull-to-refresh/"/>
    <updated>2015-01-17T23:58:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/01/17/pull-to-refresh</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>ここの内容は完全に備忘録です。<br/>
何故かというと、自分がちょっと実現したい機能があったけどできるのだろうかと調べてみたメモだからです。</p>

<h3>普通のPull To Refresh</h3>

<hr />

<p>所謂、下向きに引っ張るとListViewが更新されるやつですね。</p>

<p>これはAPI Level19のSupport V4 Libraryにて機能提供されているので、簡単に実現できます。<br/>
(ちょっと癖はあるかもしれませんが・・・)</p>

<p>以下にデモとReferenceを記載</p>

<ul>
<li><a href="https://developer.android.com/samples/SwipeRefreshLayoutBasic/index.html">SwipeRefreshLayoutBasic</a></li>
<li><a href="https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html">SwipeRefreshLayout</a></li>
</ul>


<p># デモを見ればわかりますが、扱うだけなら非常に楽に使えるような感じになっています(カスタムは面倒臭さそう)<br/>
# ぐぐれば、いっぱい記事は見つかるので詳細はそちらに譲ります</p>

<h3>やりたかったこと</h3>

<hr />

<p>下から上にListViewを引っ張ると、ListViewが更新されること<br/>
俗に言う、bottomup to refreshってやつです</p>

<h3>調べてみた</h3>

<hr />

<h4>ライブラリは？</h4>

<p><a href="https://github.com/chrisbanes/Android-PullToRefresh">Android-PullToRefresh</a>が、対応している
但し、作者がdeprecated宣言</p>

<h4>カスタム実装は？</h4>

<p>少し試してみた感じだと、標準機能を駆使して実現(Classの継承など)は、まず無理かも</p>

<p># そもそも、そんな感じで簡単にrefreshする機能を上下を入れ替え作られているような感じにはなってなかった</p>

<h4>ソースコードを見れば？</h4>

<p>結論から言うと、onTouchEventでアニメーションの実施の有無など詳細な条件判定とかやっているので今のところ難しそう</p>

<p><a href="https://android.googlesource.com/platform/frameworks/support/+/refs/heads/master/v4/java/android/support/v4/widget/SwipeRefreshLayout.java">SwipeRefreshLayout.java</a></p>

<p># 追いかけた結果を書くのは割愛します</p>

<h5>他の人はどうなの？</h5>

<p>同じことを考える方はいらっしゃるようですね。</p>

<p><a href="http://stackoverflow.com/questions/24867204/swiperefreshlayout-pull-from-bottom">SwipeRefreshLayout - Pull From Bottom</a></p>

<p>ざっくり書くと、こんな感じ</p>

<ul>
<li>今のAPIだと簡単には無理</li>
<li>OSSのコードをコピーして、自前で<a href="https://bitbucket.org/andreyice/swiperefreshlayoutbottom">実装</a>した</li>
<li><a href="http://www.oodlestechnologies.com/blogs/Implementing-Pull-to-refresh-(like-in-Facebook-mobile-app)-for-ANDROID-using-Titanium">ここ</a>を参考に実装すればもしかしたらできるかも</li>
</ul>


<p># ソースコード見た感触とあまり変わらない(´・ω・｀)</p>

<h3>ちょっと調べてとりあえず分かったこと</h3>

<hr />

<p>API叩いて直ぐ実現可能というわけではないようですね(´・ω・｀)</p>

<ul>
<li>クラスを継承した独自のLayoutにすればなんとかできそうかもしれない</li>
<li>但し、onTouchEventを自前で実装するのと処理中のアニメーションを挟むため、一筋縄ではいかない</li>
<li>実現方法の参考実装はあるので、うまくできそうかやってみればいいかもしれない</li>
<li>deprecated宣言しているが、ライブラリを使えば楽にはできる(その後のメンテナンスコストは払う必要は出そうだが・・・)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacsのバージョンで分岐をさせたい]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/01/08/emacs-version/"/>
    <updated>2015-01-08T00:51:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/01/08/emacs-version</id>
    <content type="html"><![CDATA[<h3>発端</h3>

<hr />

<p>Emacsのバージョンを最新にしたことで色々設定が楽に書けることがわかった<br/>
そのため、最新内容を反映させた</p>

<p>とはいえ、下位互換もある程度保ちたかった<br/>
(全部、追従すればいいのだがそうもいかない環境もあるので)</p>

<h3>最初に試してみた</h3>

<hr />

<p>普通にバージョンを取得してみた</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(emacs-version)
</span><span class='line'>"GNU Emacs 24.4.1 (x86_64-apple-darwin14.0.0, NS apple-appkit-1343.16)
</span><span class='line'> of 2015-01-04 on hoge.local"</span></code></pre></td></tr></table></div></figure>


<p>文字列のマッチング処理が多くなりそうで結構めんどくさい・・・</p>

<h3>結果的にこうした</h3>

<hr />

<p>普通のmajor/minor バージョン判定を複合した条件判定するだけの関数を用意</p>

<p>24.3以下の判定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defvar is-less-than-or-equal-24-3 (and (&lt;= emacs-major-version 24) (&lt;= emacs-minor-version 3)))</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web API The Good Parts2章]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/12/22/web-api-good-parts-2/"/>
    <updated>2014-12-22T23:18:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/12/22/web-api-good-parts-2</id>
    <content type="html"><![CDATA[<h2>前置き</h2>

<h4>近況</h4>

<hr />

<p>ざっくりと書くと、お前エンジニアなのに勉強しなくていいの？という状態</p>

<ol>
<li>免許が取れたので単車を乗り回している(運転が楽しくて毎日、運転しているような)</li>
<li>昨年よりも比較的、仲がいい友人(男女問わず)と遊ぶ機会が多くなったかも&#8230;</li>
<li>気の合う仲間と組んで、(Swiftで)アプリ作っている</li>
<li>その気の合う仲間への技術指導していたり&#8230;</li>
</ol>


<p>なんだか、教えることが多くなって自分が学習している時間が比較的減ってきているそんな感じががが</p>

<h4>そういう訳なので</h4>

<hr />

<p>本屋でざっくりと見かけてツボに嵌った本を読んでいこうかと</p>

<p>「Web API The Good Parts」</p>

<p>なのですが、上記3,4が結構あるので中々進まないという(ぉぃ</p>

<p>ということなので、なるたけ気になるところ(覚えておくべきところ)だけまとめていこうかなと</p>

<p>斜め読みした感じでは、結構ツボに嵌る内容なので自分のバイブルに入選してもいいかなと思ってたり。</p>

<h2>エンドポイント設計</h2>

<ol>
<li>公開する機能を先に設計する</li>
<li>覚えやすく、どんな機能を持つURIかひと目で分かるようにする</li>
<li>HTTPメソッドの活用</li>
<li>設計の注意点</li>
<li>クエリパラメータ</li>
<li>ログインや認証</li>
<li>ホスト名とエンドポイント</li>
</ol>


<h4>1に関して</h4>

<hr />

<p>どんなAPIが必要かどうかを先に洗い出しておく</p>

<h4>2に関して</h4>

<hr />

<ul>
<li>短く入力しやすいURI</li>
<li>人間が読んで理解できるURI</li>
<li>大文字、小文字が混在しないURI</li>
<li>改造しやすいURI</li>
<li>サーバ側アーキテクチャが反映されていないURI</li>
<li>ルールが統一されたURI</li>
</ul>


<h4>3に関して</h4>

<hr />

<p>HTTPメソッドを有効活用</p>

<ul>
<li>Restfulな形で活用すれば、一般的な形</li>
</ul>


<h4>4に関して</h4>

<hr />

<ul>
<li>複数形の名詞を利用する</li>
<li>利用する単語に気をつける((ProgramableWeb)[http://www.programmableweb.com/]等、他のサービスを参考に)</li>
<li>スペースやエンコードが必要な文字は避ける</li>
<li>単語をつなげる場合はハイフンにする(SEO的に有利なことも)</li>
</ul>


<h4>5に関して</h4>

<hr />

<ul>
<li>相対位置を使用する場合、データ数が多くなると取得件数が減ること、更新頻度が高いものは不整合が起きやすくなることに注意</li>
<li>絶対位置を使用する場合、クエリパラメータが「x以降」,「この日付よりも古いもの」という形でクエリパラメータをもたせたほうがよい</li>
<li>日付の形式は、RFC3339に規定されている「1970-01-01T00:00:00Z」の形にする</li>
<li>絞り込みのパラメータは、「q」のような形は曖昧検索に取られやすいので完全一致の場合は適切なパラメータにすること</li>
<li>一意なリソースを表すのに必要な情報: パス</li>
<li>省略可能: クエリパラメータ</li>
</ul>


<h4>6に関して</h4>

<hr />

<ul>
<li>OAuthを使用して、標準的な形にする</li>
</ul>


<p>標準的なOAuthに則るとエラーメッセージ(RFC6749, RFC6750)は、以下のような形式となる
(当然ながらhttpステータスは401)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "error": "invalid_token"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>7に関して</h4>

<hr />

<ul>
<li>ホスト名にapiを入れるのが主流</li>
<li>企業で複数のサービスをホストする場合、例外的なホスト名</li>
<li>サービスとしてのapiの場合はホスト名にapiをいれたほうがよい(外部から使われるため)</li>
<li>プラットフォームの場合、service等をホスト名にいれる</li>
</ul>


<h2>まとめ</h2>

<hr />

<ul>
<li>一般的なURI設計がそのまま適用できる</li>
<li>APIならではのルール、デファクトスタンダードがある</li>
<li>URIはリソースを表すものなので、URIとHTTPメソッドの組み合わせで処理の対象と内容を設計をする</li>
</ul>


<h4>Good</h4>

<ul>
<li>覚えやすく、どんな機能を持つかが一目で分かるようにエンドポイントにする</li>
<li>適切なHTTPメソッドを利用する</li>
<li>適切な英単語を利用し、単数形、複数形にも注意する</li>
<li>認証はOAuth2.0を使う</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSで複数のmodalを同時に閉じる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/11/15/back-multi-modal/"/>
    <updated>2014-11-15T17:02:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/11/15/back-multi-modal</id>
    <content type="html"><![CDATA[<h3>こんな状況</h3>

<hr />

<p>[A→B→C→Dの順で画面を開いた状況で、D->Aへ戻りたいという状況</p>

<h3>やり方</h3>

<hr />

<p>戻りたいところのmodalを指定すると、その前のものは全て閉じることができました</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.presentingViewController?.presentingViewController?.dismissViewControllerAnimated(true, completion: nil)</span></code></pre></td></tr></table></div></figure>


<p>画面遷移の状態を覚えてないと辛い感じですね</p>

<h3>元ネタ</h3>

<hr />

<p><a href="dismissViewControllerAnimated:completion:">https://developer.apple.com/library/ios/documentation/uikit/reference/UIViewController_Class/index.html#//apple_ref/occ/instm/UIViewController/dismissViewControllerAnimated:completion:</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacsを再起動せずに設定を反映させる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/11/09/reload-config-emacs/"/>
    <updated>2014-11-09T12:23:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/11/09/reload-config-emacs</id>
    <content type="html"><![CDATA[<h3>やりたいこと</h3>

<hr />

<p>Emacsを再起動せず、設定内容を反映させたい</p>

<h3>解決編</h3>

<hr />

<p>追加した部分だけ、評価する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x eval-region</span></code></pre></td></tr></table></div></figure>


<p>今、現在実行している全てのバッファの式を再評価する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x eval-buffer</span></code></pre></td></tr></table></div></figure>


<p>そもそもの設定ファイルを読みなおす</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x load-file RET ~/.emacs.d/init.el</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gocon-spring]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/05/31/gocon-spring/"/>
    <updated>2014-05-31T13:49:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/05/31/gocon-spring</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQueryが見つからないよエラーの解消法]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/03/26/update-gemfile/"/>
    <updated>2014-03-26T23:32:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/03/26/update-gemfile</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>今更ながら、Rails3.2のアプリをRails4までアップデートしました。<br/>
そのとき出たエラーと解消方法を残します。</p>

<h3>当該のエラー</h3>

<hr />

<p>それがこれ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>couldn't find file 'jquery'</span></code></pre></td></tr></table></div></figure>


<p>正直、なんで？という感じ</p>

<h3>解消方法</h3>

<hr />

<p>Gemfileの記述が変わってたことが原因でした<br/>
(asset compile周りの仕様変更)</p>

<p>Rails3.x系は、Gemfileに以下がありました</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>group :assets do
</span><span class='line'>
</span><span class='line'>ここにasset compileで使用するgemがある
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>ところが、Rails4系になるとasset groupは無くなる仕様に変わったみたいです。<br/>
代わりの設定は、<code>config/application.rb</code>になるようです。</p>

<p>メジャーアップデートの前に、<a href="http://railscasts.com/episodes/415-upgrading-to-rails-4?language=ja&amp;view=asciicast">移行ガイド</a>に目を通せってことですねw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Bazaar and Conference 2014 Springに行ってきた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/03/23/abc-2014-spring/"/>
    <updated>2014-03-23T22:12:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/03/23/abc-2014-spring</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>もう殆ど、Androidをやっていない身ですが情報追っかけ程度に参加してきました。</p>

<p>因みに、当日は寝坊してやべぇって言ってたのは内緒w</p>

<p>興味が湧いたセッションは2つぐらいだったので、それさえ聴ければいいかなーぐらいの感覚で行ってきました。</p>

<p>というわけで、当日のメモに加筆修正したものを残します。</p>

<h3>UI/UXデザイントレンド 2014</h3>

<hr />

<h4>デザイントレンド</h4>

<ul>
<li>質感がわかるようなデザインに変わりつつ</li>
<li>スキュモーフィズムからフラットデザインへ

<ul>
<li>装飾を外してシンプルに</li>
<li>flatvsrealism.com</li>
</ul>
</li>
<li>フラットのほうが意図が伝わりやすい

<ul>
<li>Androidのデザインガイドラインもフラットなものに変わっている</li>
<li>Googleも力を入れていることがわかる</li>
</ul>
</li>
</ul>


<h4>Androido UI</h4>

<h5>2011年のTrend</h5>

<ul>
<li>派手</li>
<li>白いテキスト</li>
<li>リアルで立体的なアイコン</li>
<li>この当時はiPhoneが流行っていたので、似たようなデザインになるような感じ</li>
</ul>


<h5>2012年のTrend</h5>

<ul>
<li>黒やダークな背景</li>
<li>ダークやマットな色</li>
<li>水色や白のテキスト</li>
<li>レイアウトがグリッドスタイル</li>
<li>ON/OFFボタンなど、ルールが破綻してるところもあった</li>
<li>ボーダレスUI(ひと目でボタンなのかわからないようなものを指す)</li>
</ul>


<h5>2013年のTrend</h5>

<ul>
<li>白や明るい背景</li>
<li>カードスタイル(Googleの殆どのアプリが対応)</li>
<li>影を入れたりして立体感を出している

<ul>
<li>(GooglePlayでの)評価が上がりやすい</li>
<li>platformとの統一感が重要</li>
</ul>
</li>
<li>ボーダレスUIは健在・・・</li>
<li>シンプルなアイコンやイラスト</li>
</ul>


<h4>2014年(1Q)のTrend</h4>

<ul>
<li>Yahoo weatheアプリのような感じになりつつある

<ul>
<li>カードスタイルから変わる</li>
</ul>
</li>
<li>端末のスペックが上がってきたから対応できるようになってきた

<ul>
<li>写真やグラデーション</li>
</ul>
</li>
</ul>


<h4>Android wear</h4>

<ul>
<li>サークルUI

<ul>
<li>アイコンが丸くなっているものが増えてきた</li>
<li>フラットで押したりする領域が分からないという問題への回答かも</li>
</ul>
</li>
<li>より大きな書体</li>
<li>写真やビジュアルリッチに</li>
</ul>


<h4>webサイトデザインとの違い</h4>

<ul>
<li>スケーラブル、モニターによっての情報量が違う

<ul>
<li>スマホ向けは、シンプル・単機能・担当直入な処理デザインに</li>
</ul>
</li>
</ul>


<h4>QAメモ</h4>

<ul>
<li>アプリのUIデザインはどうするの？

<ul>
<li>ゲームUIとアプリUIとは全く違うので、機能を入れ過ぎないようにする</li>
</ul>
</li>
<li>インタラクションにもデザイナーが関わってやっていくほうがよい

<ul>
<li>ダサいものになりづらい</li>
<li>エンジニアも積極的にデザイナーと一緒にやっていく</li>
</ul>
</li>
<li>流行を追っかけるためのデザインサイト

<ul>
<li>Android niceties</li>
</ul>
</li>
<li>デザインにも事業戦略が必要

<ul>
<li>古い端末もサポートするのか？など

<ul>
<li>2.x系はもう切ってもいいかも</li>
<li>１つで全部の対応は難しいので避けたほうがよい</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>トレンドの変遷(最近のAndroidアプリのトレンドについて)</h3>

<hr />

<h4>はじめに</h4>

<ul>
<li>セッションはAndroid Pattern Cookbookの解説&amp;補足</li>
<li><a href="https://play.google.com/store/apps/details?id=yanzm.products.patterncookbook">AndroidPatternCoockbookのデモアプリ</a>あるので確認しながらだと理解進むかも</li>
<li>最近の開発は、タブレット対応も必須</li>
</ul>


<h4>ダッシュボードデザイン</h4>

<ul>
<li>メインコンテンツが複数ある場合、機能が視認しやすいので優位</li>
<li>1回操作挟むのは、ダメじゃね？</li>
</ul>


<h4>タブ</h4>

<ul>
<li>スワイプでタブ間の行き来ができるように</li>
<li>各コンテンツのスワイプはできない・・・</li>
</ul>


<h4>NvigationDrawer</h4>

<ul>
<li>ガイドライン化</li>
<li>メジャーなものは大体NvigationDrawerを使ってる</li>
<li>アイコン左、カウンターは右</li>
</ul>


<h4>アプリの世界観も重要</h4>

<ul>
<li>FeedlyやEvernoteが筆頭

<ul>
<li>出しすぎなところもあるけど・・・</li>
</ul>
</li>
</ul>


<h4>上部にユーザー情報を表示が多い</h4>

<ul>
<li>アカウント切り替えが難しいタイプも・・・</li>
</ul>


<h4>オリジナリティを出す</h4>

<ul>
<li>黒はデザインが難しい</li>
</ul>


<h4>アクションバー</h4>

<ul>
<li>アクションバーとコンテンツの配色は雰囲気になる

<ul>
<li>白だと明るい、清潔感が出やすい</li>
<li>白+黒だと引き締まる</li>
</ul>
</li>
<li>アクションバーの背景

<ul>
<li>下に影をつけるものも多い</li>
</ul>
</li>
<li>フレームワークのアクションバーを使ったほうがよい

<ul>
<li>アプリの世界観次第で独自路線があるならいいけど。</li>
</ul>
</li>
</ul>


<h4>フォント</h4>

<ul>
<li>ライセンス問題になりやすいので、フォントはアプリに内蔵しないほうがいい</li>
<li>fontFamilyを使うと改善できる可能性がある

<ul>
<li>font同士を組み合わせて使うほうといい</li>
</ul>
</li>
</ul>


<h4>ヘルプポップアップ</h4>

<ul>
<li>注目させたい場合、アニメーションを使うと注目させやすい</li>
</ul>


<h4>インストラクション</h4>

<ul>
<li>「ここを押す」などの表示を入れやすい</li>
</ul>


<h4>チュートリアル</h4>

<ul>
<li>読む？テキスト量は減らしたほうがいい</li>
<li>画像で伝え、1行ぐらいがいい</li>
<li>無くてもいいかの検討も重要</li>
</ul>


<h4>viewpager</h4>

<ul>
<li>スクロールできるタブ</li>
<li>タイトルストリップ</li>
<li>インジケータ

<ul>
<li>ページの移動でアイコンが変わるもの</li>
</ul>
</li>
<li>ページ切り替えでエフェクト</li>
</ul>


<h4>タブレット対応</h4>

<ul>
<li>スケールアップは微妙な対応

<ul>
<li>データ量が無ければ、それでもいいかも</li>
<li>画像入れるなりで、余白を減らす</li>
</ul>
</li>
<li>macroreflow

<ul>
<li>グリッドの並び替え

<ul>
<li>数も重要になる</li>
</ul>
</li>
<li>スマホはリストで対応してやるといい</li>
</ul>
</li>
<li>master/detailパターン

<ul>
<li>gmailアプリとかgoogle playアプリ</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsで定数を定義する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/03/23/rails-consts/"/>
    <updated>2014-03-23T20:34:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/03/23/rails-consts</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>Railsで定数を作るとき、いつもどうしてたっけ？っていう個人まとめをつくってみました。</p>

<p>決定版みたいなものが無い感じというのもあったりするので参照用という感じです。</p>

<h3>グローバルな定数定義</h3>

<hr />

<p>以下のような感じの内容で、「config/initializers」に適当なRubyファイルを作成して定義します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HOGE = "HOGE"
</span><span class='line'>FUGA = "FUGA"</span></code></pre></td></tr></table></div></figure>


<p>もしくは、yamlに定数を切り出して、実行タイミング(Rails起動時)にロードという方式でもいいかもしれません。<br/>
# yamlに切り出すと管理が大変になるかも・・・という欠点は無きにしもあらずですね。</p>

<p>欠点は以下が考えられます。</p>

<ul>
<li>namespaceの概念が無いので少々使いづらい</li>
<li>環境ごとに値を変更したい場合、切り替え処理を自前でやる必要がある</li>
</ul>


<p>特に、環境差分とか無ければこれでいいかもしれませんね。<br/>
# 尤も、namespaceを使わなくて済む程度という前提が付きますが・・・</p>

<h3>コントローラー内で共通な定数定義</h3>

<hr />

<p>以下のような感じで、app/controllers/application_controller.rb 内で定義します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ApplicationController &lt; ActionController::Base
</span><span class='line'>  HOGE = "HOGE"
</span><span class='line'>  FUGA = "FUGA"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>単にApplicationControllerがすべてのcontrollerのスーパークラスになっているから参照できるというだけの話です。
# あまりここに定義はしたくないですね。</p>

<h3>rails_configを使って環境ごとに変更する</h3>

<hr />

<p><a href="https://github.com/railsjedi/rails_config">rails_config</a>というgemを使う方法ですね。</p>

<p>以下をGemfileに記述し、インストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rails_config'</span></code></pre></td></tr></table></div></figure>


<p>rails_configを使うように初期設定をします(ただのインストールですが)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rails g rails_config:install</span></code></pre></td></tr></table></div></figure>


<p>ファイルに関しては以下の通り</p>

<table>
<thead>
<tr>
<th align="left">環境</th>
<th align="left">ファイルパス</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">全ての環境で共通</td>
<td align="left">config/settings.yml</td>
</tr>
<tr>
<td align="left">ローカル環境</td>
<td align="left">config/settings.local.yml</td>
</tr>
<tr>
<td align="left">開発環境</td>
<td align="left">config/settings/development.yml</td>
</tr>
<tr>
<td align="left">テスト環境</td>
<td align="left">config/settings/test.yml</td>
</tr>
<tr>
<td align="left">本番環境</td>
<td align="left">config/settings/production.yml</td>
</tr>
</tbody>
</table>


<p>YAMLの記述は以下のような感じで行います</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hoge:
</span><span class='line'>  fuga: 'fugafuga'
</span><span class='line'>  test: 'test'</span></code></pre></td></tr></table></div></figure>


<p>使用する場合は、以下のようなコードで出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Settings.hoge[:fuga]
</span><span class='line'>Settings.hoge['fuga']
</span><span class='line'>Settings[:hoge][:fuga]</span></code></pre></td></tr></table></div></figure>


<p>他に、同じようなことをする有名なgemに、「settingslogic」があります。<br/>
以下の感想でsettingslogicはあまりつかわないです。</p>

<ul>
<li>一つのファイルで全て定義なのでファイルが肥大化しそう</li>
<li>クラス定義も作る必要があるので若干面倒(シンプルに使えない)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでSolrを使うときに気をつけること]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/03/23/ruby-solr/"/>
    <updated>2014-03-23T12:31:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/03/23/ruby-solr</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>タイトルは釣り臭が半端ないですねw</p>

<p>正確なことを言うと使用ライブラリは、<br/>
特性を理解の上で使いましょうということが言いたいだけです</p>

<h3>RubyでSolrを使う際のライブラリと言えば</h3>

<hr />

<p>大体、以下の２つになると思います</p>

<ul>
<li><a href="https://github.com/rsolr/rsolr">RSolr</a></li>
<li><a href="http://sunspot.github.io/">sunspot</a></li>
</ul>


<p>前者は、シンプルな機能に対して、後者は多機能になっています</p>

<h3>RSolr</h3>

<hr />

<p>ここら編は、ドキュメントを見たほうがよいですが自分の理解をダラっと</p>

<ul>
<li>接続やプロキシは、自分で設定できる(タイムアウトやリトライ設定も可能)</li>
<li>上記の為、(実装に応じるが)自由に検索先のスキーマを変更できる</li>
<li>検索クエリ(ファセットクエリ等も含む)は自前で実装しないといけない</li>
<li>rowsやstartなども自前で実装する必要がある</li>
<li>更新や削除(クエリベースやidベースで)もできる上にメソッドとして用意してある</li>
<li>responseはハッシュになっているので、自前で検索結果を整形(ActiveRecordオブジェクト等)する必要がある</li>
<li>ページングも対応している</li>
</ul>


<p>一声で言うと・・・</p>

<ul>
<li>クエリ構築は自前でやる必要がある</li>
<li>検索結果の整形も自前でやる必要がある</li>
<li>実装次第で、接続先のSolrも自由に変更することができる</li>
</ul>


<p>シンプルとか言っておきながら、結構ありますね<sup>^;;</sup></p>

<p>実際、使うとわかりますがかなりシンプルですよ</p>

<h3>sunspot</h3>

<hr />

<p>こちらもドキュメントを見たほうがよいのですが・・・</p>

<ul>
<li>検索クエリ(facetクエリなら)をDSLライクに記述できる</li>
<li>検索はdismaxで行ってくれる</li>
<li>検索クエリの結果はActiveRecordオブジェクトで取得できる</li>
<li>全文検索も直感的に記述できるうえにboost値も設定できる</li>
<li>ページングやグルーピングにも対応している</li>
<li>緯度、経度のデータも検索できる</li>
<li>検索ハイライトやスキーマデータの結合にも対応している</li>
<li>indexingもsunspotのみで完結することができる(削除もできます)</li>
<li>勿論、手動でクエリを構築することも可能</li>
<li>sunspot自体がRSolrに依存しているので、その気になればRSolrの機能も一応使うことができる</li>
</ul>


<p>これだけ、高機能なので当然の如く欠点もありまして・・・</p>

<ol>
<li>Solrのスキーマ定義がsunspotに依存した形になってしまうこと</li>
<li>indexするデータの一部もsunspotに依存した形になってしまうこと</li>
<li>Solrのフィールドに対応する形でActiveRecordのmodelクラスに定義が必要になること</li>
<li>sunspotが吐き出すクエリを理解しないと使いづらいこと</li>
<li>sunspot自体がmethod_missingを使った実装なのでコードが読みづらいこと・・・</li>
</ol>


<h3>日本語を扱う場合の注意点</h3>

<hr />

<p>基本的に、検索文字列の処理はSolr側のtokenizerで行われます。</p>

<p>ところがsunspotで日本語を使う場合だと、全文字列がエスケープされてしまいます。</p>

<p>例えば、「あいうえお」を検索したい場合だと「\あ\い\う\え\お」になってしまいます。</p>

<p>因みに、英語検索は問題ありません。</p>

<p>原因がどこにあるかと言うと、 <a href="https://github.com/sunspot/sunspot/blob/master/sunspot/lib/sunspot/query/restriction.rb">restriction.rb</a>にあります。</p>

<p>具体的な箇所は、このmodule内で使用されているescapeメソッドが原因です。<br/>
このescapeメソッドの実装は、<a href="https://github.com/rsolr/rsolr/blob/master/lib/rsolr/char.rb">char.rb</a>ですね。<br/>
つまり、RSolr側の不具合に近いでしょう。<br/>
また、RSolrを使って自前で実装するときもこのescapeメソッドを使用しないほうがいいです。</p>

<p>sunspotの依存gem側の問題なので、簡単に修正するのも難しいですね。</p>

<h3>対処方法は？</h3>

<hr />

<p>モンキーパッチを使えば、対処できました。</p>

<p>escapeメソッドを使っているところを全部上書き実装すればいいだけです。</p>

<p>Railsで使う場合だと、「config/initialize/sunspot.rb」みたいなのを作ればいいですね。<br/>
その中で、上記の処理を使えば対応可能です。</p>

<p>まぁ、根本解決ではないなと思いますが・・・</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacにSolrをインストールして動かしてみる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/03/01/install-solr-for-mac/"/>
    <updated>2014-03-01T20:18:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/03/01/install-solr-for-mac</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>Solrといえば、全文検索システムですね。</p>

<p>で、これをMacにインストールしてみようということやってみます。</p>

<p>とはいえ、普通にtarballダウンロードして解凍→java -jarだと面白くないですね。</p>

<p>折角、Homebrewを使ってるのでパッケージ管理の上で実施してみます。</p>

<h3>インストール</h3>

<hr />

<p>Homebrew使いであれば、お馴染みのコマンドでスンナリインストールされます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$brew install solr</span></code></pre></td></tr></table></div></figure>


<h3>Solrの起動</h3>

<hr />

<p>ぶっちゃけ、こいつが若干の癖ものだったりします。</p>

<p># 記事書くキッカケw</p>

<h5>一言で言うと、solrの設定(solr.xml)があるパスをフルパスで渡して上げる</h5>

<p>実はこれだけです、インストールしたSolrはサンプルが同梱してあるので起動してみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$solr /usr/local/Cellar/solr/4.7.0/libexec/example/example-DIH/solr/</span></code></pre></td></tr></table></div></figure>


<p>スキーマレスのサンプルなら</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$solr /usr/local/Cellar/solr/4.7.0/libexec/example/example-schemaless/solr/</span></code></pre></td></tr></table></div></figure>


<p>マルチコアのサンプルなら</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$solr /usr/local/Cellar/solr/4.7.0/libexec/example/multicore/</span></code></pre></td></tr></table></div></figure>


<p>正しく動いていれば、「http://localhost:8983/solr/」で管理画面にアクセスできます</p>

<p>自分でスキーマや設定を作成したい場合、このあたりの設定をコピー&amp;修正して同様の手順で実行してやれば良さそうですね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrewでバージョンを指定してパッケージをインストールする]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/02/23/homebrew-package-version/"/>
    <updated>2014-02-23T20:52:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/02/23/homebrew-package-version</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>某モバイルアプリでですね、要求しているビルド用のパッケージが<br/>
今、インストールされているものよりも古いバージョンでした。</p>

<p>そのままだと、ビルド出来ないのでバージョンを古くしようとしたのがキッカケです。。。</p>

<p># 某モバイルアプリはAndroidで、ビルドパッケージはGradleなんですけどw</p>

<h3>インストール(される|した)バージョンを確認</h3>

<hr />

<p>バージョンを確認します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$brew info gradle</span></code></pre></td></tr></table></div></figure>


<p>するとこんな感じで結果が出ます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gradle: stable 1.10
</span><span class='line'>http://www.gradle.org/
</span><span class='line'>/usr/local/Cellar/gradle/1.10 (143 files, 42M) *
</span><span class='line'>  Built from source
</span><span class='line'>From: https://github.com/Homebrew/homebrew/commits/master/Library/Formula/gradle.rb</span></code></pre></td></tr></table></div></figure>


<h3>インストール可能なバージョンを調べる</h3>

<hr />

<p>古いバージョンと言いつつも、バージョンがあるかどうかも調べないといけません。<br/>
という訳で、バージョンを調べます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$brew versions gradle</span></code></pre></td></tr></table></div></figure>


<p>すると、こんな感じでズラズラとバージョンと対応するgitのハッシュ値が出てきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  https://github.com/Homebrew/homebrew-versions
</span><span class='line'>1.10     git checkout 2b10422 Library/Formula/gradle.rb
</span><span class='line'>1.9      git checkout 5bab5e9 Library/Formula/gradle.rb
</span><span class='line'>1.8      git checkout 9214e60 Library/Formula/gradle.rb
</span><span class='line'>1.7      git checkout f826cc9 Library/Formula/gradle.rb
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>これで、一つ前のバージョンがあることが分かりますね。<br/>
このタイミングでパッケージは削除しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$brew remove gradle</span></code></pre></td></tr></table></div></figure>


<h3>古いバージョンをインストールするよ</h3>

<hr />

<p>ハッシュ値がわかったので、そのFormulaだけ前のバージョンに戻せばいいわけです。<br/>
戻した後にインストールすれば、古いバージョンのパッケージがインストールできるという・・・</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /usr/local/Library/Formula
</span><span class='line'>$ git checkout 5bab5e9 gradle.rb</span></code></pre></td></tr></table></div></figure>


<p>バージョンを確認してからのインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$brew info gradle
</span><span class='line'>gradle: stable 1.9, devel 1.10-rc-1
</span><span class='line'>http://www.gradle.org/
</span><span class='line'>Not installed
</span><span class='line'>From: https://github.com/Homebrew/homebrew/commits/master/Library/Formula/gradle.rb
</span><span class='line'>
</span><span class='line'>$brew install gradle</span></code></pre></td></tr></table></div></figure>


<p>と、簡単にできましたとさ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScriptのproxyでハマったこと]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/02/21/forget-js/"/>
    <updated>2014-02-21T00:26:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/02/21/forget-js</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>JavaScriptを書いてる訳ですが・・・<br/>
久しぶりに書いて、初歩的なことでアレ？ってなったので備忘録的にメモしておきます</p>

<h3>thisを自由に変更できるproxy関数を使う</h3>

<hr />

<p>大体、以下のような感じで、関数とコンテキスト(thisに設定するオブジェクト)を指定するわけです。</p>

<p>ですが、以下２つのコードで嵌まりました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var obj = {
</span><span class='line'>    doSomething : function() {
</span><span class='line'>        alert('test');
</span><span class='line'>    }
</span><span class='line'>};
</span><span class='line'>$('button#hoge').click($.proxy(obj.doSomething(), obj)); </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var obj = {
</span><span class='line'>    doSomething : function() {
</span><span class='line'>        alert('test');
</span><span class='line'>    }
</span><span class='line'>};
</span><span class='line'>$('button#hoge').click($.proxy(obj.doSomething, obj)); </span></code></pre></td></tr></table></div></figure>


<p>一見、違いがなさそうなのですが・・・<br/>
実は、実行タイミングに違いがあります 。<br/>
一番、上の例だとイベント登録時に実行してしまいますが、<br/>
下のものはイベント実行時に正しく実行してくれます。</p>

<p>こんな、しょうもないことで詰まりましたw</p>

<h3>即時関数</h3>

<hr />

<p>グローバルに変数割り当てなくてお得な感じ<br/>
あと、アレですね使い捨てできる(ぉぃ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(function() {
</span><span class='line'>  alert('test');
</span><span class='line'>})();</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[マージが起きたらさっさと解消しようという教訓]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/02/18/git-merge-conflict-memo/"/>
    <updated>2014-02-18T02:00:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/02/18/git-merge-conflict-memo</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>Gitを使って開発してるのですが・・・</p>

<p>複数人で1つのプロダクト開発を行ってたらコンフリクトは起こることはよく有ります</p>

<p>俗に言うマージコンフリクトですね</p>

<p>今回はそんなマージコンフリクトで起こった事を備忘録的に残します</p>

<h3>まず結論・・・</h3>

<hr />

<p>気づいた時点(Github,gitlab,stashとか)で、さっさとコンフリクトは解消しましょう</p>

<p>後にまとめて行うのは、無謀もいいとこです</p>

<p>1つ2つのコミット差分ならまだしも<br/>
10個のコミットが積み上げられ、かつその大半がコンフリクト起こすような状況だと直すのに苦労します</p>

<p># 解消に1時間かかりましたorz</p>

<p>なので、さっさと直してしまいましょう(他人の書いたコードまでは責任取れないよw)</p>

<h3>コンフリクト解消時に起こったこと</h3>

<hr />

<p>上記のことだけなら、反省だけで次回からは行わないようにすればいいだけの話です</p>

<p>ですが、コンフリクト解消時に奇妙なことが起こりました</p>

<p>以下のような状態でmasterのコードをブランチにとりこんだ時(実際はもう少しコンフリクト解消することがありました)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(master) : (起点) - [コンフリクト有(1)] - [コンフリクト有(2)] - [コンフリクト有(3)] - [ファイル移動] - [コンフリクト有(4)] - [コンフリクト無]
</span><span class='line'>              |  
</span><span class='line'>(branch) :   [A] - [B] - [C]</span></code></pre></td></tr></table></div></figure>


<p>コンフリクト有(2)のコンフリクトを解消した瞬間に、ブランチの状態(merge/CONFLICT)だけでも、マージの継続をすることが出来なくなりました</p>

<p>このコマンドだけが使えました</p>

<ul>
<li>continueは受け付け無い</li>
<li>abortとskipは受け付ける</li>
</ul>


<p>そのため、一度abort→再マージをしたのですが・・・<br/>
今度は、コンフリクト(3)で同じ現象。。。</p>

<p>諦めてskipをしましたorz<br/>
そうすると、マージが全てブランチに取り込まれました・・・(ファイル移動は取り込まれてないので別途実施)</p>

<p>こういう恐ろしい事態(マージがうまくいかない)があったので、気をつけようねという自戒と対処結果のメモでしたw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logbackで動的にログの出力先を変更する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/02/15/logback-synamic-log/"/>
    <updated>2014-02-15T21:42:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/02/15/logback-synamic-log</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>といっても大したことではなく、「同僚にできないの？」って質問されたことが発端です。</p>

<p>やったこと無かったけど、気になったので調べてみることにしました。</p>

<p>業務要件的にも、以下のことはありそうな感じかなーとは思いましたがｗ</p>

<ul>
<li>あるログはデフォルトの出力先に</li>
<li>致命的なエラーは、ログの出力方法はそのままで別の出力先に</li>
</ul>


<h3>やり方</h3>

<hr />

<p>割りと簡単に出来ました</p>

<p>手順としてはこんな感じ・・・</p>

<ol>
<li>Loggerを取得する</li>
<li>Loggerから変更対象の設定名でAppenderを取得する</li>
<li>AppenderをFileAppenderにキャストする(コレがミソ)</li>
<li>ログ出力を一時停止する</li>
<li>setFileメソッドで出力先ファイルを変更する</li>
<li>ログ出力を再開する</li>
</ol>


<p>コードにするとこんな感じかな(loggerの取得方法は色々変りそうだけど・・・)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Logger logger = LoggerFactory.getLogger(LogbackLogging.class);
</span><span class='line'>FileAppender&lt;ILoggingEvent&gt; fileAppender = (FileAppender&lt;ILoggingEvent&gt;) logbackLogger.getAppender("FILE");
</span><span class='line'>fileAppender.stop();
</span><span class='line'>fileAppender.setFile("your_new_log_file");
</span><span class='line'>fileAppender.start();</span></code></pre></td></tr></table></div></figure>


<p>実は、以下の２つのことで気が付きましたw</p>

<ul>
<li><a href="http://logback.qos.ch/apidocs/index.html">javadoc</a>(Appender<E>を実装してる)</li>
<li>getAppenderメソッドの戻り値(Appender<E>が返される)</li>
</ul>


<h3>感想</h3>

<hr />

<p>割りと簡単にできるんですねw</p>

<p>後はこの処理をラップしたようなクラス&amp;静的メソッドを作ると汎用的に使えていいのではないだろうか。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Volleyをビルドする]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/01/30/build-volley/"/>
    <updated>2014-01-30T00:36:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/01/30/build-volley</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>とある作業でAndroidの通信用ライブラリ「Volley」を使いたくなりました。<br/>
が、毎回使うたびにeclipseでーとかやりたくないわけです。<br/>
なので一度ビルドしてしまい、ライブラリ化してしまおうという魂胆です。</p>

<p># 毎回、ビルドどうやるんだっけな？ってAnt Task見たりするのも面倒というオチもあったりw</p>

<h3>ビルド前準備</h3>

<hr />

<p>Volleyにはビルド用のファイルとして、以下の2つがついています</p>

<ul>
<li>Ant</li>
<li>Gradle</li>
</ul>


<p>ですが、Gradleでビルドしようとした場合、エラーになります。<br/>
タスク一覧も見れませんでしたw</p>

<p>という訳でしたのでAntでやります。</p>

<p>その前に、VolleyはAndroid4.0がベースで作られているようなので、Android4.0のライブラリをインストールしておきます。</p>

<h3>ビルド</h3>

<hr />

<p>以下のコマンドでビルドします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ant jar</span></code></pre></td></tr></table></div></figure>


<p>成功すれば、「volley/bin/volley.jar」というファイルが出来てます。</p>

<h3>バージョン管理とか</h3>

<hr />

<p>ここからは完全に余談なのですが・・・</p>

<p>こういうライブラリを使う場合だと、バージョンが重要だったりしてきます。</p>

<p>では、どうすればいいかということなのですが、自分としてはgit submoduleを使うことをオススメします。</p>

<p>こうすることで、本体コード(volleyを使う側)のバージョンアップに合わせて、都度volleyのバージョンアップを図ればいいことになります。</p>

<p>こんな感じのディレクトリ構成とし、Volleyは都度上記コマンドでビルドする運用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Android
</span><span class='line'>  |
</span><span class='line'>  |- MainProject(自分が作成するアプリ)
</span><span class='line'>  |
</span><span class='line'>  |- Volley</span></code></pre></td></tr></table></div></figure>


<p>git submoduleのコマンドは以下です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git submodule add https://android.googlesource.com/platform/frameworks/volley Volley</span></code></pre></td></tr></table></div></figure>


<p>submodule化したものを更新する場合は、以下のコマンドです<br/>
# 初回の場合は、updateではなくinitをしてsubmodule化したファイル類を取得する必要があります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git submodule update</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
