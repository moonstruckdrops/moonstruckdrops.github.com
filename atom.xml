<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2013-11-25T01:05:16+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails(ActiveRecord)でBULK INSERTする方法]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/11/25/ar-bulk-insert/"/>
    <updated>2013-11-25T00:12:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/11/25/ar-bulk-insert</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>RailsでRake Taskなんか作ったときは、バッチ処理するようなことを書くと思います。<br/>
多分ですが・・・</p>

<p>この前、バルクインサートをすることがあったのでやり方を残しておきます。</p>

<p>因みに、普通にrubyスクリプトの中でも使うこともできると思います(これも多分w)</p>

<h3>やり方</h3>

<hr />

<p><a href="https://github.com/zdennis/activerecord-import/wiki">activerecord-import</a>というGemを使用します。</p>

<p>Gemfileに以下を追加すれば、Rake Taskで使用することができます。<br/>
ぶっちゃけRake Taskだけではなく、普通に使うこともできますが・・・</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'activerecord-import'</span></code></pre></td></tr></table></div></figure>


<p>利用できるデータベースは以下のものです。</p>

<ul>
<li>mysql(アダプターはmysql, mysql2の両方で使用可能)</li>
<li>postgresql</li>
<li>sqlite3</li>
</ul>


<h3>前提</h3>

<hr />

<p>かなり簡単です。</p>

<p>以下のようなモデルを用意したとします。</p>

<ul>
<li>モデル名:Hoge</li>
<li>カラム(主キー): id</li>
<li>カラム(名前): name</li>
<li>カラム(テキスト): text</li>
</ul>


<p>このモデルを10個まとめてバルクインサートしたいとします。</p>

<h3>やり方</h3>

<hr />

<p>かなり簡単です。。。</p>

<ol>
<li>バルクインサートしたい数だけモデルオブジェクトを格納したリストを用意する</li>
<li>該当のモデルのimportメソッドに1で作成したリストを渡す</li>
</ol>


<p>コードに起こすとこんな感じです。。。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hoge_list = []
</span><span class='line'>10.times do |i|
</span><span class='line'>  hoge_list &lt;&lt; Hoge.new(id: i, name: "hoge #{i}", text: "fugafuga")
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Hoge.import hoge_list</span></code></pre></td></tr></table></div></figure>


<p>実行するとこんな感じのSQLが一気に発行されます。。。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSERT INTO `hoge` (`id`,`name`,`text`,`created_at`,`updated_at`) VALUES (1,'hoge 1','fugafuga','2013-11-25 00:30:30','2013-11-25 00:30:30') ON DUPLICATE KEY UPDATE `messages`.`updated_at`=VALUES(`updated_at`)
</span><span class='line'>INSERT INTO `hoge` (`id`,`name`,`text`,`created_at`,`updated_at`) VALUES (2,'hoge 2','fugafuga','2013-11-25 00:30:30','2013-11-25 00:30:30') ON DUPLICATE KEY UPDATE `messages`.`updated_at`=VALUES(`updated_at`)</span></code></pre></td></tr></table></div></figure>


<p>因みに、以下のようなオプションがあります。
利用する場合、importメソッドの引数にハッシュで指定するだけです。</p>

<ul>
<li>「:on_duplicate_key_update」: ユニークキーが重複したカラムを更新したい場合に設定</li>
<li>「:timestamps」: falseを設定すると、自分でcreated_at,created_on,update_at,update_onを設定</li>
<li>「:validate」: falseを設定すると、モデル検証をスキップする(デフォルトはtrue)</li>
</ul>


<p>こんな感じで設定します。。。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>columns = [:id, :name, :text]
</span><span class='line'>Hoge.import hoge_list, :on_duplicate_key_update =&gt; columns, :timestamps =&gt; false, :validate =&gt; false</span></code></pre></td></tr></table></div></figure>


<h3>使用感</h3>

<hr />

<p>結構、問題ない感じで使えました。。。</p>

<p>自分が使用した感じだと10万件の更新に1分程度かかったので、<br/>
データが増えていくようなモデル(テーブル)に対して、多用するのは危険かなと思いました。</p>

<p>コードベースで、バルクインサートやバルクアップデートができるところがいいですね。<br/>
データをまとめて引っ張って→データ処理→まとめて更新なんかの使い方では便利かもｗ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecordメモ その2]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/11/19/ar-memo-2/"/>
    <updated>2013-11-19T00:13:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/11/19/ar-memo-2</id>
    <content type="html"><![CDATA[<p>前回書いたので、メモをまたまた残しておく</p>

<p>今回は、以下の３つを書き起こす。</p>

<ul>
<li>既存行の更新処理</li>
<li>データ保存系メソッドの違い</li>
<li>既存行の削除処理</li>
<li>コールバック</li>
</ul>


<h3>既存行の更新</h3>

<hr />

<p>1.更新する行を特定してから更新するやり方</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table = Tables.find(12)
</span><span class='line'>table.name = "column name"
</span><span class='line'>table.save
</span></code></pre></td></tr></table></div></figure>


<p>2.属性の値を変更してからモデルオブジェクトを取得するやり方</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table = Tables.find(12)
</span><span class='line'>table.update_attribute(:name, "column_name")</span></code></pre></td></tr></table></div></figure>


<p>上はシンボルを使って、特定の１カラムのみの更新の場合</p>

<p>まとめて行を更新する場合、ハッシュを使いますね。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table = Tables.find(12)
</span><span class='line'>table.update_attributes(name: "column_name", text: "ActiveRecord")</span></code></pre></td></tr></table></div></figure>


<p>因みに、Railsだとこんな感じで使ってますね。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def update
</span><span class='line'>  table = Tables.find(params[:id])
</span><span class='line'>  if table.update_attributes(params[:table])
</span><span class='line'>    redirect_to action: :index
</span><span class='line'>  else
</span><span class='line'>    redirect_to action: :edit
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>3.行の読み込みと更新を一度に行う方法</p>

<p>これは特に言うこともないですね。<br/>
指定した行を更新し、結果をDBに反映、そのままオブジェクトを取得します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table = Tables.update(12, name: "column_name", text: "ActiveRecord")</span></code></pre></td></tr></table></div></figure>


<p>因みに、update_allメソッドを使えばまとめて更新することができます。<br/>
第1引数にupdate文、第2引数にwhere句を指定という形でやります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table = Tbales.update_all("name = column_name, text = ActiveRecord", "id = 12")</span></code></pre></td></tr></table></div></figure>


<p>戻り値は、データベースのアダプターによって異なるようです。<br/>
大体、更新行数が返るようですが、Oracleだけ何故か違うみたいです。。。</p>

<h3>データ保存系メソッドの違い</h3>

<hr />

<table>
<thead>
<tr>
<th align="left">メソッド </th>
<th align="left"> 違い </th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">save    </td>
<td align="left">レコードが保存された場合、trueを返し、そうでなければnilを返す</td>
</tr>
<tr>
<td align="left">save!   </td>
<td align="left">保存が成功した、trueを返し、そうでなければ例外を発生</td>
</tr>
<tr>
<td align="left">create  </td>
<td align="left">保存に成功したかどうかは関係なく、ActiveRecordオブジェクトを返す。データが保存されたかどうかの確認は検証チェックが必要</td>
</tr>
<tr>
<td align="left">create! </td>
<td align="left">成功時は、ActiveRecordオブジェクトを返し、そうでなければ例外を発生</td>
</tr>
</tbody>
</table>


<p>なので、使い分けはこんな感じに行う</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if table.save
</span><span class='line'>  検証と保存に成功
</span><span class='line'>else
</span><span class='line'>  検証エラー
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>begin
</span><span class='line'>  table.save!
</span><span class='line'>rescue ActiveRecord::RecordInvalid =&gt; error
</span><span class='line'>  検証エラー
</span><span class='line'>rescue ActiveRecord::RecordNotSaved =&gt; error
</span><span class='line'>  保存に失敗(コールバックで保存が出来なかった)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>既存行の削除処理</h3>

<hr />

<p>これは２種類の方法があります。<br/>
１つ目、データベースを直接操作する感じのやり方</p>

<p>こんな感じで、id指定で削除できます。<br/>
idを格納した配列を指定することで、まとめて削除もできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Tables.delete(12)</span></code></pre></td></tr></table></div></figure>


<p>SQLのwhereを使ってまとめて削除する方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Tables.delete_all(["id = 12"])</span></code></pre></td></tr></table></div></figure>


<p>これもupdate_allメソッドと同じで削除した行数が返ってきます。</p>

<p>もう一つのやり方は、destroyメソッドを使う方法です。<br/>
こいつは、削除というよりもデータの凍結ですね。</p>

<p>特定の行のみ凍結</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Tables.destroy(12)</span></code></pre></td></tr></table></div></figure>


<p>まとめて凍結する方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Tables.destroy_all("name = ?", "column_name")</span></code></pre></td></tr></table></div></figure>


<p>因みにdeleteメソッドを使った場合、<br/>
ActiveRecordの検証メソッドが実行されないことに注意かも。</p>

<h3>コールバック順序</h3>

<hr />

<p>コールバックで独自に処理を入れたい場合ってあると思うので、ついでにメモしておく</p>

<p>新規レコードでmodel.saveを実行した場合、以下の順序でコールバックされる</p>

<ol>
<li>before_validation</li>
<li>検証処理</li>
<li>after_validation</li>
<li>before_save</li>
<li>before_create</li>
<li>挿入処理</li>
<li>after_create</li>
<li>after_save</li>
</ol>


<p>更新の場合だと以下になる</p>

<ol>
<li>before_validation</li>
<li>検証処理</li>
<li>after_validation</li>
<li>before_save</li>
<li>before_update</li>
<li>更新処理</li>
<li>after_update</li>
<li>after_save</li>
</ol>


<p>削除(model.destroy)だと、以下になる</p>

<ol>
<li>before_destroy</li>
<li>destroy処理</li>
<li>after_destory</li>
</ol>


<p>ここまでそれなりに書いたので、もうちょい参照系も書いておきたいなw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecordメモ]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/11/12/ar-memo/"/>
    <updated>2013-11-12T00:20:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/11/12/ar-memo</id>
    <content type="html"><![CDATA[<p>使ってるけど、意外と知らなかったのでメモ</p>

<h3>抽出方法は全部同じ</h3>

<hr />

<p>whereの条件指定の方法ですね。</p>

<p>以下の３つは、全て同じSQLを発行します</p>

<p>1.Hashで条件設定する方法(AR独自チックな感じで大体使う方法)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hoge.where(:title =&gt; "title", :id =&gt; 1)</span></code></pre></td></tr></table></div></figure>


<p>2.プレースホルダで地道にパラメータ設定する方法(どの言語でも通用する)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hoge.where("title = ? and id = ?", "title1", 1)</span></code></pre></td></tr></table></div></figure>


<p>3.シンボルで対応付けをわかりやすくする方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hoge.where("title = :title and id = :id", {:title =&gt; "title", :id =&gt;1})</span></code></pre></td></tr></table></div></figure>


<h3>抽出結果がなかったらレコードの新規作成をする</h3>

<hr />

<p>これ、一発でできるメソッドあったんですね。<br/>
知らなかった。。。</p>

<p>どうやらfirst_or_createというメソッドを使えばよいみたい。<br/>
で、ブロックを取ることができるので、ブロック内で挿入する値を自由に設定できる</p>

<p>以下のような感じで書くとできる模様。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hoge.where(:title =&gt; "title").first_or_create do |p|
</span><span class='line'>    p.body = "hogehoge"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>結局は裏で2回SQL発行してるだけなんですけどね。(selectとinsert)</p>

<p>と、まぁ色々とありますがこんなところで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EdTech Hackathonに行ってきた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/10/28/edtech-hackathon/"/>
    <updated>2013-10-28T23:44:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/10/28/edtech-hackathon</id>
    <content type="html"><![CDATA[<p>久しぶりにHackathonに行ってきた気がする。</p>

<p>成果は・・・</p>

<p>「これからのIT業界を支える未来のエンジニアを育成できました!!」</p>

<p>これだけだと、「Hackathonなのにコードの成果がなくないか？」<br/>
ってことになりかねないし何の事かさっぱり分からないと思うので当日の詳細を以下に載っけます。</p>

<h3>アイデア出し</h3>

<hr />

<p>通称、「Ideathon」なんだけども・・・<br/>
前日に人が集まらずだったので、チームとか作る内容もあんまりいい感じには決まらなかった。</p>

<p>例外は、自分を含めたチームぐらいでした。<br/>
一応、大雑把なアイデアを持っていたので、募集かけたらすんなりと決まりました。</p>

<p>チームメンバーというか役割は、以下の５人です。</p>

<ul>
<li>プログラム 自分</li>
<li>プログラム 大学生</li>
<li>デザイン + ディレクター 本職の方</li>
<li>素材、画像作成、プレゼン : 中学生</li>
</ul>


<p>こんな構成でした。今回は中学生がいるんですよ。中学生!!<br/>
最年少参加でした。。。</p>

<p>所謂、学生チームですね。</p>

<p># 自分がHackathonに初参加してた時よりもまだ若いのですよ。<br/>
# 時代は進むものです。</p>

<p>ディレクターとの合言葉は、「俺達、老害なんで彼らの成長を支えよう」ということでした(ぉぃ</p>

<p># 因みに、後で知ったことなのですが・・・<br/>
# チーム内で自分が一番最年長でした(> &lt;;)</p>

<p>プログラマー側の打ち合わせでは、以下のことを決めました。</p>

<ul>
<li>使用言語はJavaにする(大学生たっての希望)</li>
<li>フレームワークは、Seaser2(大学生が使用したことあるそうなので・・・)</li>
<li>サーバは、Tomcat7.x</li>
<li>DBはmysql 5.6.13</li>
<li>上記、開発環境の準備をしてくること</li>
</ul>


<p>SIer等でよくありがちな、Javaを使ったWebアプリ開発ですね。</p>

<p># 僕もいい大人(?)なので、希望は叶えてあげたいものです<br/>
# 主催者が、学生に対して、自分をJavaエンジニアとして学生に推薦したのもありますが・・・</p>

<h3>Hackathon当日の開始前</h3>

<hr />

<p>色々とドタバタしました。<br/>
手持ちで持ってきたモニターがディレクターさんのPCで使えないなどのハプニング。</p>

<p>元々のコンセプトのすり合わせを開始前のこの時点で話し合いました。</p>

<p>ハプニングの最中にディレクターさんと２人で本日のゴールを何処に落としこむかを話していました。</p>

<p># 学生さん達には秘密会議的にやってて申し訳なかった<br/>
# 実はこの時点で、ある程度本日の着地点(現実的に出来そうな範囲)の見積もりを立ててました。</p>

<h3>Hackathon当日の午前</h3>

<hr />

<p>開始と同時に、「こういう機能でこういう表示方法にしましょう」ということを<br/>
ディレクターさんとワイヤーフレームモデルを使って合意を取りました。</p>

<p># ここは勝手に進めて学生さんに申し訳なかった・・・。</p>

<p>デザイナーとして活躍してくれる中学生は、ディレクターさんに任せ、プログラマー側はプログラマー同士で作業をすすめることにしました。</p>

<p>プログラマー側では、大学生側の開発環境が出来ていなかったので、開発環境を構築することにしました。</p>

<p>tomcatのインストールやmysqlのインストール&amp;設定、eclipseの設定を教えながら進めました。</p>

<p>インストールの待ち時間の間、作成するものの以下の内容について説明してました。</p>

<ul>
<li>アプリケーションの説明</li>
<li>表示する画面の構成要素の説明&amp;簡単な構成案</li>
<li>DB設計</li>
</ul>


<p>この中で以下のついてどうやって見つければ良いかの説明を行いました。</p>

<ul>
<li>どうやればDB設計ができるか</li>
<li>画面の構成要素はどう決めればよいか</li>
<li>暗黙的な要件の見つけ方(画面に現れない&amp;前提としている内容等)</li>
</ul>


<p>そうこう説明しているうちに午前中が終了でお弁当タイムになりました。<br/>
唐揚げ弁当うまかったなー</p>

<h3>Hackathon当日の午後</h3>

<hr />

<p>午前中に開発環境の構築や設計周りの教示に費やしていたので、<br/>
当初のゴールまで難しいことが、この時点で判明。</p>

<p>ディレクターと話をして、「彼らのスキルアップというか育成に費やそう」ということにしました。</p>

<p># EdTechということで教育がテーマだからいいかーということでお互いに合意しました。</p>

<p>はじめは、自分で進めてみようということで、お互いの機能を実装することに専念しました。<br/>
自分の担当した機能は実装と簡単な動作試験まで完了することができました。</p>

<p># この間、１時間無いぐらい。</p>

<p>この後、終了時間３０分前までは、大学生につきっきりになり、以下のことをマンツーマンで教示しました。<br/>
所々、ペアプロも含んでいます。</p>

<ul>
<li>リーダブルコード的なこと(メソッド名の命名規則や付随すること諸々)</li>
<li>スコープの話と(自分の考える)ポリシー(publicにしたら何処からでも使われるので、javadoc書く等)</li>
<li>Seaser2の設計思想とMVC的な話</li>
<li>Seaser2の実装方法や設定の説明&amp;解説</li>
<li>コードの書き始めはどうしたらよいのか(逐次的に処理概要をTODOで書いてみるなどのやり方の話)</li>
<li>コードのリファクタリング等</li>
<li>eclipseのショートカットキーや設定全般</li>
</ul>


<p>ざっと覚えてるのは、この辺りだけどもっとなにか色々と偉そうに言ってたような気がする。。。</p>

<p>終了まで残り３０分のところで、自分が作った部分の機能とデザインをマージ作業しました。<br/>
マージ作業中は、大学生放置しましたけど、許して下さいm(<em> </em>)m</p>

<p>久しぶりにwebapp/WEB-INF周りを弄ったので、jsp含んでた場合リソースの扱いに注意すること忘れてトラブりました。</p>

<p># 今回の場合だと、「webapp」ディレクトリ直下に置かないと認識されませんでしたw</p>

<p>最後のプレゼンは、中学生が頑張ってくれました!!<br/>
自分には中々できないプレゼンや将来的にこういう機能もあればいいかもーみたいな案も考えてくれていました!!</p>

<h3>感想</h3>

<hr />

<p>久しぶりにいい刺激を受けました。<br/>
社内にいてもいい刺激を受けることが多いですが、外部のエンジニアとの交流もいいものです。<br/>
何よりものを作り上げるのは楽しいです。</p>

<p>今回のHackathonに関してはものを作るよりも、教育していたほうが長かったです。 <br/>
ですが、自分にも得るものがありましたし、復習の機会になりました。<br/>
大学生の彼が、自分の拙い説明で何かを得てくれれば自分も嬉しいと思います。</p>

<p># 自分が初めてHackathonに出た時のようにですが・・・</p>

<h3>Hackathonで構築した開発環境と簡単な設計メモ</h3>

<hr />

<p>以下に、説明に使用したメモを残します。<br/>
こいつを参考にするとTomcat7.x + Eclipse + Seaser2な開発環境は構築できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>★tomcatインストール
</span><span class='line'>$brew install tomcat
</span><span class='line'>
</span><span class='line'>1.ホームディレクトリの.bash_profileに以下を追加
</span><span class='line'>
</span><span class='line'>export CATALINA_HOME='/usr/local/Cellar/tomcat/7.0.42/libexec'
</span><span class='line'>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_25.jdk/Contents/Home
</span><span class='line'>PATH=${JAVA_HOME}/bin:$PATH
</span><span class='line'>PATH=$PATH:${CATALINA_HOME}
</span><span class='line'>
</span><span class='line'>2.ターミナル上で$source .bash_profileを実行
</span><span class='line'>3.tomcat起動「/usr/local/Cellar/tomcat/7.0.42/libexec/bin/startup.sh」
</span><span class='line'>4.tomcat停止「/usr/local/Cellar/tomcat/7.0.42/libexec/bin/shutdown.sh」
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Homebrewが無ければ、インストールして下さい
</span><span class='line'>使用しているShell(bash以外)が違う場合は適宜読み替えて下さい
</span><span class='line'>
</span><span class='line'>★eclipse
</span><span class='line'>1.「http://www.eclipsetotale.com/tomcatPlugin.html」から最新のプラグインをダウンロード
</span><span class='line'>2.ダウンロードしたzipを解答して、できたディレクトリごと eclipseのディレクトリの下に移動
</span><span class='line'>3.eclipseを再起動
</span><span class='line'>4.設定→tomcat
</span><span class='line'>5.tomcatのバージョンを7に変更
</span><span class='line'>6.HOMEを/usr/local/Cellar/tomcat/7.0.42/libexec
</span><span class='line'>7.適用を押す
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>これでeclipse上からtomcat操作ができる
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>★mysql
</span><span class='line'>brew install mysql
</span><span class='line'>
</span><span class='line'>DBの保存先とキャッシュの保存場所の設定
</span><span class='line'>mysql_install_db --verbose --user=`whoami` --basedir="$(brew --prefix mysql)" --datadir=/usr/local/var/mysql --tmpdir=/tmp
</span><span class='line'>
</span><span class='line'>rootパスワードの設定
</span><span class='line'>mysql.server start
</span><span class='line'>mysqladmin -u root password '好きなパスワード'
</span><span class='line'>mysql -uroot -p
</span><span class='line'>
</span><span class='line'>何でもできるユーザーの追加(本当はここはしっかりと考える必要あるけど今回はハッカソンなのでパス)
</span><span class='line'>GRANT ALL PRIVILEGES ON *.* TO edtech@localhost IDENTIFIED BY 'edtechhackathon' WITH GRANT OPTION;
</span><span class='line'>GRANT ALL PRIVILEGES ON *.* TO edtech@'%' IDENTIFIED BY 'edtechhackathon' WITH GRANT OPTION;
</span><span class='line'>mysql -uedtech -pedtechhackathon
</span><span class='line'>
</span><span class='line'>データベースの作成
</span><span class='line'>create database edtechhackathon;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>これで開発をします。
</span><span class='line'>ユーザー名:edtech
</span><span class='line'>パスワード:edtechhackathon
</span><span class='line'>
</span><span class='line'>jdbcドライバはこんな感じかな
</span><span class='line'>jdbc:mysql://localhost:3306/edtechhackathon
</span><span class='line'>接続ユーザー:edtech
</span><span class='line'>接続パスワード:edtechhackathon
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>★Doltengのインストール(一応)
</span><span class='line'>したがって行う
</span><span class='line'>http://dolteng.sandbox.seasar.org/
</span><span class='line'>→DBからエンティティを自動生成するので使う
</span><span class='line'>
</span><span class='line'>★eclipsemarket placeからインストール
</span><span class='line'>プロパティエディタのインストール
</span><span class='line'>maven integrationプラグイン
</span><span class='line'>
</span><span class='line'>★Devloder
</span><span class='line'>mkdir -p /usr/local/Cellar/tomcat/7.0.42/libexec/server/lib
</span><span class='line'>$cp /Applications/eclipse/plugins/com.sysdeo.eclipse.tomcat_3.3.0/DevloaderTomcat7.jar /usr/local/Cellar/tomcat/7.0.42/libexec/lib/
</span><span class='line'>
</span><span class='line'>★mysql追加
</span><span class='line'>mysql.server stop
</span><span class='line'>cp /usr/local/Cellar/mysql/5.6.13/my.cnf /usr/local/Cellar/mysql/5.6.13/my.cnf.20131026
</span><span class='line'>「port = 3306」を記述
</span><span class='line'>mysql.server start
</span><span class='line'>
</span><span class='line'>★確認用データ投入
</span><span class='line'>mysql -uedtech -p -hlocalhost edtechhackathon
</span><span class='line'>CREATE TABLE sample(id int auto_increment primary key, data varchar(255) NOT NULL UNIQUE, created_at datetime NOT NULL) ENGINE=InnoDB; 
</span><span class='line'>insert into sample(data, created_at) values('test', '2013-10-26');
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>★usersテーブル
</span><span class='line'>入力項目は、以下のもの
</span><span class='line'>・名前
</span><span class='line'>・メール
</span><span class='line'>・パスワード(アプリ側でBlowfish形式で暗号化しておくこと、暗号化の鍵はedtechとパスワード入力値とする。初期でinsertする内容は「test」にする)、
</span><span class='line'>・Roleは1(教師)、0(親)、2(管理者)で表現(アプリ側で数値を見てRoleの判断する)
</span><span class='line'>
</span><span class='line'>create table users( user_id int auto_increment primary key, name varchar(255) not null, mail varchar(255) not null, password varchar(255) not null, role int not null) ENGINE=InnoDB; 
</span><span class='line'>
</span><span class='line'>★fixture
</span><span class='line'>insert into users(name, mail, password, role) values('hoge', 'hogeATgmail.com', '0791e4e0ade0f161', '2');
</span><span class='line'>insert into users(name, mail, password, role) values('fuga', 'fugaAtgmail.com', '0791e4e0ade0f161', '1');
</span><span class='line'>insert into users(name, mail, password, role) values('hogehoge', 'hogehogeAtgmail.com', '0791e4e0ade0f161', '0');</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octpressで記事を一度公開停止→再公開をしたい場合の方法]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/10/19/fix-octpress-page/"/>
    <updated>2013-10-19T10:24:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/10/19/fix-octpress-page</id>
    <content type="html"><![CDATA[<p>何個か前の記事を加筆修正したときの手順をまとめます。<br/>
但し、このやり方はpush内容を残したくないときのやり方に加えて、<br/>
ハッシュ値を知ってれば参照できてしまうという点があります。<br/>
(公開されているページは修正されたものが表示されます)</p>

<h3>記事の公開停止方法</h3>

<hr />

<p>以下の順序で変更を行います</p>

<ol>
<li>octpressでgithubにpushしているディレクトリに移動する</li>
<li>gitコマンドで記事をpushしたコミットまで遡って、 変更取り消しを行う</li>
</ol>


<p>それぞれコマンドは以下のようになります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$cd ~/octpress/_deploy
</span><span class='line'>$git push -f origin master:HEAD^^</span></code></pre></td></tr></table></div></figure>


<p>これで、２つ前の記事公開の状態まで変更することができました。
同じ方法をとれば、記事の順序を入れ替え(削除)した状態で公開することも出来ると思います。<br/>
(git rebase後にpush origin masterなどすればです)</p>

<h3>再公開方法</h3>

<hr />

<p>普通に記事を生成して再度サーバにpushして下さい。<br/>
ファイルの日付や記事の日付を修正していなければ、
公開停止前と同じURLになります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[packerを使用して、VirtualMachineで動くVagrant用のBoxファイルを作成した]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/10/16/packer-basic/"/>
    <updated>2013-10-16T00:23:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/10/16/packer-basic</id>
    <content type="html"><![CDATA[<p>昨日(日付の上では、一昨日)にあったGo Conference 2013 autumnに行ってきました。</p>

<p>野良Hackathonがあったので、久々のGo慣らしも兼ねてpackerで１つ環境用意してやるかといった感じでやってました。<br/>
勿論、イメージ作ってる待ち時間の間にpackerのソースも読んでました<br/>
正直、ドキュメント読んで(?)ってなったところもあったので読んだとかそんな感じです。</p>

<p>Google I/O以来に会った<a href="https://twitter.com/ymotongpoo">@ymotongpoo</a>さんにLTやらね？って誘われた。<br/>
然しながら、Goのネタが今手元に無かったので、LT時刻までにpackerで環境用意できたらやるって言ったけど、出来なかったのでLT諦めた。<br/>
後で、すごい誤った。(完成したのは、LT終了して暫くしてからだった)<br/>
<a href="https://twitter.com/ymotongpoo">@ymotongpoo</a>さん、もし見てたら次回のGoConではLTやれるように準備しておきます。</p>

<p>という訳で、代わり(?)に表題の内容をやります。</p>

<h2>最終ゴール</h2>

<hr />

<p>以下のコマンドでVirtualBox上で動作するCentOS6.4(64bit)が起動してログインできるようにする</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$vagrant up</span></code></pre></td></tr></table></div></figure>


<p>但し、Vagrant側では、特にアプリケーションのインストールを実施せず、packer側で以下の２点を満たすこと</p>

<ul>
<li>最小インストールしたパッケージを全て最新化すること</li>
<li>Gitをインストールすること</li>
</ul>


<h2>前提</h2>

<hr />

<p>前提がないとお話にならないので、以下が入ってることにします。</p>

<ul>
<li>Vagrant 1.3.4</li>
<li>VirtualBox 4.2.16</li>
<li>Go 1.1.2</li>
</ul>


<p>こいつらが入ってない場合は、入れて下さい。</p>

<p>あと、実行環境はMacでやってますが、Linuxも似たような感じでできると思います。<br/>
Windowsは知らないですが多分できるんじゃないかなぁと思います。</p>

<h3>packerのインストール</h3>

<hr />

<p>packerをインストールします。<br/>
公式の手順に従えば1発でインストールできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$brew tap homebrew/binary
</span><span class='line'>$brew install packer</span></code></pre></td></tr></table></div></figure>


<h3>OSインストール用のkickstartファイルを用意する</h3>

<hr />

<p>kickstartは、RHEL系(CentOSなど)OS のインストール&amp;セットアップが自動化できることを指します。<br/>
で、一応OSインストールした時の構成がOS側で記録されていまして、「/root/anaconda-ks.cfg」がkickstartファイルになります。<br/>
他にも、system-config-kickstart.noarchをインストールすることでGUIで設定ファイルを用意できるようになっています。</p>

<p>以下のような感じで最小構成インストールファイルを用意します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>install
</span><span class='line'>cdrom
</span><span class='line'>lang en_US.UTF-8
</span><span class='line'>keyboard us
</span><span class='line'>network --bootproto=dhcp
</span><span class='line'>rootpw --iscrypted $1$FB.fOroc$b2.YcN30BjrYxlUbECUxO1
</span><span class='line'>firewall --enabled --service=ssh
</span><span class='line'>authconfig --enableshadow --passalgo=sha512
</span><span class='line'>selinux --disabled
</span><span class='line'>timezone UTC
</span><span class='line'>bootloader --location=mbr
</span><span class='line'>
</span><span class='line'>text
</span><span class='line'>skipx
</span><span class='line'>zerombr
</span><span class='line'>
</span><span class='line'>clearpart --all --initlabel
</span><span class='line'>autopart
</span><span class='line'>
</span><span class='line'>auth  --useshadow  --enablemd5
</span><span class='line'>firstboot --disabled
</span><span class='line'>reboot
</span><span class='line'>
</span><span class='line'>%packages --nobase
</span><span class='line'>@core
</span><span class='line'>%end
</span><span class='line'>
</span><span class='line'>%post
</span><span class='line'>/usr/bin/yum -y install sudo
</span><span class='line'>/usr/sbin/groupadd moonstruckdrops
</span><span class='line'>/usr/sbin/useradd moonstruckdrops -g moonstruckdrops -G wheel
</span><span class='line'>echo "moonstruckdrops"|passwd --stdin moonstruckdrops
</span><span class='line'>echo "moonstruckdrops        ALL=(ALL)       NOPASSWD: ALL" &gt;&gt; /etc/sudoers.d/moonstruckdrops
</span><span class='line'>chmod 0440 /etc/sudoers.d/moonstruckdrops
</span><span class='line'>%end</span></code></pre></td></tr></table></div></figure>


<p>最小インストールを実施した後にsudoをインストールし、ログインユーザーを新規に追加しています。</p>

<p>因みに、rootパスワードは以下のコマンドで生成します。<br/>
生成された文字列をrootpwに記述します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$openssl passwd -1</span></code></pre></td></tr></table></div></figure>


<h3>jsonファイルを作成する</h3>

<hr />

<p>細かい解説は抜きにして、以下のような感じで作成します。<br/>
大体、ドキュメントに書いてあるので直感的に分かるかと思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "builders": [
</span><span class='line'>        {
</span><span class='line'>            "type": "virtualbox",
</span><span class='line'>            "vm_name": "centos_box",
</span><span class='line'>            "guest_os_type": "RedHat_64",
</span><span class='line'>            "disk_size": "20000",
</span><span class='line'>            "format": "ovf",
</span><span class='line'>            "hard_drive_interface":"sata",
</span><span class='line'>            "boot_wait": "5s",
</span><span class='line'>            "iso_url": "http://ftp.iij.ad.jp/pub/linux/centos/6.4/isos/x86_64/CentOS-6.4-x86_64-minimal.iso",
</span><span class='line'>            "iso_checksum_type": "md5",
</span><span class='line'>            "iso_checksum": "4a5fa01c81cc300f4729136e28ebe600",
</span><span class='line'>            "ssh_username":"root",
</span><span class='line'>            "ssh_password":"vagrant",
</span><span class='line'>            "ssh_port": 22,
</span><span class='line'>            "shutdown_command": "shutdown -h now",
</span><span class='line'>            "guest_additions_path": "VBoxGuestAdditions_.iso",
</span><span class='line'>            "virtualbox_version_file": ".vbox_version",
</span><span class='line'>            "vboxmanage":[
</span><span class='line'>                ["modifyvm", "", "--memory", "1024"],
</span><span class='line'>                ["modifyvm", "", "--cpus", "2"]
</span><span class='line'>            ],
</span><span class='line'>            "http_directory": "./builders/",
</span><span class='line'>            "boot_command": [
</span><span class='line'>                "&lt;tab&gt; text ks=http://:/ks.cfg&lt;enter&gt;&lt;wait&gt;"
</span><span class='line'>            ]
</span><span class='line'>        }
</span><span class='line'>    ],
</span><span class='line'>    "provisioners": [{
</span><span class='line'>        "type": "shell",
</span><span class='line'>        "inline": [
</span><span class='line'>            "sleep 30",
</span><span class='line'>            "sudo yum -y update",
</span><span class='line'>            "sudo yum -y install git"
</span><span class='line'>            ]
</span><span class='line'>    }],
</span><span class='line'>    "post-processors": [{
</span><span class='line'>        "type": "vagrant",
</span><span class='line'>        "output": "centos.box"
</span><span class='line'>    }]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>ビルドしてイメージを作成する</h3>

<hr />

<h5>作成したjsonに誤りがないことを確認する</h5>

<p>以下のコマンドを使用して確認する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$packer validate</span></code></pre></td></tr></table></div></figure>


<p>以下の実行結果になれば、エラーなく記述できている</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Template validated successfully.</span></code></pre></td></tr></table></div></figure>


<p>エラーだと、こんな感じでどこが誤っているか教えてくれる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Failed to parse template: Error in line 14, char 8: invalid character '"' after object key:value pair</span></code></pre></td></tr></table></div></figure>


<h5>ビルドを行う</h5>

<p>うまくいけば、期待した結果の仮想マシンができている</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$packer build -only=virtualbox centos.json</span></code></pre></td></tr></table></div></figure>


<h3>vagrantを使ってインストールしたOSを起動する</h3>

<hr />

<p>やることは非常に簡単です。</p>

<p>まず、初期化します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$vagrant init</span></code></pre></td></tr></table></div></figure>


<p>vagrantの設定ファイルを編集します。</p>

<ul>
<li>「config.vm.box_url = &#8220;your_boxfile_path&#8221;」に生成したファイルのパスを記述</li>
<li>「vb.gui = true」 を有効化(コメント削除)</li>
</ul>


<p>最後に起動します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$vagrant up</span></code></pre></td></tr></table></div></figure>


<p>うまくいけば、最終ゴールの内容で起動します。</p>

<h3>嵌ったビルドエラー</h3>

<hr />

<p>ビルドを行うと以下のようなビルドエラーに遭遇します。<br/>
エラーになると、以下のようなエラーになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==&gt; virtualbox: Waiting for SSH to become available...
</span><span class='line'>==&gt; virtualbox: Timeout waiting for SSH.
</span><span class='line'>==&gt; virtualbox: Unregistering and deleting virtual machine...
</span><span class='line'>==&gt; virtualbox: Deleting output directory...
</span><span class='line'>Build 'virtualbox' errored: Build was halted.</span></code></pre></td></tr></table></div></figure>


<p>解決方法ですが、「&#8221;ssh_wait_timeout&#8221;」の値を長めに設定する、もしくはjsonに記述しない(デフォルトは20min設定のため)こと<br/>
少し考えれば理解できた話なんですが、そもそもこのsshはどこで使用するかというとOSインストール完了後、即ちprovisionersで利用します。<br/>
そのため、インストールしたOSに接続するためsshが必要になるということです。(ゴールの場合だと、updateとgitインストール)<br/>
こういうことから、OSインストールが終わるまでssh接続できないからsshがタイムアウトしていたということです。</p>

<p>そもそも、公式のドキュメントに「&#8221;ssh_wait_timeout&#8221;:&#8221;30s&#8221;」と記述してあり、sshがどこで使われるのか言及していないことも嵌る原因だと思います。</p>

<h3>感想というか思うところ</h3>

<hr />

<p>ドキュメントもかなり充実してるんで、BOXファイルを作成するまでは割りとすんなりいけるかなぁと思います。<br/>
一部、嵌まりどころもありますが・・・。</p>

<p>一方で、仕組み上仕方ない部分もありますが、kickstartやその他OS自動インストールの知識がないと使いづらい印象を受けました。<br/>
尤も、こういうツールに手を出す人は、知識持ちの人かもしれませんが・・・</p>

<p>「packer + Vagrant + Chef」を組み合わせれば、かなりプラットフォーム及び開発環境系の自動化ができるなぁと思いました。</p>

<p>しかし、これがGoで作られているのがすごいよなぁ・・・。<br/>
Goマジイケてると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SIerを退職しました]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/09/08/retire-sier/"/>
    <updated>2013-09-08T00:14:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/09/08/retire-sier</id>
    <content type="html"><![CDATA[<h3>あなた誰？</h3>

<hr />

<p><a href="https://twitter.com/kurobara">@kurobara</a>と言います。<br/>
SIerとして勤めていました。<br/>
AppEngineやAndroid、サーバサイド(インフラ込)なことをしているエンジニアです。<br/>
RubyやGoとかが好きです。<br/>
勉強会だとYokohama.rbやKyotoGDGとかによく出没しています。<br/>
その他、気が向いた(その場で触ってる技術)勉強会に行ったりしています。</p>

<h3>はじめに</h3>

<hr />

<p>2013年8月31日付けで、新卒で入社した会社を退職しました。<br/>
2010年の入社から数えて3年半、社会人としてのマナーや基礎知識、技術系知識を教えて頂けました。<br/>
お世話になった皆様、本当にありがとうございました。</p>

<p>退職理由は、言語化しづらい感じがするのでダラダラとこれまでのことを書きます。<br/>
正直、何でなの？と思われることかもしれないです。<br/>
普通のことかもしれませんが、ジレンマに感じる人もいた<br/>
ということだけ理解していただける感じでお願いします。<br/>
決して、憂さ晴らしという形で書いているわけではありません。<br/>
ご理解とご了承をお願いします。</p>

<h3>出来事と心境</h3>

<hr />

<p>ツラツラとあったことや覚えている範囲で当時思ってたことを書き下して行きます。</p>

<h5>大学時代</h5>

<hr />

<p>サーバサイドアプリ(学生向け+自分用に簡単なWebサービス)を作っていました。<br/>
プログラムを書くことは好きでしたが、<br/>
ベンチャー企業とかでアルバイトをしているわけではありませんでした。<br/>
(恐らく、当時のプログラムで叩きだした実績のお陰で入社できたのだと思います。)</p>

<h6>内定まで</h6>

<p>当時(今も仕事上変わりませんが)の自分ですがjavaでバリバリ書いてました。<br/>
当時の私は、フレームワーク「Wicket」を使ってサーバサイドアプリを書いていました。<br/>
こんな経緯もあったので、以下の理由で内定を承諾したと思います。</p>

<ul>
<li>Javaに強い方々(<a href="https://twitter.com/uehaj">@uehaj</a>,<a href="https://twitter.com/nobeans">@nobeans</a>)がいるらしいので、自分もその人と同じようにできるかもしれない</li>
<li>なんだかんだで、会社がいい(NTTグループなので)から安定している生活ができるかもしれない</li>
<li>(当時?)Wicket使いの人(<a href="https://twitter.com/yamkazu">@yamkazu</a>)もいるから、wicket使ったりでなんか色々できるんじゃね？</li>
<li>技術的なことができるんじゃないか</li>
</ul>


<p>とか考えていたと思います。<br/>
よくも悪くも生活安定第一の志向を持った普通の就職活生でした。<br/>
(当時は、売り手市場だったのが、リーマンショックの影響が出ていた時期でもありました)</p>

<h6>内定後</h6>

<p>Kyoto GTUG(今のKyotoGDG)で開催されたGoogle AppEngineのハッカソンに参加しました。<br/>
卒論テーマにも関係もあるので・・・という軽い気持ちの参加だったと思います。<br/>
(単純にAppEngineの情報が欲しいという側面もあったと思います。)</p>

<p>今も関東でお付き合いがある「<a href="https://twitter.com/dddaisuke">@dddaisuke</a>」さん、「<a href="https://twitter.com/fushiroyama">@fushiroyama</a>」さんに出会いました。<br/>
ハッカソン後の懇親会でじっくり話す機会があり、そこで何か色々話したと思います。<br/>
(大学生であることややってることとか将来的な話とか・・・)</p>

<p>お二人にとって取り留めのないことだと思いますが、当時の自分の考えに衝撃があったと思ってます。<br/>
# 当時の自分(大学生にしては技術力高いなど)にとって褒められたとかもあったはず。。。</p>

<p>なので、お二人とハッカソンが無ければ今の自分はいないと思います。<br/>
(人生の転機の出会いかもしれないですね。)</p>

<p>#因みに、ハッカソンの結果は二位でした。</p>

<p>以下のこともあったので、余計に自分の考えや行動もギークよりに変わってきました。</p>

<ul>
<li>KyotoGTUGのハッカソンの結果が良かったこと</li>
<li>ハッカソン後にあったKyoto GTUGのイベント(AndroidハッカソンやOSC Kansai)で色々やらせていただいたこと</li>
<li>関東の勉強会への参加(ここで出会った<a href="https://twitter.com/shin1ogawa">@shin1ogawa</a>さんに後々まで覚えられてたw)</li>
</ul>


<h5>入社してから</h5>

<hr />

<p>さて、入社してからなのですが様々なことを学ばせて頂きました。<br/>
そこで、技術面と仕事面という２つの面で書きたいと思います。</p>

<h6>技術面</h6>

<p>今思うとですが、主軸となる技術とそれ以外の技術という形の方針だったのかなぁと思います。</p>

<ul>
<li>主軸:AndroidとAndroidで活用している周辺技術</li>
<li>それ以外:Linux,Web系(サーバサイド)、その他ツール類</li>
</ul>


<p>大きく分けるとこんな感じでしょうか・・・。</p>

<p>幸いなことに、他の同期と比較してプログラムはさせて頂いたほうだと思います。<br/>
特にAndroidに関しては、プロダクションレベル(一般公開しても恥ずかしくないレベル)のものを実装できました。<br/>
<a href="https://twitter.com/korodroid">@korodroid</a>さん,<a href="https://twitter.com/sumio_tym">@sumio_tym</a>さん、どうもありがとうございました。</p>

<p>また、時には意見の衝突も行いながらも寛大な心で受け入れて頂いた皆さんありがとうございました。</p>

<p>あとは、社内の技術勉強会でも数回(1回はメイン!!)発表させて頂けたこともステップアップに繋がったと思います。<br/>
<a href="https://twitter.com/suzukima">@suzukima</a>さん、<a href="https://twitter.com/yamkazu">@yamkazu</a>さん、ありがとうございました。</p>

<p>さて、ここまで良かった話なのですがどうにもしっくりこなかったところになります。</p>

<p>何かというと、「Android周辺技術しか」できていないことです。</p>

<p>これが自分にとって一番キツイ点でした。(人によってはハッピーかもしれませんが)</p>

<p>上記にも書きましたが、元々web系、それもサーバサイド技術まわりを中心にやって来ました。<br/>
その為、自分としては以下のような思いがありました。</p>

<ul>
<li>サーバサイド周り中心の技術に強くなりたい</li>
<li>サーバサイド周りをメインでやっていきたい</li>
</ul>


<h6>仕事面</h6>

<p>｢製造工程｣をメインに担当し､SEという肩書きながらプログラミングをかなりさせていただきました。<br/>
加えて、中堅(大手かも)SIerで実施する工程は大体をやらせて頂けたと思います。。。<br/>
世間一般に｢SIer(特に元請け)の人間は技術力がない｣という様な事が言われていますが､<br/>
幸いにも自分が配属された部署には技術に明るい人(<a href="https://twitter.com/nobeans">@nobeans</a>さん,<a href="https://twitter.com/sumio_tym">@sumio_tym</a>さん,<a href="https://twitter.com/korodroid">@korodroid</a>さん)が多く学ぶところは大きかったです。</p>

<p>2年目からその方々との会う機会が減りましたが・・・</p>

<p>また、理解度が高かった上司と先輩も良かったことではないかと思っています。</p>

<p>あまり声を大きくしたくはないですが、所謂炎上状態のPJも経験しました・・・<br/>
辛い中でも色々出来たので、今ではいい思い出です。</p>

<p>さて、経験の話以外に常々感じていたことピックアップして残したいと思います。<br/>
願わくば、こういうことを思うような人が出なければと思います・・・</p>

<ul>
<li>仕事をしている人達が、｢楽しくなさそうしている人が多いな｣と感じた(ギャップに近いところ)</li>
<li>「政治的な理由」で制限が多くなってしまうこと</li>
<li>後が大変なことが多々あったりしたこと</li>
<li>資料を説明するための資料をつくること</li>
</ul>


<p>思っていたことに加えて何よりも辛かったのは、時間がめちゃくちゃに減ったということです。</p>

<p>このままだと技術者として取り残されてしまうのではないかという焦りが出てきましたし、<br/>
事実、取り残され始めたという形容し難い感覚を感じていました。</p>

<h6>最終的に・・・</h6>

<p>キッカケとなったことは、以下のものです。。。</p>

<ul>
<li>他のエンジニアと交流し、自分が何をしたかったのか考えなおしたこと</li>
<li>GoogleI/Oに参加し、様々な国のエンジニアと話をし交流してきたこと</li>
<li>「<a href="https://twitter.com/dddaisuke">@dddaisuke</a>」さん、「<a href="https://twitter.com/fushiroyama">@fushiroyama</a>」さんと飲んだこと(これまでのことを話ました)</li>
</ul>


<p># GoogleI/Oで世界中のエンジニアに色々言われました(- -;)<br/>
# 自分や自分の持つ能力を詳しく知ってるエンジニアは言うことが鋭いですね<sup>^;;</sup></p>

<p>言われるまでも無く、自分としても思うところがあったのは事実です。<br/>
進むべきキャリアもどうしようかと上司や周りのエンジニアに相談もしていました。</p>

<p>上記の思うところやキッカケで起こった内容をじっくり考え直してみたら、<br/>
自分にとって最良の道は、外に出たほうが良いだろうと考えました。</p>

<p># 最終(寧ろそこからが大変ですが)的な目標も到達するためにもというところもありました。</p>

<h3>最後に</h3>

<hr />

<p>SEとしての生活は、必ずしも良かったことばかりとは言い難かったです。<br/>
ですが、ここで学んだことは後々、自分にとってプラスになると思っています。</p>

<p>周りの皆様(同期含む)からの期待(これから支えていって欲しいという)を感じる中で<br/>
このようなことになってしまい申し訳ありませんでした。</p>

<p>特に、自分を育成して頂きました「<a href="https://twitter.com/sumio_tym">@sumio_tym</a>」,「<a href="https://twitter.com/korodroid">@korodroid</a>」のお二人に大変感謝をしております。</p>

<p>選択した道に後悔が無い様、自分の信じた道を進んで行きたいと思います｡</p>

<p>最後になりましたが関係者の皆様､<br/>
今まで本当にありがとうございました｡</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTerm2のMetaキーを変更する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/08/25/iterm-meta-key/"/>
    <updated>2013-08-25T13:11:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/08/25/iterm-meta-key</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>MetaキーはEmacsライクのように使いたい人です。<br/>
変更と書けば物凄く大げさな内容です。</p>

<h3>変更方法</h3>

<hr />

<p>iTerm2の環境設定で変更します。</p>

<ol>
<li>Profiles</li>
<li>Left option key acts asで+Escを選択</li>
<li>Right option key acts asで+Escを選択</li>
<li>閉じる</li>
</ol>


<p>これだけ。<br/>
これで、optionキーがMetaキーとして動作します。</p>

<h3>他の方法は？</h3>

<hr />

<p>方法としては幾らでもあって思いつくだけでもこんだけですね。</p>

<ol>
<li>Keyremap4macbookを使って変更する</li>
<li>inputrcファイルを作成する</li>
</ol>


<p>神保町でお安くOreiiy本(入門bash)をゲットしたので<br/>
ちょっと気になることとかやってるうちに小ネタが出ましたw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSHで複数の鍵を管理する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/08/22/ssh-config-setting/"/>
    <updated>2013-08-22T21:29:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/08/22/ssh-config-setting</id>
    <content type="html"><![CDATA[<p>SSHで鍵やユーザ名を複数のホストで使い分けないといけないときは結構面倒です。
ホスト毎の設定は「~/.ssh/config」で設定できます。</p>

<h3>管理方法</h3>

<hr />

<p>以下の方法で管理します。</p>

<ul>
<li>鍵毎にprefixやsuffixをつける</li>
<li>sshのconfigにホスト毎に設定をつける</li>
</ul>


<p>因みに、鍵がわかれば鍵ファイル名はなんでもいいです。</p>

<h3>configの記載</h3>

<hr />

<p>以下のような形で記載します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host github.com
</span><span class='line'>    HostName        github.com
</span><span class='line'>    IdentityFile    ~/.ssh/github_id_rsa
</span><span class='line'>    User            git
</span><span class='line'>    TCPKeepAlive    yes
</span><span class='line'>    IdentitiesOnly  yes
</span><span class='line'>Host hogehoge
</span><span class='line'>    HostName        hogehoge
</span><span class='line'>    Port            12345
</span><span class='line'>    IdentityFile    ~/.ssh/hogehoge_id_rsa
</span><span class='line'>    User            hogehoge
</span><span class='line'>    Protocol        2</span></code></pre></td></tr></table></div></figure>


<p>各項目は以下の内容を設定しています。</p>

<table>
<thead>
<tr>
<th align="left">設定項目</th>
<th align="left">設定値</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Host</td>
<td align="left">次のHostキーワードが現れるまでの項目が１つの設定項目にする</td>
</tr>
<tr>
<td align="left">HostName</td>
<td align="left">ログイン先のホスト名</td>
</tr>
<tr>
<td align="left">IdentityFile</td>
<td align="left">SSHの鍵ファイル</td>
</tr>
<tr>
<td align="left">User</td>
<td align="left">ログインするユーザー名</td>
</tr>
<tr>
<td align="left">TCPKeepAlive</td>
<td align="left">持続的接続</td>
</tr>
<tr>
<td align="left">IdentitiesOnly</td>
<td align="left">IdentityFileを利用する場合に設定する</td>
</tr>
<tr>
<td align="left">Port</td>
<td align="left">ポート番号</td>
</tr>
<tr>
<td align="left">Protocol</td>
<td align="left">SSHのプロトコル指定</td>
</tr>
</tbody>
</table>


<p>githubへのログインの場合は、上記の内容を記載します。</p>

<h3>接続確認</h3>

<hr />

<p>以下のコマンドで確認します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ssh -T &lt;Host&gt;</span></code></pre></td></tr></table></div></figure>


<p>例えば、上記のconfigに設定したgithubへのアクセスは以下で確認します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ssh -T github.com</span></code></pre></td></tr></table></div></figure>


<p>これで、「You&#8217;ve successfully authenticated」が出れば成功です。</p>

<p>以上で複数の鍵を管理できますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macのディレクトリ名を英語化する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/08/22/mac-dir/"/>
    <updated>2013-08-22T00:09:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/08/22/mac-dir</id>
    <content type="html"><![CDATA[<p>色々不便なのでやりました。<br/>
理由は、「ソートや補完とかが辛い」です。</p>

<p>英語化対象は、デフォルトで日本語化されているディレクトリです。<br/>
(「デスクトップ」という名前のディレクトリなど)</p>

<p>以下のコマンドを実行すれば、ディレクトリ名が英語化します。
やっていることは単純で、再帰的に権限維持したまま対訳表があるディレクトリをコピーです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /System/Library/CoreServices/SystemFolderLocalizations/
</span><span class='line'>$ sudo mv Japanese.lproj Japanese.lproj.bak
</span><span class='line'>$ sudo cp -pr en.lproj Japanese.lproj</span></code></pre></td></tr></table></div></figure>


<p>これで英語化されるね。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linuxに接続したHDDを知る方法]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/08/12/find-hdd/"/>
    <updated>2013-08-12T00:09:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/08/12/find-hdd</id>
    <content type="html"><![CDATA[<p>バックアップ作業とかマウントとかで指定するんだけど・・・<br/>
どこだっけって探しまわるのも面倒なので、やり方をメモしておきます。</p>

<h3>方法1:dmesgコマンドを使用</h3>

<hr />

<p>出力された結果をgrepします。</p>

<h5>SATAの場合</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$dmesg | grep sd</span></code></pre></td></tr></table></div></figure>


<h5>USB,PATAの場合</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$dmesg |grep hd</span></code></pre></td></tr></table></div></figure>


<h3>方法2:dfコマンドを使用</h3>

<hr />

<p>自動マウントとかされている場合なんかだとこっちを使う</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$df</span></code></pre></td></tr></table></div></figure>


<p>結果を見れば、どのディスクがありどんなパーティションがあるか一目瞭然です。</p>

<h3>方法3:/dev配下の内容+fdiskコマンドを使用</h3>

<hr />

<p>接続中のデバイスを知るには、lsコマンドで/dev配下を知ります。<br/>
以下の表のような感じになります。実際の割り当ては、OSやディストリに依存</p>

<table>
<thead>
<tr>
<th align="left">パス</th>
<th align="left">意味</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">/dev/hda</td>
<td align="left">IDEプライマリー(USB)のマスターディスク(hd以降は何が割り当てられるかはOS依存)</td>
</tr>
<tr>
<td align="left">/dev/hda1</td>
<td align="left">数字が付けば、パーティション</td>
</tr>
<tr>
<td align="left">/dev/sda</td>
<td align="left">SATAもしくはSCSI</td>
</tr>
<tr>
<td align="left">/dev/sda1</td>
<td align="left">SATAもしくはSCSIのパーティション</td>
</tr>
<tr>
<td align="left">/dev/md0</td>
<td align="left">ソフトウェアRAID</td>
</tr>
</tbody>
</table>


<p>接続中のデバイスがわかれば、以下のコマンドで詳細情報を得ます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$fdisk -l /dev/sda</span></code></pre></td></tr></table></div></figure>


<h3>方法4:/dev配下の内容+hdparmコマンドを使用</h3>

<hr />

<p>方法3と同じようにします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$hdparm -i /dev/sda</span></code></pre></td></tr></table></div></figure>


<p>fdiskがデバイスの情報に特化したものに対して、こっちは制御情報だったりステータスまで出てきます。</p>

<h3>余談</h3>

<hr />

<p>単純にUSBで接続したディスクであれば、lsusbコマンドを使えばよかったりします。<br/>
ターゲットのディスクがわかれば、マウントも簡単になります。<br/>
マウントポイント(自分で決めて、作成する)を「/mnt/hdd」とした場合、以下のコマンドでマウント可能</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mount /dev/sda1 /mnt/hdd</span></code></pre></td></tr></table></div></figure>


<p>自分は、方法1と方法3をよく使います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDコマンドで物理ディスクをバックアップする]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/08/11/make-disk-backup/"/>
    <updated>2013-08-11T21:22:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/08/11/make-disk-backup</id>
    <content type="html"><![CDATA[<p>どうも、どうも。久しぶりの更新です。<br/>
ゴタゴタが続いてたり、続いていなかったりでして。<br/>
更新するような感じのことができていません(勉強しろ)<br/>
まぁそんなどうでもいいことは置いておきまして、本題に入ります。</p>

<h3>発端</h3>

<hr />

<p>最近、とある目的のためにWindowsPCを買いました。<br/>
中古で安く買ったのはいいのですが、ライセンス的なもので復旧用のディスクを頂けませんでした。<br/>
頂けない上にちょっとアレな感じなところもありまして・・・</p>

<p>とりあえず、以下でゴニョゴニョやってみました。</p>

<ol>
<li>Windows7に標準で搭載されているバックアップツール</li>
<li>出処不明のリカバリーディスク</li>
</ol>


<p>結果として、どちらも失敗でした。<br/>
1はリカバーしたら古い情報も残ります。<br/>
残るだけならまだしも、色々ファイルも消えます。<br/>
2なんかは、インストールでドライバー用意しろと言われました。<br/>
なんか、ディスク起動もやたら遅いので怪しい感じ。。。</p>

<p>仕方ないので、ディスク換装した上に<br/>
元のドライブのデータを全て換装後のディスクにコピーして保存するようにしました。</p>

<h3>バックアップ方法</h3>

<hr />

<p>ディスクのバックアップ方法ですが、「dd」コマンドを使用します。<br/>
このコマンドですが、「ハードディスク・パーティションを0/1の信号のママ丸ごとコピー」するものです。<br/>
注意点とすれば、以下のことでしょうか。</p>

<ul>
<li>ハードディスクの容量がコピー元以上であること</li>
<li>コマンドで指定するディスクを間違えて指定した場合、データが消滅すること</li>
</ul>


<h3>バックアップ例</h3>

<hr />

<p>以下のような条件とします。</p>

<ul>
<li>ディスクサイズは、「コピー先HDD ≧コピー元HDD」の大きさとすること</li>
<li>パーティションは、mountしないこと</li>
<li>コピー元HDDのパス、「/dev/sdb」</li>
<li>コピー先HDDのパス、/dev/sdc」</li>
</ul>


<p>以下のコマンドで、上記のデータをコピーすることができます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$dd if=/dev/sdb of=/dev/sdc bs=512 conv=noerror,sync</span></code></pre></td></tr></table></div></figure>


<p>これで、コピーができます。
但し、完了までに数時間かかります。</p>

<p>さて、これでディスクからディスクにコピーすることができました。
それだけでなくバックアップ用のディスクイメージをつくることが出来ます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$dd if=/dev/sdb of=./backup-disk-image.img bs=512 conv=noerror,sync</span></code></pre></td></tr></table></div></figure>


<h3>故障ディスクのコピー</h3>

<hr />

<p>上記のコマンドを使えば、故障している(ある程度読める必要がありますが)ものまでコピーできます。<br/>
まぁ強引に読んでる(読めないところは、スキップしています)だけです。</p>

<p>上記のコマンドに設定しているオプションは、以下の表の意味です。</p>

<table>
<thead>
<tr>
<th align="left">オプション </th>
<th align="left"> 内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">noerror</td>
<td align="left">エラー読み飛ばし</td>
</tr>
<tr>
<td align="left">sync</td>
<td align="left">エラー箇所をNUL(ゼロ）で埋める</td>
</tr>
<tr>
<td align="left">bs</td>
<td align="left">byte size 読込書き出すバイトサイズ</td>
</tr>
</tbody>
</table>


<p>因みに、byte size値が大きいとコピー速度が速くなります。<br/>
但し、壊れている部分があると道連れになる部分が大きくなります。<br/>
なので、byte size値を小さくするとエラー範囲は最小になります(コピー速度が遅くなります)</p>

<h3>転送状況の表示</h3>

<hr />

<p>ddコマンドには、転送状況を表示してくれるようなオプションはありません。<br/>
以下のように、killallコマンドのUSRオプションで途中経過を表示できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$killall -USR1 dd </span></code></pre></td></tr></table></div></figure>


<p>これで、どれくらいかかるか時間計算ができますね。</p>

<h3>ディスクイメージからの復元方法</h3>

<hr />

<p>ディスクイメージのバックアップは取れましたが、ディスクイメージからの復元が必要ですね。<br/>
といっても、ここまでで大まかに理解できそうな感じがしますが・・・</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$dd if=./backup-disk-image.img of=/dev/sdb bs=512 conv=noerror,sync</span></code></pre></td></tr></table></div></figure>


<p>コピー元とコピー先を入れ替えるだけですね。</p>

<h3>ディスクの消去</h3>

<hr />

<p>復元と同じ要領で、zero埋めすれば完全フォーマットができます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$dd if=/dev/zero of=/dev/sdc</span></code></pre></td></tr></table></div></figure>


<p>このコマンド本当に便利。<br/>
LinuxとかMacのディスクだけでなくって、Windowsなディスクまで丸ごとコピーできるところが素敵。<br/>
ファイル指定はできないけどw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyでアクセス用のメソッドを定義する(アクセッサ)]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/07/25/ruby-accessor/"/>
    <updated>2013-07-25T20:56:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/07/25/ruby-accessor</id>
    <content type="html"><![CDATA[<p>なんてことはない、ただの整理です。</p>

<p>通常インスタンス変数を外部から参照する方法は、インスタンス変数を操作するgetter/setterメソッドを作ります。</p>

<p>Rubyでは、このアクセス用のメソッド(アクセッサ)を簡単に作る機能があります。</p>

<p>以下のようなModuleクラスにあるものを使います</p>

<ul>
<li>attr_reader : 参照(読み出し)できるようにする(getter)</li>
<li>attr_writer : 代入(書き込み)できるようにする(setter)</li>
<li>attr_accessor : 参照、代入の両方できるようにする(getter/setter)</li>
</ul>


<p>それぞれ、使い方は以下のような形になります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Accessor
</span><span class='line'>
</span><span class='line'>    attr_reader :name,:hoge
</span><span class='line'>    attr_writer :fuga,:piyo
</span><span class='line'>    attr_accessor :access
</span><span class='line'>    
</span><span class='line'>    def initialize
</span><span class='line'>        @name = "kurobara"
</span><span class='line'>        @hoge = "hogehoge"
</span><span class='line'>        @fuga = "fugafuga"
</span><span class='line'>        @piyo = "piypiyo"
</span><span class='line'>        @access = "OK"
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    def print_fuga_piyo
</span><span class='line'>        p '---------------------'
</span><span class='line'>        puts "fuga = " + @fuga
</span><span class='line'>        puts "piyo = " + @piyo
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>a = Accessor.new()
</span><span class='line'>puts a.name
</span><span class='line'>puts a.hoge  
</span><span class='line'>a.print_fuga_piyo
</span><span class='line'>p "代入操作"
</span><span class='line'>a.fuga = "fuga2fuga2"
</span><span class='line'>a.piyo = "piyo2piyo2"
</span><span class='line'>a.print_fuga_piyo
</span><span class='line'>p '---------------------'
</span><span class='line'>puts 'a.access = ' + a.access
</span><span class='line'>p "代入操作"
</span><span class='line'>a.access = "OKOK"
</span><span class='line'>puts 'a.access = ' + a.access</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで使えちゃいます。。。<br/>
今更初心者みたいなことしてんなって突っ込まれそうだけど・・・<br/>
attr_accessorばっかり使うので、attr_reader,att_writerを忘れてましたｗ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでSingletonパターンを実装する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/07/25/ruby-singleton/"/>
    <updated>2013-07-25T18:33:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/07/25/ruby-singleton</id>
    <content type="html"><![CDATA[<p>このまえ、友人とデザインパターンの話をしてたような気がするので書いてみた。</p>

<p>SingletonはGOFのデザインパターンの一つです。<br/>
使い所は、システム内で絶対に一つにしておかないといけないもの仕組みのものに使います。<br/>
例えば、アプリの設定とか見た目(Look&amp;Feel)とかシステムの何かを管理するだとかに使ったりします。</p>

<p>Singletonは以下の条件を満たす必要があります。</p>

<ul>
<li>作成したクラスのインスタンスは一つだけであることが保証されている</li>
<li>コード上のどこからでも、生成した1つだけのインスタンスにアクセスできる</li>
</ul>


<p>Javaで上の条件を満たすものはこんな感じ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>final class Singleton {
</span><span class='line'>    private static Singleton instance;
</span><span class='line'>    private Singleton(){};
</span><span class='line'>
</span><span class='line'>    public static synchronized Singleton getInstance(){
</span><span class='line'>        if(instance == null){
</span><span class='line'>            instance = new Singleton();
</span><span class='line'>        }
</span><span class='line'>        return instance;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>これと同じ実装をRubyでやるとこんな感じになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Singleton
</span><span class='line'>  @@singleton_obj = nil
</span><span class='line'>  @@count = 0
</span><span class='line'>
</span><span class='line'>  # 以下の行をコメントアウトすると
</span><span class='line'>  # オブジェクトが再生成されるので
</span><span class='line'>  # シングルトンにならない
</span><span class='line'>  private_class_method:new
</span><span class='line'>
</span><span class='line'>  def initialize
</span><span class='line'>    @@count = 1
</span><span class='line'>  end
</span><span class='line'>  
</span><span class='line'>  def self.get_instance
</span><span class='line'>    if @@singleton_obj == nil
</span><span class='line'>      @@singleton_obj = new
</span><span class='line'>    end
</span><span class='line'>    @@singleton_obj
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.count_up
</span><span class='line'>    @@count+=1
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.print_count
</span><span class='line'>    p @@count
</span><span class='line'>  end
</span><span class='line'>  
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>p '-----------------------'
</span><span class='line'>p '初回インスタンス取得'
</span><span class='line'>p Singleton.get_instance
</span><span class='line'>Singleton.print_count
</span><span class='line'>p '-----------------------'
</span><span class='line'>p '２回目のインスタンス取得でオブジェクトに変更がない'
</span><span class='line'>p Singleton.get_instance
</span><span class='line'>Singleton.count_up
</span><span class='line'>Singleton.print_count
</span><span class='line'>p '-----------------------'
</span><span class='line'>p 'newするとエラーが飛ぶ'
</span><span class='line'>begin
</span><span class='line'>  Singleton.new
</span><span class='line'>rescue
</span><span class='line'>  p 'newでエラーが飛んだ'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>結構長いですねw</p>

<p>上記のコードの実行結果は、以下になります。<br/>
オブジェクトに変化が無いことがわかりますね。<br/>
つまり、オブジェクトが１つであることが、保証されています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"-----------------------"
</span><span class='line'>"初回インスタンス取得"
</span><span class='line'>#&lt;Singleton:0x007f91519026f0&gt;
</span><span class='line'>1
</span><span class='line'>"-----------------------"
</span><span class='line'>"２回目のインスタンス取得でオブジェクトに変更がない"
</span><span class='line'>#&lt;Singleton:0x007f91519026f0&gt;
</span><span class='line'>2
</span><span class='line'>"-----------------------"
</span><span class='line'>"newするとエラーが飛ぶ"
</span><span class='line'>"newでエラーが飛んだ"</span></code></pre></td></tr></table></div></figure>


<p>自力でSingletonを実装すると上記のようなコードなのですが、<br/>
実は、Rubyにはsingletonをやってくれる便利なモジュールがあります。<br/>
これを使うと、Mix-inしたクラスのインスタンスは常に同じものを返してくれます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'singleton'
</span><span class='line'>
</span><span class='line'>class MySingleton
</span><span class='line'>
</span><span class='line'>  include Singleton
</span><span class='line'>
</span><span class='line'>  @@count = 0
</span><span class='line'>
</span><span class='line'>  def initialize
</span><span class='line'>    @@count = 1
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.count_up
</span><span class='line'>    @@count+=1
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.print_count
</span><span class='line'>    p @@count
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>p '-----------------------'
</span><span class='line'>p '初回インスタンス取得'
</span><span class='line'>p MySingleton.instance
</span><span class='line'>MySingleton.print_count
</span><span class='line'>p '-----------------------'
</span><span class='line'>p '２回目のインスタンス取得でオブジェクトに変更がない'
</span><span class='line'>p MySingleton.instance
</span><span class='line'>MySingleton.count_up
</span><span class='line'>MySingleton.print_count
</span><span class='line'>p '-----------------------'
</span><span class='line'>p 'newするとエラーが飛ぶ'
</span><span class='line'>begin
</span><span class='line'>  MySingleton.new
</span><span class='line'>rescue
</span><span class='line'>  p 'newでエラーが飛んだ'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>実行結果は、こんな感じ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"-----------------------"
</span><span class='line'>"初回インスタンス取得"
</span><span class='line'>#&lt;MySingleton:0x007fd2fa8c9658&gt;
</span><span class='line'>1
</span><span class='line'>"-----------------------"
</span><span class='line'>"２回目のインスタンス取得でオブジェクトに変更がない"
</span><span class='line'>#&lt;MySingleton:0x007fd2fa8c9658&gt;
</span><span class='line'>2
</span><span class='line'>"-----------------------"
</span><span class='line'>"newするとエラーが飛ぶ"
</span><span class='line'>"newでエラーが飛んだ"</span></code></pre></td></tr></table></div></figure>


<p>モジュールを使うと、スッキリとしたコードになりますね。<br/>
当たり前ですが、newしようとするとエラーになります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacにGUIありWiresharkをインストールする]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/07/19/install-wireshark/"/>
    <updated>2013-07-19T00:47:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/07/19/install-wireshark</id>
    <content type="html"><![CDATA[<p>いつも忘れるのでいい加減にメモを残しておきます。</p>

<h3>インストール環境</h3>

<hr />

<p>以下がインストールされているマシンであること</p>

<ul>
<li>XQuartz</li>
<li>Homebrew</li>
</ul>


<p>XCodeが古かったりするとインストールできない可能性があります。<br/>
少なくともwarningは出ます。</p>

<h3>インストール方法</h3>

<hr />

<p>以下のコマンドを実施することでGUIありWiresharkがインストールできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$brew install wireshark --with-x</span></code></pre></td></tr></table></div></figure>


<p>因みに「&#8211;with-x」オプションがない状態でインストールするとGUI無しのwiresharkがインストールされます。</p>

<h3>Wireshark起動方法</h3>

<hr />

<p>以下のコマンドで起動します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo wireshark</span></code></pre></td></tr></table></div></figure>


<p>毎回実施しては、毎回思うのだけど・・・
Homebrew使わずにインストールしたほうが手っ取り早いような気がする。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[端末にインストールしてあるapkファイルを取り出す]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/07/14/push-apk/"/>
    <updated>2013-07-14T11:48:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/07/14/push-apk</id>
    <content type="html"><![CDATA[<p>訳があって実施することになりました。<br/>
ビルドに使ったソースコードがなくなってしまっただけなんですけどね。</p>

<h3>前提</h3>

<hr />

<ol>
<li>adbコマンドが使える環境であること</li>
<li>端末がデバッグモードONであること</li>
</ol>


<h3>手順</h3>

<hr />

<p>以下の方法で実施します。</p>

<ol>
<li>adb shell pm list packages -f | grep [取得対象のパッケージ名の一部]</li>
<li>1を実行すると「package:/data/app/&lt;apkファイル名>=&lt;アクティビティ名>」が表示される</li>
<li>adb pullコマンドでapkファイルのフルパス(/data/app/&lt;apkファイル名>)を指定する</li>
</ol>


<p>これだけです。</p>

<p>一応ソースコードを紛失したapkのバイナリが取り出せました。<br/>
別の端末にインストールできる。<br/>
よかったよかった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoogleAppsScript勉強会に行って来ました]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/07/13/kyoto-gas-study/"/>
    <updated>2013-07-13T17:54:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/07/13/kyoto-gas-study</id>
    <content type="html"><![CDATA[<p>GDG京都さんとKyotoGASさんが主催する勉強会に行って来ました。<br/>
正直なところ今更感、漂う感じの記事ですが気にしないでください。<br/>
実は、用事があって関西に行っていたのです。</p>

<p>以下にメモを記載します。。。</p>

<h3>GASとは</h3>

<hr />

<p>大雑把に言うとMSOfficeのVBAみたいなもの</p>

<ul>
<li>JS 1.8Base(既存のJS資産が使える)</li>
<li>サーバサイド実行</li>
<li>Googleのサービスと連携できるAPIがいっぱいある</li>
<li>GoogleAppsの拡張</li>
<li>Advanced Google Serviceが利用(API Keyが必要)</li>
<li>Charts(グラフ)</li>
<li>JDBCでクラウドSQL利用可</li>
<li>ウェブアプリケーションの作成が可能</li>
<li>スクリプトトリガーで、任意or一定間隔でスクリプト実行できる</li>
</ul>


<h5>制限</h5>

<hr />

<p>主にあげられる制限</p>

<ul>
<li>メールの本数など(GoogleAppsのユーザーや一般ユーザーの違いなど)</li>
</ul>


<h5>その他</h5>

<hr />

<ul>
<li>GAEよりもお手軽にできる</li>
<li>ソースの共有(ソースの共有を設定していれば)</li>
<li>GAEよりも制限がゆるい</li>
</ul>


<h3>AppsScriptとクラウドBPM</h3>

<hr />

<ul>
<li>GASの学習コストは低い</li>
<li>GAS自身に足りないところはSpreadSheetで補う(最適な方法)</li>
<li>サーバ処理、クライアント処理の連携がよい</li>
</ul>


<h4>連携例</h4>

<h5>1.Sheetでマスタ管理</h5>

<hr />

<h6>(連携例)  サイト<->GAS(処理を実施)<->SpreadSheat</h6>

<p>JSONPでデータを返してやればサイト側でJS処理をするだけでよい</p>

<p>問題</p>

<ul>
<li>JSとGASお通信でクロスドメイン問題</li>
<li>ブラウザの設定だけでやると戻すデータがカラになってしまう</li>
</ul>


<h5>2.リアルタイム集計</h5>

<hr />

<h6>(連携例) サイト<->GAS(処理を実施)<->SpreadSheat</h6>

<p>データ送信してSheetで集計</p>

<h5>3.帳票出力</h5>

<hr />

<h6>(連携例) サイト<->GAS(処理を実施)<->SpreadSheat</h6>

<p>SpreadSheetを利用して、帳票を出す</p>

<h5>4.一括処理</h5>

<hr />

<h6>(連携例) SpreadSheetからGASに投げ、GASからサイトのAPIを実行する</h6>

<p>定期実行をするようにしてやる</p>

<h5>5.Googleカレンダー連携</h5>

<hr />

<ul>
<li>キーワードをGASで取得してやる</li>
</ul>


<h5>考慮点</h5>

<hr />

<ul>
<li>セキュリティ(サーバからアクセスするので、GoogleApps認証ができない、Keyというパラメータをもたせる)</li>
<li>運用監視(ログをspreadSheetへ)</li>
<li>エラーの発生を極力回避するようにする</li>
</ul>


<h5>GASを使用していて困るところ</h5>

<hr />

<ul>
<li>ソースコードの構成管理</li>
<li>httpリクエストのデバッグ(実際に手動で実行してみてリクエストを送信するしかない)</li>
<li>IP制限がない</li>
<li>予期せぬエラーが出た場合の対処</li>
</ul>


<h3>GoogleAppsScriptを積極活用</h3>

<hr />

<p>GAS+SpreadSheetがすごいという事例紹介
特に以下がやりやすい</p>

<ul>
<li>GASで勤怠管理</li>
<li>集客ツール</li>
</ul>


<h5>勤怠管理</h5>

<hr />

<ul>
<li>SpreadSheetをDBのように扱う</li>
<li>SpreadSheetの変更管理が大変(ユーザーが大変)</li>
<li>受託ではやらないほうがいいかもしれない。(予期せぬ問題が起きたときの解析などが大変)</li>
<li>プログラムが得意ではない人でもGASは使いやすい(Excelユーザ向け)</li>
<li>各種GoogleServiceとの連携に向いている</li>
</ul>


<h3>GoogleAppsScriptの新機能</h3>

<hr />

<p>GoogleAppSAPIは以下の使用方法がある</p>

<ul>
<li>DATA API</li>
<li>AppsScript</li>
</ul>


<p>GAE vs GAS</p>

<ul>
<li>速さGAE</li>
<li>柔軟GAE(なんでもできる)</li>
<li>お仕事GAE(GASは不安定)</li>
<li>お手軽GAS(GAEよりも圧倒的に楽にアプリが組める)</li>
</ul>


<p>GAS</p>

<ul>
<li>Forms + GAS</li>
<li>Documents + GAS</li>
<li>new UI Component(Dialog,sidebar)</li>
<li>GoogleDriveIntegration</li>
</ul>


<p>新しくFormsにToolsというメニュー項目が追加</p>

<h5>GASからフォーム作る</h5>

<hr />

<p>ソースから新しくFormを作成するソースコード</p>

<ul>
<li>フォームの作成</li>
<li>メールの送信</li>
<li>ログ出力</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function myFunction{
</span><span class='line'>    // 空のフォーム
</span><span class='line'>    var form = FormApp.create("アンケートひな形").setDescription("アンケート用のフォームです");    
</span><span class='line'>    //入力フォーム
</span><span class='line'>    form.addtextItem().setTitle("Email")
</span><span class='line'>    // 1-5までのラジオボタンを作る
</span><span class='line'>    form.addScaleItem().setTitle("評価").setBound(1,5).setHelpText("1..5");
</span><span class='line'>    //  自由入力欄
</span><span class='line'>    form.setParagrapheTextItem.setTitle("")
</span><span class='line'>    // メールの送信
</span><span class='line'>    MailApps.sendEmail("宛先","本文")
</span><span class='line'>    // 公開用のアドレス
</span><span class='line'>    Loger.log(form.getPublishedUrl())
</span><span class='line'>    // 編集用のアドレス
</span><span class='line'>    Loger.log(form.getEditUrl())
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h5>Document + GAS</h5>

<hr />

<ul>
<li>文章の構造化(DOM構造みたいにItemとか)を制御できるようになった</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function myFunction{
</span><span class='line'>    //ドキュメント本体
</span><span class='line'>    var body = DocumentApps.getActiveDocument().getBody();
</span><span class='line'>    // インデックス
</span><span class='line'>    body numChild = body.getNumChild();
</span><span class='line'>
</span><span class='line'>    var i = 0,chld,type,hending,html="&lt;div&gt;";
</span><span class='line'>    for(;i&lt;numChild;i++){
</span><span class='line'>        //  子要素
</span><span class='line'>        child = body.getChild(i)
</span><span class='line'>        type = child.getType()
</span><span class='line'>
</span><span class='line'>        if(type == DocumentApps.ElementType.PARAGRAPH){
</span><span class='line'>            heading = child.getHeading()
</span><span class='line'>            // 不要なHeadingが付いている。これは、文章自身もパラグラフと認識されてるためだったっけ(?)
</span><span class='line'>            if(heading != DocumentApps.ParagraphHeding.Normal && child.getNumChild() &gt; 0){
</span><span class='line'>                Logger.log(heading +" "+child.getChild(0).getText() )
</span><span class='line'>                html + ="&lt;p&gt;" +heading +" "+child.getChild(0).getText()+"&lt;/p&gt;" 
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    html +="&lt;/div&gt;"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ダイアログ表示</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function showDialog(){
</span><span class='line'>    var ui = HtmlService.createHtmlOutput(myFunction()).setWidth(400).setHeight(300)
</span><span class='line'>    DocumnetApps.getUi().showoDialog(ui)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>サイドバー表示</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function showSideBar(){
</span><span class='line'>    var ui = HtmlService.createHtmlOutput(myFunction()).setWidth(300)
</span><span class='line'>    DocumnetApps.getUi().showSideBar(ui)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h5>DriveSDKを使う</h5>

<hr />

<p>以下のようなコードでGoogleDriveを操作できる</p>

<ul>
<li>ファイル名取得</li>
<li>ファイルをゴミ箱へ送る</li>
<li>ファイルへアクセス権を追加</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function drive(){
</span><span class='line'>    // ファイル検索
</span><span class='line'>    // 結果はイテレータで帰ってくる
</span><span class='line'>    var fails = DriveApp.searchFiles("title contains","検索ファイル")
</span><span class='line'>    var file
</span><span class='line'>    while(fails.hasNext()){
</span><span class='line'>        file  = fails.next();
</span><span class='line'>        // ファイル名を取得する
</span><span class='line'>        file.getName()
</span><span class='line'>        try{
</span><span class='line'>            // ファイルをゴミ箱へおくる
</span><span class='line'>            // 権限がないとエラーが出るかも
</span><span class='line'>            file.setTrash(true)
</span><span class='line'>            // 権限を追加(Owner権を追加)
</span><span class='line'>            file.setOwner("追加するユーザー")
</span><span class='line'>        }catch(e){
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h5>質問</h5>

<hr />

<ul>
<li>補完は出ないときは、一回保存して開き直すとかで対処(リファレンス読み直せばいい)</li>
<li>GASでプレゼンテーションは操作できない(予定もない)</li>
<li>GASで作ったファイルはドライブに保存される</li>
<li>FormはSpreadSheetにプログラムでひもづけることもできる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[削除してしまったDropboxのデータを復元する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/07/13/recover-dropbox-data/"/>
    <updated>2013-07-13T17:06:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/07/13/recover-dropbox-data</id>
    <content type="html"><![CDATA[<h3>簡単な経緯</h3>

<hr />

<p>このブログ記事を書くキッカケになった内容を以下に記述します。</p>

<p>お馬鹿すぎて笑えますwww</p>

<ol>
<li>Dropboxアプリ起動</li>
<li>アプリを起動したまま、あるコマンドを実行</li>
<li>Dropboxと同期したディレクトリが2で実行したコマンドで削除される</li>
<li>1のDropboxアプリが削除した状態を同期開始</li>
<li>削除だけなので、同期が一瞬で終わってしまう</li>
<li>Dropboxサーバのデータが削除</li>
</ol>


<p>こんな感じでした・・・
実際は、Dropboxのディレクトリだけでなくもっと影響がでかくて涙を流しています。</p>

<h3>復元の手順</h3>

<hr />

<p>復活の呪文を唱えるにも条件があります。</p>

<h4>削除してからの日数が30日以内であれば、復元可能</h4>

<p>というものです。</p>

<p>幸いなことに削除した次の日に気がついたので、自分はこの条件を満たしていました。</p>

<p>で、肝心の復元の手順ですが、以下で実施します。</p>

<ol>
<li>Dropboxのウェブサイトにログイン</li>
<li>画面右上の「削除済みファイル」をクリック</li>
<li>ファイル名の横に表示されている逆三角を押下し復元をクリック</li>
</ol>


<h4><a href="https://www.dropbox.com/help/296/ja">公式の手順</a></h4>

<p>これで削除したファイルが復元できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyのStructクラスが便利]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/07/02/ruby-struct/"/>
    <updated>2013-07-02T01:15:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/07/02/ruby-struct</id>
    <content type="html"><![CDATA[<p>特にちょっとしたデータ構造を作成したいときなんかは非常に有効な手段かも</p>

<h3>Structクラス</h3>

<hr />

<p>Rubyの組み込みクラスです。(Classに比べて影が薄いですが・・・)</p>

<p>平たく言うと、Classクラスに似ているものです。</p>

<p>じゃー違いは何なの？ってなります。</p>

<ol>
<li>newしたとき、引数で指定したアクnセッサをもつクラスを生成する</li>
<li>第一引数の文字列がクラス名となるが、指定がない場合は無名のクラスになる</li>
</ol>


<p>これだけ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Point = Struct.new("Point", :x, :y)
</span><span class='line'>item = Point.new(100,200)
</span><span class='line'>p item =&gt; #&lt;struct Struct::Point x=100, y=200&gt;
</span><span class='line'>p item.x =&gt; 100</span></code></pre></td></tr></table></div></figure>


<p>無名クラスだと、こんな感じ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Point2 = Struct.new(:z)
</span><span class='line'>Point2.class =&gt; Class
</span><span class='line'>item2 = Point2.new(300)
</span><span class='line'>p item2 =&gt; #&lt;struct Point2 z=300&gt;</span></code></pre></td></tr></table></div></figure>


<h3>ドキュメントに無い機能</h3>

<hr />

<p>ブロックを使うことができることです。<br/>
ブロック内では、独自のメソッドを定義することができます。</p>

<p>こんな感じです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Point = Struct.new(:x, :y) do
</span><span class='line'>  def sum
</span><span class='line'>        x + y
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def minus
</span><span class='line'>        x - y 
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>p Point.new(600, 700).sum =&gt; 1300
</span><span class='line'>p Point.new(800,900).minus =&gt; -100</span></code></pre></td></tr></table></div></figure>


<p>他にも、superを使うことで、上位のコンストラクタを実行することができます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Point &lt; Struct.new(:x, :y)
</span><span class='line'>  def initialize(x, y)
</span><span class='line'>    z = x + y
</span><span class='line'>    super(z, y)
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>item = Point.new(400, 500)
</span><span class='line'>p item =&gt; #&lt;struct Point x=900, y=500&gt;</span></code></pre></td></tr></table></div></figure>


<h3>使いどころ</h3>

<hr />

<p>正直、あんまり無いような気がしなくもないですが、自分だと以下で使います。</p>

<ul>
<li>csvファイルとか読み込むとき、ちょっとしたデータ構造を定義するとき</li>
<li>ちょっとしたデータのソート</li>
<li>ちょっとしたアルゴリズムの追加</li>
<li>ハッシュの代わりとか(既にデータ構造が分かってる場合など)</li>
</ul>


<p>データソートする場合の例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Point &lt; Struct.new(:x, :y)
</span><span class='line'>  def initialize(x, y)
</span><span class='line'>    z = x + y
</span><span class='line'>    super(z, y)
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>item = Point.new(400, 500)
</span><span class='line'>item2 = Point.new(200,300)
</span><span class='line'>
</span><span class='line'>p item =&gt; #&lt;struct Point x=900, y=500&gt;
</span><span class='line'>p item2 =&gt; #&lt;struct Point x=500, y=300&gt;
</span><span class='line'>
</span><span class='line'>array = []
</span><span class='line'>array &lt;&lt; item
</span><span class='line'>array &lt;&lt; item2
</span><span class='line'>
</span><span class='line'>p array =&gt; [#&lt;struct Point x=900, y=500&gt;, #&lt;struct Point x=500, y=300&gt;]
</span><span class='line'>
</span><span class='line'>result = array.sort{ |item1,item2|
</span><span class='line'>                    item1.x &lt;=&gt; item2.x
</span><span class='line'>               }
</span><span class='line'>p result =&gt; [#&lt;struct Point x=500, y=300&gt;, #&lt;struct Point x=900, y=500&gt;]</span></code></pre></td></tr></table></div></figure>


<p>書き捨てみたいなRubyコードを書くときにはちょうどいいのかもしれないですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependency Injectionについて]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/06/27/dependency-injection/"/>
    <updated>2013-06-27T19:28:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/06/27/dependency-injection</id>
    <content type="html"><![CDATA[<p>DI(Dependency Injection)について、あるところで聞かれたので回答したときのメモでも残します。</p>

<p>簡単に言うと、よく言われる「依存性の注入」といいます。</p>

<p>が、なんのことかさっぱりわからないですね。
少し言い換えてあげると</p>

<h6>「依存性をモジュールもしくはクラス内部に抱え込まずに外部から依存内容を設定してあげる」</h6>

<p>となります。</p>

<p>擬似コードを出すとDI前にこんなコードとすると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public Hoge(){
</span><span class='line'>    this.fuga = new Fuga("hogefuga");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>DI後の擬似コードはこんな感じ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public Hoge(Fuga fuga){
</span><span class='line'>    this.fuga = fuga;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>コンストラクタの引数Fugaを差し替えるだけで容易に設定内容を変更できます。<br/>
依存前のコードだと、依存性はFugaコンストラクタの中にありますが、依存後のコードは依存性は外部にあります。(引数の内容次第)<br/>
このFugaのコンストラクタがリソースに関わる何かだとDI前のコードであればユニットテストが大変になりますね。<br/>
しかし、DI後のコードであれば引数を差し替えるだけでユニットテストができるようになります。</p>

<p>なので、DIをするメリットというと(個人的に)以下が挙げられます。</p>

<ul>
<li>依存しているものが外部にあるので、ユニットテストで差し替えが簡単にできる(外部からモックにしやすい)</li>
<li>IFさえ同じものであれば、別の実装を行ったものを設定として渡してやることができる(柔軟性)</li>
</ul>


<p>面倒になるのは、事前準備ですがメリットのほうが大きいと個人的には思ってます。<br/>
面倒な事前処理(主にコンストラクタ生成ですが)をやってくれるのがDIコンテナですね。</p>

<p>よく使うDIコンテナだと、有名なjavaのコンテナはこんなところですかね。</p>

<ul>
<li>GoogleGuice</li>
<li>Seaser2</li>
<li>SpringFramework</li>
</ul>


<p>自分が使うときの基準だと、以下になりますね。</p>

<ul>
<li>Seaser2なプロダクト(SAStrutsとか)を使っている、もしくは使う場合は、「Seaser2」のDIコンテナ</li>
<li>Spring関係の何かを使っている、もしくは使う場合は、「SpringFramework」のDIコンテナ(尤も殆ど使ったことないです)</li>
<li>それ以外の場合なら、大体「GoogleGuice」(どこかに事例とかあればいいですし、大体がWicketとかで使います)</li>
</ul>


<p>AndroidにもDIコンテナ(RoboguiceやDagger)あるのですが、殆ど使いませんね。<br/>
使い勝手が悪かったり、ドキュメントがなかったりなので・・・</p>
]]></content>
  </entry>
  
</feed>
