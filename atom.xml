<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2014-02-21T00:43:47+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScriptのproxyでハマったこと]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/02/21/forget-js/"/>
    <updated>2014-02-21T00:26:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/02/21/forget-js</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>JavaScriptを書いてる訳ですが・・・<br/>
久しぶりに書いて、初歩的なことでアレ？ってなったので備忘録的にメモしておきます</p>

<h3>thisを自由に変更できるproxy関数を使う</h3>

<hr />

<p>大体、以下のような感じで、関数とコンテキスト(thisに設定するオブジェクト)を指定するわけです。</p>

<p>ですが、以下２つのコードで嵌まりました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var obj = {
</span><span class='line'>    doSomething : function() {
</span><span class='line'>        alert('test');
</span><span class='line'>    }
</span><span class='line'>};
</span><span class='line'>$('button#hoge').click($.proxy(obj.doSomething(), obj)); </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var obj = {
</span><span class='line'>    doSomething : function() {
</span><span class='line'>        alert('test');
</span><span class='line'>    }
</span><span class='line'>};
</span><span class='line'>$('button#hoge').click($.proxy(obj.doSomething, obj)); </span></code></pre></td></tr></table></div></figure>


<p>一見、違いがなさそうなのですが・・・<br/>
実は、実行タイミングに違いがあります 。<br/>
一番、上の例だとイベント登録時に実行してしまいますが、<br/>
下のものはイベント実行時に正しく実行してくれます。</p>

<p>こんな、しょうもないことで詰まりましたw</p>

<h3>即時関数</h3>

<hr />

<p>グローバルに変数割り当てなくてお得な感じ<br/>
あと、アレですね使い捨てできる(ぉぃ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(function() {
</span><span class='line'>  alert('test');
</span><span class='line'>})();</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[マージが起きたらさっさと解消しようという教訓]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/02/18/git-merge-conflict-memo/"/>
    <updated>2014-02-18T02:00:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/02/18/git-merge-conflict-memo</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>Gitを使って開発してるのですが・・・</p>

<p>複数人で1つのプロダクト開発を行ってたらコンフリクトは起こることはよく有ります</p>

<p>俗に言うマージコンフリクトですね</p>

<p>今回はそんなマージコンフリクトで起こった事を備忘録的に残します</p>

<h3>まず結論・・・</h3>

<hr />

<p>気づいた時点(Github,gitlab,stashとか)で、さっさとコンフリクトは解消しましょう</p>

<p>後にまとめて行うのは、無謀もいいとこです</p>

<p>1つ2つのコミット差分ならまだしも<br/>
10個のコミットが積み上げられ、かつその大半がコンフリクト起こすような状況だと直すのに苦労します</p>

<p># 解消に1時間かかりましたorz</p>

<p>なので、さっさと直してしまいましょう(他人の書いたコードまでは責任取れないよw)</p>

<h3>コンフリクト解消時に起こったこと</h3>

<hr />

<p>上記のことだけなら、反省だけで次回からは行わないようにすればいいだけの話です</p>

<p>ですが、コンフリクト解消時に奇妙なことが起こりました</p>

<p>以下のような状態でmasterのコードをブランチにとりこんだ時(実際はもう少しコンフリクト解消することがありました)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(master) : (起点) - [コンフリクト有(1)] - [コンフリクト有(2)] - [コンフリクト有(3)] - [ファイル移動] - [コンフリクト有(4)] - [コンフリクト無]
</span><span class='line'>              |  
</span><span class='line'>(branch) :   [A] - [B] - [C]</span></code></pre></td></tr></table></div></figure>


<p>コンフリクト有(2)のコンフリクトを解消した瞬間に、ブランチの状態(merge/CONFLICT)だけでも、マージの継続をすることが出来なくなりました</p>

<p>このコマンドだけが使えました</p>

<ul>
<li>continueは受け付け無い</li>
<li>abortとskipは受け付ける</li>
</ul>


<p>そのため、一度abort→再マージをしたのですが・・・<br/>
今度は、コンフリクト(3)で同じ現象。。。</p>

<p>諦めてskipをしましたorz<br/>
そうすると、マージが全てブランチに取り込まれました・・・(ファイル移動は取り込まれてないので別途実施)</p>

<p>こういう恐ろしい事態(マージがうまくいかない)があったので、気をつけようねという自戒と対処結果のメモでしたw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logbackで動的にログの出力先を変更する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/02/15/logback-synamic-log/"/>
    <updated>2014-02-15T21:42:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/02/15/logback-synamic-log</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>といっても大したことではなく、「同僚にできないの？」って質問されたことが発端です。</p>

<p>やったこと無かったけど、気になったので調べてみることにしました。</p>

<p>業務要件的にも、以下のことはありそうな感じかなーとは思いましたがｗ</p>

<ul>
<li>あるログはデフォルトの出力先に</li>
<li>致命的なエラーは、ログの出力方法はそのままで別の出力先に</li>
</ul>


<h3>やり方</h3>

<hr />

<p>割りと簡単に出来ました</p>

<p>手順としてはこんな感じ・・・</p>

<ol>
<li>Loggerを取得する</li>
<li>Loggerから変更対象の設定名でAppenderを取得する</li>
<li>AppenderをFileAppenderにキャストする(コレがミソ)</li>
<li>ログ出力を一時停止する</li>
<li>setFileメソッドで出力先ファイルを変更する</li>
<li>ログ出力を再開する</li>
</ol>


<p>コードにするとこんな感じかな(loggerの取得方法は色々変りそうだけど・・・)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Logger logger = LoggerFactory.getLogger(LogbackLogging.class);
</span><span class='line'>FileAppender&lt;ILoggingEvent&gt; fileAppender = (FileAppender&lt;ILoggingEvent&gt;) logbackLogger.getAppender("FILE");
</span><span class='line'>fileAppender.stop();
</span><span class='line'>fileAppender.setFile("your_new_log_file");
</span><span class='line'>fileAppender.start();</span></code></pre></td></tr></table></div></figure>


<p>実は、以下の２つのことで気が付きましたw</p>

<ul>
<li><a href="http://logback.qos.ch/apidocs/index.html">javadoc</a>(Appender<E>を実装してる)</li>
<li>getAppenderメソッドの戻り値(Appender<E>が返される)</li>
</ul>


<h3>感想</h3>

<hr />

<p>割りと簡単にできるんですねw</p>

<p>後はこの処理をラップしたようなクラス&amp;静的メソッドを作ると汎用的に使えていいのではないだろうか。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Volleyをビルドする]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/01/30/build-volley/"/>
    <updated>2014-01-30T00:36:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/01/30/build-volley</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>とある作業でAndroidの通信用ライブラリ「Volley」を使いたくなりました。<br/>
が、毎回使うたびにeclipseでーとかやりたくないわけです。<br/>
なので一度ビルドしてしまい、ライブラリ化してしまおうという魂胆です。</p>

<p># 毎回、ビルドどうやるんだっけな？ってAnt Task見たりするのも面倒というオチもあったりw</p>

<h3>ビルド前準備</h3>

<hr />

<p>Volleyにはビルド用のファイルとして、以下の2つがついています</p>

<ul>
<li>Ant</li>
<li>Gradle</li>
</ul>


<p>ですが、Gradleでビルドしようとした場合、エラーになります。<br/>
タスク一覧も見れませんでしたw</p>

<p>という訳でしたのでAntでやります。</p>

<p>その前に、VolleyはAndroid4.0がベースで作られているようなので、Android4.0のライブラリをインストールしておきます。</p>

<h3>ビルド</h3>

<hr />

<p>以下のコマンドでビルドします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ant jar</span></code></pre></td></tr></table></div></figure>


<p>成功すれば、「volley/bin/volley.jar」というファイルが出来てます。</p>

<h3>バージョン管理とか</h3>

<hr />

<p>ここからは完全に余談なのですが・・・</p>

<p>こういうライブラリを使う場合だと、バージョンが重要だったりしてきます。</p>

<p>では、どうすればいいかということなのですが、自分としてはgit submoduleを使うことをオススメします。</p>

<p>こうすることで、本体コード(volleyを使う側)のバージョンアップに合わせて、都度volleyのバージョンアップを図ればいいことになります。</p>

<p>こんな感じのディレクトリ構成とし、Volleyは都度上記コマンドでビルドする運用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Android
</span><span class='line'>  |
</span><span class='line'>  |- MainProject(自分が作成するアプリ)
</span><span class='line'>  |
</span><span class='line'>  |- Volley</span></code></pre></td></tr></table></div></figure>


<p>git submoduleのコマンドは以下です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git submodule add https://android.googlesource.com/platform/frameworks/volley Volley</span></code></pre></td></tr></table></div></figure>


<p>submodule化したものを更新する場合は、以下のコマンドです<br/>
# 初回の場合は、updateではなくinitをしてsubmodule化したファイル類を取得する必要があります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git submodule update</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitkeepを作成、及び削除をするshellを作った]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/01/18/shell-gitkeep/"/>
    <updated>2014-01-18T00:02:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/01/18/shell-gitkeep</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>以下のようなディレクトリ構成のときに.gitkeepを作りたかったのです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>└── test
</span><span class='line'>    ├── test1
</span><span class='line'>    │   └── test2
</span><span class='line'>    └── test3</span></code></pre></td></tr></table></div></figure>


<p>ですが、これを手で一つ一つ用意するのは非常に面倒なわけでして・・・<br/>
ついカッとなって用意しました。</p>

<p># chefお前のことだ!!<br/>
# Railsなんかはきっちり用意してくれてるのにね</p>

<h3>コード本体</h3>

<hr />

<p>以下のコードをコピペして適当に実行権を与えたファイルにしてください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>function create() {
</span><span class='line'>    dir=$1
</span><span class='line'>    if [ ! -f "${dir}/.gitkeep" ]&&[ ! -z "${dir}" ]; then
</span><span class='line'>        touch ${dir}/.gitkeep
</span><span class='line'>        echo  "Create .gitkeep in `pwd`/${dir}"
</span><span class='line'>    fi
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function remove() {
</span><span class='line'>    dir=$1
</span><span class='line'>    if [ -f "${dir}/.gitkeep" ]&&[ ! -z "${dir}" ]; then
</span><span class='line'>        rm ${dir}/.gitkeep
</span><span class='line'>        echo  "Remove .gitkeep in `pwd`/${dir}"
</span><span class='line'>    fi
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function start() {
</span><span class='line'>    command=$1
</span><span class='line'>    for DIR in * ; do
</span><span class='line'>        if [ -d "${DIR}" ]; then
</span><span class='line'>            if [ "${command}" = "create" ]; then
</span><span class='line'>                create $DIR;
</span><span class='line'>            fi
</span><span class='line'>            if [ "${command}" = "remove" ]; then
</span><span class='line'>                remove $DIR;
</span><span class='line'>            fi
</span><span class='line'>            (cd "${DIR}"; start $command;)
</span><span class='line'>        fi
</span><span class='line'>    done
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>command=$1
</span><span class='line'>if [ -z "${command}" ]; then
</span><span class='line'>    command="create"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>if [ "${command}" != "remove" -a "${command}" != "create" ]; then
</span><span class='line'>    echo "Usage : ./gitkeep.sh create or ./gitkeep.sh remove"
</span><span class='line'>    exit 1
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>if ! git rev-parse 2&gt; /dev/null; then
</span><span class='line'>    echo "Abort!!"
</span><span class='line'>    echo "This directory is not git repository!!"
</span><span class='line'>    exit 1
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>start $command;</span></code></pre></td></tr></table></div></figure>


<h3>使い方</h3>

<hr />

<p>上記のコードをgittkeep.shとして保存していたと仮定した場合</p>

<p>.gitkeepファイル作成する場合は、以下のコマンド</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sh gitkeep.sh create</span></code></pre></td></tr></table></div></figure>


<p>.gitkeepファイルを削除する場合は、以下のコマンド</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sh gitkeep.sh remove</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Surface Pro2を買いました]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/01/14/surfacepro/"/>
    <updated>2014-01-14T22:43:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/01/14/surfacepro</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>表題にもあるようにSurface Pro2を買いました。</p>

<p>元々、WindowsOSはあんまりーな人なのですが、気になるのでつい買ってしまいました。</p>

<p>というわけで、経緯と感想を残します。</p>

<h3>経緯</h3>

<hr />

<p>元々、WindowsOSはPCゲームか動画鑑賞の用途で使っていました。</p>

<p>とはいえ中古品でちょっとなーとなってました(バッテリー的な意味で)</p>

<p>加えて、身内が捨てるぐらいなら使うので欲しいと言ってきたので、これ幸いという感じでした。</p>

<p>また、SUrfacePro2のスペックもノートPCと遜色ないじゃんということで購入に至りました。</p>

<p>買うまでに結構苦労したことは内緒ですw</p>

<h3>使用感</h3>

<hr />

<p>セットアップに関して</p>

<ul>
<li>PCのアカウントとMSアカウントを区別してセットアップする方法が解りにくすぎる</li>
</ul>


<p>ソフトウェアキーボードに関して</p>

<ul>
<li>タブレット型としては後発の癖に、最低な使い勝手</li>
<li>iOSやAndroidだと入力位置に合わせて自動で位置調整してくれますが、全くしてくれません</li>
<li>ソフトウェアキーボードに隠れて入力した内容がみえないことも</li>
<li>これは、タイプカバー必須というところでしょうか</li>
</ul>


<p>全体に関して</p>

<ul>
<li>稀に固まってしまって動かないことがある(強制再起動必須)</li>
<li>わかりやすくしようとした結果なのかもしれないけど、設定したい内容がコントロールパネルの何処にあるのか不明(分かってる人に使いづらい仕様)</li>
<li>ホームネットワーク？wifiの細かい設定とか何処？色々なところに飛びすぎて分からん・・・</li>
<li>UI面(タイル？メトロUI？)は、程よく後発なだけあって直感的で使いやすい！！</li>
<li>右スライドで時間表示、PCやアカウント設定、検索(中身は兎も角)としてをすぐにできるのはGood</li>
<li>左スライドで起動中のアプリにすぐ戻れるところや画面分割ができるところは使いやすいかも</li>
</ul>


<p>要するに、今までのMS製品の中ではUI面は非常に凝ったものではないのかと思いました。
個人的には、この使いやすいさとXPのPCとして使い勝手の良さ(慣れてる人にも使いやすいという意味で)が合わさってくれるといいのかなと思いました。</p>

<h3>wifiプロファイルの削除方法</h3>

<hr />

<p>これが一番悩みました。hoge(1), hoge(2)みたいなプロファイルを勝手に作らてしまい削除に困り果てました。</p>

<p>どうやら仕様変更っぽくって公式回答(MSのモデレーター)でも以下を実行しろとありました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$netsh wlan show profiles
</span><span class='line'>$netsh wlan delete profile name="消したいwifiプロファイル"</span></code></pre></td></tr></table></div></figure>


<p>ちょっとここはいけてない感じがします、ともすればデグレードって取られかねない仕様ですね。</p>

<p>個人的には設定周りはまとまってて欲しいと思うけどなぁ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今更ながら、艦隊これくしょん(通称、艦これ)始めました]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/01/13/kancolle/"/>
    <updated>2014-01-13T21:32:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/01/13/kancolle</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>今更感が半端ない訳ですが、始めました。</p>

<p>あ、因みに、自分はハードにゲームするわけでもない人間です。</p>

<p>そんな自分が初めてしまったので、感想的な何かを書き下して見ます。</p>

<p># 今年に入ってからなので、1週間程度のプレイ</p>

<h3>プレイ前の印象</h3>

<hr />

<p>こんな感じのことを思ってました。</p>

<ul>
<li>よくあるソーシャルゲームでしょ</li>
<li>某Pがいるような、課金すればするほどするほどのゲームでしょ</li>
<li>俺ツエーしたければ、課金(ry</li>
<li>ていうか、絵を集めて何が残るの？？？</li>
<li>ゲーム性あまりないんじゃね？</li>
</ul>


<p>上記に加えて、ソーシャル界隈のちょっとアレな話を耳にしていました。</p>

<p>どちらかというと以下のほうが気になってました。</p>

<ul>
<li>ビジネスモデル(ソーシャルゲームだと斜陽になりやすいので)</li>
<li>サーバ構成&amp;運用などの技術構成要素</li>
</ul>


<p># バックが角川なので気づけというのは置いとくとして・・・</p>

<h3>プレイのきっかけは？</h3>

<hr />

<p>元々、色々なところで話を聞いていたのもありますが、身内が始めてたというのがあるかもですね。</p>

<p>実家の方針かどうかわかりませんが、冒頭でも述べたように元々TVゲームをハードにする家ではありません。<br/>
身内もソーシャルゲームに関しては、完全に否定気味です。</p>

<p># TVゲーム機は有れども、ソフトが無い(買ってもらってもソフトは自腹)<br/>
# TVゲームができるTVは1台しかないので、親兄弟で取り合いになる<br/>
# その割には、PCは1人1台状態だったり等など・・・<br/>
# ちょっと古い感じのお家ですね。(TVゲームはあまり良しとしない感じ)</p>

<p>そんなお家にも関わらず身内がはまり込んでいるのでどんなものなの？という興味が湧いたというところでしょうか。</p>

<p>あとは、プレイヤー解放のタイミングが自分の休みと偶然合致したということもあります。</p>

<p># 基本、平日の夕方とかがプレイヤー解放タイミングっぽいので・・・</p>

<h3>感想は？</h3>

<hr />

<p>以外とよく出来てるなぁと思いました。<br/>
ざっと、以下のような感想ですね。</p>

<ol>
<li>基本的に無料で長く遊べる(途中で飽きなければですが・・・)</li>
<li>戦艦とかの修理に、現実の時間が取られる(実際に修理している感がある)</li>
<li>俺ツエーしたい要素もある(課金によるゲーム投資)</li>
<li>けれども、課金しない人でも俺ツエーできる要素がある</li>
<li>艦船ごとのキャラづけ</li>
</ol>


<p>よく言われる運ゲーという感じですが、殆どの要素がそうなってますね。<br/>
これが、良いか悪いかは置いておきます。<br/>
# プレイヤーは指揮する人なので当然ですが・・・</p>

<p>1に関して、本当にコレクション要素があるので(まぁ萌え絵だったりするのですが・・・)、<br/>
コレクションするのが好きでとかソーシャルゲームが好きという人には向いてるのかと思います。</p>

<p>2に関して、戦艦だったり、重巡洋艦とかだと修理するのに1時間とか平気でかかります。<br/>
割りと現実(?)に則した感じなのがよいと思います。<br/>
現実感ある感じですね。(頭使って運用しましょうという感じ)</p>

<p>3,4に関しては、こんな印象</p>

<p>基本、運ゲーなのでプレイヤー同士の強い弱いはあまり関係なかったりします。(正確には全くないわけではないですが)<br/>
違いは運用できる艦隊になります(戦艦や正規空母なら強いが、駆逐艦だと弱いなど)</p>

<p>要するに俺ツエーは以下にいくらかけれるかということになります。</p>

<ul>
<li>艦船の建造(コレクション要素)</li>
<li>出撃による弾薬や燃料(資材の要素)</li>
<li>修理や開発に必要なドックの数(基本は２つずつ)</li>
</ul>


<p>こういう感じなので、無課金の人でも俺ツエーが出来ちゃったりします。<br/>
# この要素があるので無料だったら遊んでみる？みたいな人もいるかもしれないですね。</p>

<p>5に関して、史実を元にキャラを作ってるようなので面白いですね(これが、ウケたということもあるかも)<br/>
他に、艦船を調べてみるキッカケとかになることも多いようです。<br/>
# 自分もちょっとwiki眺めたりとかしたりしましたw</p>

<h3>課金はしたの？</h3>

<hr />

<p>えっと・・・、以下に課金しました<sup>^;;</sup></p>

<ul>
<li>ドック開放(修理２つのみ)</li>
<li>資材をちょこちょこと(高コストな艦隊すぎて・・・)</li>
</ul>


<h3>元々、気になってところはどうなの？</h3>

<hr />

<p>ビジネスモデルという意味では、もう推して知るべしって感じですね。<br/>
# 元々の構想にあったかは知りませんが・・・</p>

<p>十分にメディアミックスしてるじゃないですか。。。</p>

<h3>最後に、現時点であなたの運用している艦隊をplz</h3>

<hr />

<p>こんな感じです。アホみたいな火力なので、１回で資材が消し飛びます。</p>

<ul>
<li>加賀</li>
<li>赤城</li>
<li>飛龍</li>
<li>長門</li>
<li>金剛</li>
<li>鳥海</li>
</ul>


<p>他に、「愛宕、那智、加古、翔鳳、龍驤、木曾、夕立」がいますね。<br/>
# 長門とか正規空母はレアらしいですが、なんか直ぐ建造できますた<br/>
# 俺ツエー要素ですね(殆どクリアしていないのに・・・)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android端末のROM焼きをやってみる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/01/02/write-android-rom/"/>
    <updated>2014-01-02T20:42:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/01/02/write-android-rom</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>Android端末ではNexus5を使用しています。</p>

<p>ついこの前(?)、4.4→4.4.2にアップデートしてみました。</p>

<p>アップデートしてみたところ、全体的な機能改善がされていました。</p>

<p>ところが、端末スピーカーを使って音声再生したところ音が割れるようになりました。</p>

<p>暫く、我慢して使って音声再生していたのですが、最早限界に達しましてダウングレードをすることにしました。</p>

<p># 大体、Android界隈でこういうROM焼きをする場合ってカスタムROMを焼くことが多いですが・・・ ^<sup>;;</sup></p>

<p># カスタムROMにしてしまうとAPIとか動作含めて検証機として微妙かなという印象もあるので純正にします。</p>

<h3>注意事項</h3>

<hr />

<p>本作業によって、メーカーの補償は一切きかなくなります。<br/>
本作業でデータが消えたり、Nexus5が起動しなくなってしまったとしてもこちらは一切責任を負いません。<br/>
全て自己責任でお願い致します。</p>

<h3>対象機器</h3>

<hr />

<p>Nexus5</p>

<h3>手順</h3>

<hr />

<p>どの端末で大体やることは同じのようです。</p>

<ol>
<li>Bootloderの解除</li>
<li>ROMの入手</li>
<li>ROMを焼く</li>
</ol>


<h3>Bootloderの解除</h3>

<hr />

<p>実はこれが一番ハードルが高いです。 <br/>
機種によって解除するための作業が微妙に異なるためです。(解除するための鍵を入手したり等)</p>

<p>幸いなことにNexus5はハードルが高くありません。</p>

<p># 流石、天下のGoogle様ですねw</p>

<p>以下の手順で行います。</p>

<ol>
<li><code>adb reboot bootloader</code>を入力する(電源ボタンとボリュームダウンボタンを同時押しで電源を入れるでも可)</li>
<li>画面に倒れたドロイド君が表示されていればOK</li>
<li><code>fastboot oem unlock</code>を入力する</li>
<li>Nexus5に、「Unlock bootloader?」と尋ねる画面が表示される</li>
<li>ボリュームボタンを操作し「Yes」を選び電源ボタンを押す</li>
</ol>


<p>上記作業が成功すれば、Nexus5のブートローダー画面のLOCK STATEが「unlocked」に変化しています。</p>

<p>ロックしたい場合は、<code>fastboot oem lock</code>と入力すれば、LOCK STATEが「locked」に変化します。</p>

<h3>ROMの入手</h3>

<hr />

<p>ここは簡単です。</p>

<p>純正のROMは、<a href="https://developers.google.com/android/nexus/images?hl=ja">Factory Images for Nexus Devices</a>から入手できます。</p>

<p># カスタムROMは専用のサイトとか行けばよいと思います。</p>

<h3>ROM焼き</h3>

<hr />

<p>これも簡単です。</p>

<p>純正のROMの場合は、shellとバッチが用意されていますのでそれを実行するだけです。<br/>
実行タイミングは、ブートローダー画面で行います。</p>

<p>こんな感じでログが出たあとに端末が再起動すれば成功かと思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sending 'bootloader' (2506 KB)...
</span><span class='line'>OKAY [  0.288s]
</span><span class='line'>
</span><span class='line'>中略
</span><span class='line'>
</span><span class='line'>writing 'cache'...
</span><span class='line'>OKAY [  1.904s]
</span><span class='line'>rebooting...
</span><span class='line'>
</span><span class='line'>finished. total time: 99.240s</span></code></pre></td></tr></table></div></figure>


<p>以上！！自分の作業備忘録でした！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[findのexecオプションとxargsコマンドについて]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/01/01/find-delete/"/>
    <updated>2014-01-01T21:36:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/01/01/find-delete</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>年が明けましたね。</p>

<p>せっかくの休みなので、今まで溜め込んだファイルの整理をすることにしました。</p>

<p>無駄なファイルが山ほどあって、検索からの削除を便利にしよう</p>

<p>そう思ったのが今回の発端です。</p>

<p>さて、やります。</p>

<h3>ファイル検索といえば</h3>

<hr />

<p>findコマンドを使いますね。</p>

<p>execオプションやパイプとともにxargsコマンドを駆使して検索したファイルに対して処理をします。</p>

<p>今回の要件ファイル削除系だとこんな感じですね。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$find . -name "*.dummy" -exec rm {} \;</span></code></pre></td></tr></table></div></figure>


<p>xargsを使う場合だと、こっちですね。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$find . -name "*.dummy" -print0 | xargs -0 -n1 rm</span></code></pre></td></tr></table></div></figure>


<p>因みに、print0オプションを有効にすると区切り文字がスペースから \0 に変更されます。<br/>
ファイル名にスペースがあるかもしれない場合とかはつけておくことがよいと思います。</p>

<p>他にxargsの-0オプションも上記同様のものです。-n&lt;数字>は1 コマンドラインにつき最大の数字分ずつ引数として使用するという意味になります。</p>

<h3>execオプションでxargsと同様の処理</h3>

<hr />

<p>これをする場合は、+を使えばよいようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$find . -name "*.dummy" -exec rm {}+</span></code></pre></td></tr></table></div></figure>


<p>これだけだと意味があるような、ないような<sup>^;;</sup></p>

<h3>findのdeleteオプション</h3>

<hr />

<p>OS依存になるようですが、findコマンドにはdeleteオプションがあるようです。<br/>
これを使えば、上記のようにコマンドの組み合わせをせずともファイル検索→ファイル削除も同時にできるようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$find . -name "*.dummy" -print0 -delete</span></code></pre></td></tr></table></div></figure>


<p>検索と同時に削除なので、危険な感じがしますが、便利に使えると思います。</p>

<h3>まとめ</h3>

<hr />

<p>大したことでもないですが、こんな感じですね</p>

<ul>
<li>findとxargsを組み合わせる場合、find側はprint0オプション、xargs側は-0オプションを付けたほうが安全</li>
<li>findコマンドでxargsと同様のことがしたい場合、execオプションの末尾を;から+に変更する</li>
<li>検索+削除の場合、findコマンドのdeleteオプションを使うと便利</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年の振り返り]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/12/31/2013-summary/"/>
    <updated>2013-12-31T22:09:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/12/31/2013-summary</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>年の瀬なので、今年一年を振り返ってみました。<br/>
思えば、今年一年は色々とあったなーと思いました。</p>

<p>上半期(1~6月)、下半期(7~12月)の２つのセクションで振り返りたいと思います。</p>

<h3>上半期(1~6月)</h3>

<hr />

<p>この頃はあまりモノ作りというものをやってなかったような気がします。</p>

<p># どちらかというとR&amp;Dライクな何かでしょうかね・・・。</p>

<p>とはいえ、元々自分が何がしたかったのかを思い出せた出来事がありました。</p>

<p># 出来事についての詳細は割愛します。</p>

<p>ここまででは、やりたいことを思い出しただけですね。</p>

<p>そうそう、忘れてはいけないイベントがありましたね。</p>

<h5>GoogleI/Oへの参加</h5>

<p>これが、上半期の中で一番デカイイベントでした。</p>

<p># 初めての海外ということもありますがw</p>

<p>世界のエンジニアと交流することで色々と刺激やツッコミを貰ったりしました。<br/>
ここで、自分が本当にやりたいことをやるためには行動が必要だということを学びました。</p>

<p># 勿論、技術ネタも学んできましたよ。</p>

<h3>下半期(7~12月)</h3>

<hr />

<p>さて、実際に行動をする訳ですが、まぁ色々と駄目出しをいただくわけでして・・・</p>

<p>結局、転職という道を選びました。</p>

<p># 自宅も引っ越しするという・・・</p>

<p>今は、晴れてRailsをやっています。</p>

<p>やはり、今まで事業的な視点を持っていないことが結構キツイですね。<br/>
キツイ中でもやり甲斐はあってかなり楽しくやれています。</p>

<p># 技術が楽しいというのもあるし、コードや開発プロセス、標準使用ツールなどが自分に合ってるというのもあるかもしれないです。</p>

<p>転職して「Androidという最新でイケイケなことを捨ててWeb業界に来たの？」よく言われます。</p>

<p>元々、Androidというかmobile系がやりたかったというわけではないということが理由としてデカイです。</p>

<h3>終わりに</h3>

<hr />

<p>お茶を濁してる部分がかなりありますが、其処はアレがあるということで・・・</p>

<p>さて、来年はどうなることですかね。<br/>
もう少し、事業的なことにも目を向ける必要がありそうですね。</p>

<p>今(2013年)以上に充実した生活を送りたいですね。</p>

<p># そろそろ、婚活的なアレもいるんだろうか・・・</p>

<p>というわけで、振り返りになってない振り返りでしたw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[log4j 2を使った。おまけで他のloggingも用意した。]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/12/23/java-logging/"/>
    <updated>2013-12-23T03:27:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/12/23/java-logging</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>今はRails使いですが、数年前まではJava使いでした。<br/>
何やらlog4jがメジャーバージョンアップ始めたという噂を聞いたので試してみました。<br/>
因みに、自分が最後に使っていたのは「slf4j + logback」です。</p>

<h3>コード類</h3>

<hr />

<p>コードは<a href="https://github.com/moonstruckdrops/java-logging-sample/tree/master/Log4j2Sample">github</a>に置きました。<br/>
どれも必要最低限のライブラリしか使っていませんので、動作の参考になるかと思います。</p>

<p>特にivy, maven, gradleを使うと必要以上のライブラリまで取ってくるので、解決に困っている方がいれば役立つかも・・・</p>

<p># 自分が偶に忘れるなんてことは言えない・・・</p>

<h3>log4j 2.x</h3>

<hr />

<p><a href="http://logging.apache.org/log4j/2.x/index.html">本家</a>曰く、何やらこんなことが増えたらしい。</p>

<ul>
<li>APIの分離</li>
<li>パフォーマンス(性能)改良</li>
<li>multiple API(commons-logging, slf4j)のサポート</li>
<li>設定の自動リロード</li>
<li>logbackライクなFilter設定</li>
<li>plugin機構の追加</li>
</ul>


<p>後は、地味に細かい改良があったりします。。。</p>

<h3>セットアップ</h3>

<hr />

<p>ライブラリ(2013/12/22時点)は、以下のものがあればよいようです。</p>

<ul>
<li>log4j-api-2.0-beta9.jar</li>
<li>log4j-core-2.0-beta9.jar</li>
</ul>


<p>slf4jと連携させたいときは、以下を追加します。</p>

<ul>
<li>log4j-slf4j-impl-2.0-beta9.jar</li>
<li>slf4j-api.1.7.5.jar</li>
</ul>


<p>Gradleだとこんな感じですね。(transitiveをつけるのは余計なライブラリをダウンロードさせないため)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>    compile ('org.apache.logging.log4j:log4j-core:2.0-beta9') {transitive = false}
</span><span class='line'>    compile ('org.apache.logging.log4j:log4j-api:2.0-beta9') {transitive = false}
</span><span class='line'>    compile ('org.apache.logging.log4j:log4j-slf4j-impl:2.0-beta9') {transitive = false}
</span><span class='line'>    compile ('org.slf4j:slf4j-api:1.7.5') {transitive = false}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>このあたりを参考にするといいかも</p>

<ul>
<li><a href="http://logging.apache.org/log4j/2.x/maven-artifacts.html">maven連携</a></li>
<li><a href="http://logging.apache.org/log4j/2.x/log4j-slf4j-impl/">slf4j連携の注意点</a></li>
</ul>


<p>設定ファイルの置き場ですが、こちらは「クラスパス」が通ったところに置けばよいでしょう。<br/>
# eclipseとかだとsrcの直下の置けばよいです。</p>

<p>因みに、この設定ファイルですが以下に変更となったようです。</p>

<ul>
<li>log4j2.xmlもしくはlog4j2.jsonのどちらかを設定ファイルとする</li>
<li>propertiesファイルでは記載できなくなった</li>
<li>ファイル名の規則が「log4j2」になった</li>
</ul>


<p># Javaの特徴という感じだったのでプロパティファイル結構好きだったんだけどなぁ(日本語書くとアレなのは置いておいて)<br/>
# 複雑なことは書けないという致命傷もあったので、設定が複雑なことには向かなかったというのも分かる<br/>
# jsonのサポートは今風かも。</p>

<p>ログの設定にjsonを使う場合は、以下のライブラリを追加する必要があるようです。</p>

<ul>
<li>jackson-core-2.2.2.jar</li>
<li>jackson-databind-2.2.2.jar</li>
</ul>


<h3>設定</h3>

<hr />

<p>ログって基本、一度設定してしまうと何か特別な理由が無い限り設定変更ってしませんよね。<br/>
# ログ分析が必要になったとか、ログレベルの変更をする必要が出たとか</p>

<ul>
<li><a href="http://logging.apache.org/log4j/2.x/manual/architecture.html">デフォルト</a>はERRORとFATALのみ表示(ログレベルは、FATAL > ERROR> WARN > INFO > DEBUG > TRACE)</li>
<li><a href="http://logging.apache.org/log4j/2.x/manual/layouts.html">指定できる出力フォーマット</a></li>
<li><a href="http://logging.apache.org/log4j/2.x/manual/appenders.html">appender</a>は、コンソールやファイルの出力するフォーマット定義</li>
<li>loggersは、どのappendersを使うかを指定することでログの出力方式を決定できます</li>
<li>最低限、appenderとloggersを設定すれば動きます。</li>
</ul>


<p>以下のような感じでlog4j2.xmlを設定します。</p>

<ul>
<li>Consoleとログファイルの両方にログを出力するようにしています</li>
<li>ログファイルの出力は、JSONを設定しています</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;configuration status="OFF"&gt;
</span><span class='line'>  &lt;appenders&gt;
</span><span class='line'>    &lt;Console name="Console" target="SYSTEM_OUT"&gt;
</span><span class='line'>      &lt;PatternLayout&gt;
</span><span class='line'>        &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&lt;/pattern&gt;
</span><span class='line'>      &lt;/PatternLayout&gt;
</span><span class='line'>    &lt;/Console&gt;
</span><span class='line'>
</span><span class='line'>    &lt;RollingFile name="RollingFile" fileName="log4j2_sample_log.log" filePattern="log4j2_sample_log_%d{yyyy-MM-dd}.log.gz"&gt;
</span><span class='line'>      &lt;JSONLayout complete="true" charset="UTF-8" /&gt;
</span><span class='line'>      &lt;Policies&gt;
</span><span class='line'>        &lt;TimeBasedTriggeringPolicy /&gt;
</span><span class='line'>      &lt;/Policies&gt;
</span><span class='line'>    &lt;/RollingFile&gt;
</span><span class='line'>  &lt;/appenders&gt;
</span><span class='line'>
</span><span class='line'>  &lt;loggers&gt;
</span><span class='line'>    &lt;root level="trace"&gt;
</span><span class='line'>      &lt;appender-ref ref="Console" /&gt;
</span><span class='line'>      &lt;appender-ref ref="RollingFile" /&gt;
</span><span class='line'>    &lt;/root&gt;
</span><span class='line'>  &lt;/loggers&gt;
</span><span class='line'>    
</span><span class='line'>&lt;/configuration&gt;</span></code></pre></td></tr></table></div></figure>


<p>他にも出来そうなこと</p>

<ul>
<li><code>「&lt;property name="LOG_PATH" value="" /&gt;」</code>のように定義することもできるような感じなので柔軟に出来そうですね。</li>
<li>appenderを追加すれば、状況に応じたログ出力が出来そう(普通のログとJSONのログ等)</li>
<li>JSONでログ出力すれば、ログの分析がしやすそう(分析基盤(Fluentdとか)を使ったり作ればですが)</li>
</ul>


<h3>おまけ(その1)</h3>

<hr />

<p>いつもSLF4jを使用するときの組み合わせを忘れるので、ここにメモします。
SLF4jはFacadeパターンを採っていまして、以下のメリットがあるようです。</p>

<ul>
<li>柔軟な切り替え</li>
<li>効率化</li>
</ul>


<p>これのお陰で、移行とかがスムーズにできるというわけです。
以下の表に組み合わせをメモしておきます。</p>

<table>
<thead>
<tr>
<th> </th>
<th>Log4j</th>
<th>Log4j2</th>
<th>Logback</th>
<th>Logging</th>
<th>Simple</th>
</tr>
</thead>
<tbody>
<tr>
<td>SLF4J/コア</td>
<td>slf4j-api.jar</td>
<td>slf4j-api.jar</td>
<td>slf4j-api.jar</td>
<td>slf4j-api.jar</td>
<td>slf4j-api.jar</td>
</tr>
<tr>
<td>SLF4J/アダブタ</td>
<td>slf4j-log4j12.jar</td>
<td>log4j-slf4j-impl</td>
<td>logback-classic.jar, logback-core.jar</td>
<td>slf4j-jdk14.jar</td>
<td>slf4j-simple.jar</td>
</tr>
<tr>
<td>ロギング・ライブラリ</td>
<td>log4j-1.2.x.jar</td>
<td>log4j-core, log4j-api</td>
<td>logback-classic.jar, logback-core.jar</td>
<td>java.util.logging</td>
<td>slf4j-simple.jar</td>
</tr>
</tbody>
</table>


<p># どちらかと言うとこちらのほうが必要だったかもw</p>

<h3>おまけ(その2)</h3>

<hr />

<p>ついでといってはなんですが、他にJavaでよく使いそうなloggingも用意しました。<br/>
どれも必要最低限のライブラリしか使っていませんので、動作の参考になるかと思います。</p>

<ul>
<li>Commons Logging + SimpleLog</li>
<li>SLF4j + Log4j</li>
<li>SLF4j + Logback</li>
<li>SLF4j + Log4j2</li>
</ul>


<p><a href="https://github.com/moonstruckdrops/java-logging-sample">ここ</a>に置きました。</p>

<p>Gradleがあれば使えるようにしてあります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[現場で感じた理想と現実]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/12/21/work-site/"/>
    <updated>2013-12-21T11:26:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/12/21/work-site</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>この投稿は DevLOVE Advent Calendar 2013 12月21日の記事です。<br/>
前日は nnasakiさんでした。</p>

<h3>自己紹介</h3>

<hr />

<p>kurobaraと言います。</p>

<p>こんな感じのことをやったり、考えたりしてます</p>

<ul>
<li>C/Java/AndroidをSIerとしてやってきて、現在はPHP/Rubyを使うwebエンジニア</li>
<li>趣味で、Java系の何かとか,Googleのプロダクト扱ったり、Goをやったりと幅広で技術的なこと</li>
<li>プロダクトと技術指向な感じで何か色々とやってる感じ</li>
<li>今後は事業領域やデータ分析的なこともやりたいような予感</li>
</ul>


<p>経歴というほどの経歴ではないですが、経歴を知りたい方は過去のブログ記事を参照してください。。。</p>

<p>今回の記事は、同僚にぜひにと誘われましたので、良い機会だと思ったので書いています。</p>

<h3>前置き</h3>

<hr />

<p>正直なところ、これまで「現場」という感覚で捉えたことが無かったので考えるきっかけになりました。<br/>
恐らく、仕事をしてる中では、いかによくやるかとは考えて行動しているはずです。。。</p>

<p>某映画に有名にセリフがあります。</p>

<p>「事件は会議室で起きてるんじゃない。現場で起きてるんだ。」</p>

<p>これは、その通りかなと思っています。<br/>
このセリフが出る映画の上映当時、自分はガキだったので「( ´_ゝ｀)ﾌｰﾝ」って感じでした。</p>

<p>今では、その言葉の意味とか言ってしまいたい気持ちもわかります。</p>

<h3>自分にとっての現場とは</h3>

<hr />

<p>思わず前置きを書いてしまいましたが、気を取り直して本題に移ります。</p>

<p>自分は、IT業界での仕事現場しか分からないので、他の業界での現場というものはわかりません。<br/>
ただ、敢えて自分の感じる現場というものを一言で表すと「理想と現実の狭間で戦うところ」かなと思います。</p>

<p>ここでいう理想とは、「技術者が技術的にもやれることにも満足している」ような状態。<br/>
現実は、「ビジネス的要因があって、技術的なことにチャレンジもできない」状態。<br/>
(出来ないは言い過ぎですが、要するにビジネスが先行し、技術者が思う理想ができないような感じのことです)</p>

<h4>理想を感じた要因は？</h4>

<p>これは難しいですね。<br/>
経験というものしかないかと思います。</p>

<p>そもそもとして、以下が出来れば自分の満足度があがるかと思います。</p>

<ul>
<li>プロダクトが価値を提供出来る</li>
<li>悩んでいる人に課題を解決出来る</li>
<li>プロダクトで喜んでくれる人がいる</li>
</ul>


<p># 褒められると嬉しいというやつですね。(自分もよくあります。)</p>

<p>そのため、に技術者が出来ることは、以下の内容かな？と自分は考えます。<br/>
そして、これが理想的に出来れば理想に近いかなと思います。</p>

<ul>
<li>プロダクトの開発サイクルを上げ、価値を出来うる最速で提供できること</li>
<li>プロダクトに対して、きっちりTDD/BDDが回せて品質まで担保できること</li>
<li>プロダクトに対する技術的な負債を限りなく0まで減らしていけること</li>
<li>プロダクトの開発サイクルや開発機能そのものの改善が出来ていること</li>
<li>プロダクトに対して、技術的なチャレンジが出来、成長できること</li>
<li>技術者が今思う、トレンドに触れていられること</li>
</ul>


<p>どれも、当たり前の発想だし当たり前に出来ていることが理想型だと私自身は感じています。</p>

<h4>理想はまぁなんとなく理解したが、現実は？</h4>

<p>これはもう、大体分かることかなーと思います。<br/>
数値が出れば出るほど特に出来なくなりつつあるという感じですね。</p>

<p>わかりやすいところでいうとこんな感じかも</p>

<ol>
<li>実装はできるが、時間に余裕が無い</li>
<li>機能の割にテストを書いてる余裕がなくなる</li>
<li>技術負債が出来上がる</li>
<li>追加要件が出てくるが、技術負債のお陰ですすまない</li>
<li>技術負債のお陰で余裕があってもテスト書いてられない</li>
<li>開発サイクルが下がってくる・・・</li>
<li>(ry</li>
</ol>


<p>上に挙げた技術者としての理想が出来なくなってくるという状況</p>

<p>これを改善するには・・・<br/>
ということになるとビジネスサイドに人間に対して0から説明する必要が出てきます。</p>

<p>説明が面倒とは言いません。<br/>
寧ろやるべきだと思います。(最終判断は、ビジネス要件も絡みますので落とし所は着くかと思います。)<br/>
技術的な負債などを抱えるとモチベーションが下がり、価値の提供に繋がらなくなってきつつあるのかなと思います。</p>

<p>最後は現状に対する悪態しか出てこないとかに陥ったりするかもしれないですね。<br/>
(こうなると、技術だけでなくプロダクトそのものを貶すことになるので)</p>

<p>他に挙げるとすると、技術的に満足度が高い状況でやっていてもビジネスサイド側の要求で出来なくなるというのもあるかもしれないです。<br/>
(現場からすると謎な社内パワー等)</p>

<p># これは元々の自分の経験なので・・・</p>

<h3>まとめ</h3>

<hr />

<p>色々と長くなりましたが、自分の思うところをツラツラと書いてしまいました。</p>

<p>何が言いたいかというと</p>

<h5>「現実は往々にしてあるので、如何に理想に近づけていけるか」</h5>

<p>これが、自分の思う現場かな？と思います。(最近はよく思います)</p>

<p>そのために、技術者側も以下をやっておく必要があるのではないか、そう思います。</p>

<ul>
<li>事業のことについて多少なりとも知っておく</li>
<li>事業サイド側にコミットメントをする</li>
<li>数値分析や事業サイド側の数値を知る</li>
<li>事業の目的や目標、到達する先を知る</li>
</ul>


<h3>明日は・・・</h3>

<hr />

<p>明日は、storywriterさんです。<br/>
storywriterさん、よろしくお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveAndroidを使ってみた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/12/19/active-android/"/>
    <updated>2013-12-19T00:58:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/12/19/active-android</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<hr />

<p>久しぶりにオレオレ用のAndroidアプリを書きました。<br/>
その際、DBを使ったのですが、面倒くさいことはしたくなかったので<br/>
Android向けO/R Mapperである<a href="https://github.com/pardom/ActiveAndroid">ActiveAndroid</a>使いました。</p>

<p>その時のメモを備忘録な感じで残します。</p>

<h2>準備</h2>

<hr />

<p>以下のようにして、ライブラリを自分でビルドします。<br/>
ビルド完了後、プロジェクトのビルドパスにライブラリを追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/pardom/ActiveAndroid.git
</span><span class='line'>$ cd ActiveAndroid
</span><span class='line'>$ sh gradlew build</span></code></pre></td></tr></table></div></figure>


<h2>設定</h2>

<hr />

<p>2種類の方法で利用準備ができます。</p>

<ol>
<li>AndroidManifest.xmlに設定する</li>
<li>Applicationクラスを継承した独自のクラスを用意する</li>
</ol>


<p>1のやり方は以下のような形で定義します。</p>

<ul>
<li>meta-dataタグを用意し、そこにDB名前とバージョンを記載</li>
<li>android:nameに「com.activeandroid.app.Application」を記載</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;application
</span><span class='line'>        android:allowBackup="true"
</span><span class='line'>        android:name="com.activeandroid.app.Application"&gt;
</span><span class='line'>        ・・・
</span><span class='line'>
</span><span class='line'>        &lt;meta-data android:name="AA_DB_NAME" android:value="test.db" /&gt;
</span><span class='line'>        &lt;meta-data android:name="AA_DB_VERSION" android:value="1" /&gt;
</span><span class='line'>
</span><span class='line'>        ・・・
</span><span class='line'>
</span><span class='line'>&lt;/application&gt;</span></code></pre></td></tr></table></div></figure>


<p>2のやり方は、以下のようにして設定内容を組み立て、起動と停止処理を組み込みます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class MyApplication extends Application {
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public void onCreate() {
</span><span class='line'>    super.onCreate();
</span><span class='line'>    Builder builder = new Configuration.Builder(getBaseContext());
</span><span class='line'>    builder.setCacheSize(1024*1024*4);
</span><span class='line'>    builder.setDatabaseName("test.db");
</span><span class='line'>    builder.setDatabaseVersion(1);
</span><span class='line'>    ActiveAndroid.initialize(builder.create(), true);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public void onTerminate() {
</span><span class='line'>    super.onTerminate();
</span><span class='line'>    ActiveAndroid.dispose();
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>上記の内容では、以下のものを設定しています。</p>

<ul>
<li>キャッシュサイズ4MB</li>
<li>DBを「test.db」</li>
<li>バージョンを「1」</li>
<li>ActiveAndroidのログを有効化(initializeメソッドのtrueのこと)</li>
</ul>


<p>個人的には、以下の理由から組み立てて実行するほうがよいかと思います。</p>

<ul>
<li>ActiveAndroidの設定に引きづられず、自分のアプリに影響が出ないこと</li>
<li>DBのキャッシュサイズを決められる(デフォルトが1KBのため)</li>
<li>progurdによる難読化ができる(AndroidManifest.xmlに書けば見え見えになりますが、コードだと難読化ができる)</li>
</ul>


<p>尤も、最後のはコード上でstaticに文字列として定義するとあまり意味がないですが・・・</p>

<h2>モデル定義</h2>

<hr />

<p>以下のような感じでアノテーションをつける形で定義します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Table(name = "Items")
</span><span class='line'>public class Item extends Model {
</span><span class='line'>
</span><span class='line'>  @Column(name = "id", notNull = true)
</span><span class='line'>  public int id;
</span><span class='line'>
</span><span class='line'>  @Column(name = "name", unique = true, onUpdate = ForeignKeyAction.NO_ACTION)
</span><span class='line'>  public String name;
</span><span class='line'>
</span><span class='line'>  @Column(name = "category", onNullConflict = ConflictAction.REPLACE)
</span><span class='line'>  public String category;
</span><span class='line'>
</span><span class='line'>  public List&lt;Test&gt; tests() {
</span><span class='line'>    return getMany(Test.class, "test");
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>アノテーションに付けれる内容は以下の表のような感じのものです。<br/>
殆どが<a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html">Android本家のページ</a>のConstants(CONFLICT_XXXと記載されたもの)なので<br/>
こちらの説明を読んで設定すればよいかと思います。</p>

<table>
<thead>
<tr>
<th> 定義先 </th>
<th> 定義内容 </th>
<th> 意味</th>
</tr>
</thead>
<tbody>
<tr>
<td> クラス </td>
<td> name      </td>
<td> 対応するテーブル名</td>
</tr>
<tr>
<td> 変数   </td>
<td> name      </td>
<td> 対応するカラム名</td>
</tr>
<tr>
<td>      </td>
<td> length           </td>
<td> 長さの制約(デフォルト -1(無制限?))</td>
</tr>
<tr>
<td>      </td>
<td> notNull          </td>
<td> not null制約(デフォルト false)</td>
</tr>
<tr>
<td>      </td>
<td> onNullConflict   </td>
<td> null制約違反時の動作を設定する(デフォルトはFAIL, 設定内容はAndroid公式参照)</td>
</tr>
<tr>
<td>      </td>
<td> onDelete         </td>
<td> 削除時の外部キーの動作設定(CASCADE, RESTRICT等が設定可能)</td>
</tr>
<tr>
<td>      </td>
<td> onUpdate         </td>
<td> 更新時の外部キーの動作設定(CASCADE, RESTRICT等が設定可能)</td>
</tr>
<tr>
<td>      </td>
<td> unique           </td>
<td> ユニーク制約(デフォルト false)</td>
</tr>
<tr>
<td>      </td>
<td> onUniqueConflict </td>
<td> ユニーク制約違反時の動作を設定\n(デフォルトはFAIL, 設定内容はAndroid公式参照)</td>
</tr>
</tbody>
</table>


<p>意味が必ずしも正しいかと言われると少し自信がありませんが、多分こんな感じかと。</p>

<p>また、1対Nのような関係を作るときは、getMenyメソッドを実装したヘルパーメソッドを作る必要があるようです。</p>

<h2>クエリ</h2>

<p>クエリについて、書いていきます。</p>

<p>以下を使ったことがあればすんなり理解できるかと・・・</p>

<ul>
<li>JavaのO/R Mapper(s2jdbc等)</li>
<li>RubyのActiveRecord</li>
</ul>


<h3>挿入</h3>

<hr />

<p>以下のような感じで記載します。<br/>
ActiveRecordと殆ど同じですね。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Item item = new Item();
</span><span class='line'>item.name = "test";
</span><span class='line'>item.save();</span></code></pre></td></tr></table></div></figure>


<p>以下のようにすれば、バルクインサートもできます。
また、トランザクションも併せて記載します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActiveAndroid.beginTransaction();
</span><span class='line'>try{
</span><span class='line'>  for(int i = 0; i &lt; 1000; i++ ){
</span><span class='line'>    Item item = new Item();
</span><span class='line'>    item.name = "test_" + i;
</span><span class='line'>    item.save();
</span><span class='line'>  }
</span><span class='line'>  ActiveAndroid.setTransactionSuccessful();
</span><span class='line'>}finally{
</span><span class='line'>  ActiveAndroid.endTransaction();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>トランザクション中にエラーが出てもthrowされないので、注意して下さい。<br/>
コンフリクト周りでエラーが出る場合は、モデルのアノテーションに定義した内容が適用されます。</p>

<h3>削除</h3>

<hr />

<p>やり方は、以下の３種類です。</p>

<ol>
<li>オブジェクトをロードしてから削除する方法</li>
<li>静的メソッドを使用して削除する方法</li>
<li>クエリを組み立てて削除する方法</li>
</ol>


<p>1のやり方は、以下です。<br/>
一度、selectしてから削除という感じです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Item item = Item.load(Item.class, 1);
</span><span class='line'>item.delete();</span></code></pre></td></tr></table></div></figure>


<p>2のやり方は、以下です。<br/>
主キーさえ分かっていれば、こちらのほうが無駄なクエリを発行しない分早いです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Item.delete(Item.class, 1);</span></code></pre></td></tr></table></div></figure>


<p>3のやり方は、以下です。<br/>
複数の行をまとめて削除できたりします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>new Delete().from(Item.class).where("Id = ? and name = ?", 1, "test").execute();</span></code></pre></td></tr></table></div></figure>


<h3>参照</h3>

<hr />

<p>これも直感的に記述できます。<br/>
使い方は、s2jdbcに似ています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Item result = new Select().from(Item.class).executeSingle();
</span><span class='line'>
</span><span class='line'>List&lt;Item&gt; resultSet = new Select("id", "name").from(Item.class).execute();
</span><span class='line'>
</span><span class='line'>List&lt;Item&gt; resultSet = new Select().from(Item.class).where("Id = ? and name = ?", 1, "test").execute();</span></code></pre></td></tr></table></div></figure>


<p>上記のような形で実行できます。</p>

<ul>
<li>先頭１つのカラムデータのみ取得</li>
<li>カラムを指定した取り方</li>
<li>条件付き(s2jdcのようにandメソッドとかはありません)</li>
</ul>


<p>テーブル結合時は、以下のような形で記述します。<br/>
現状では、以下の方法しか手段がないようです。</p>

<ol>
<li>ActiveAndroidでクエリオブジェクト作成</li>
<li>1で作成したクエリオブジェクトからsqlを作成</li>
<li>2のsqlを直接実行しCursorクラスのオブジェクトを取得</li>
<li>Cusorクラスからデータを取得する(whileループ等で・・・)</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>From query = new Select().from(Item.class).innerJoin(Hoge.class).on("Hoge.id = Item.id");
</span><span class='line'>
</span><span class='line'>Cursor cursor = Cache.openDatabase().rawQuery(query.toSql(), query.getArguments());</span></code></pre></td></tr></table></div></figure>


<h2>感想</h2>

<hr />

<p>こんな感じな印象でした。簡単なものだと今後も使うかも。</p>

<ul>
<li>ActiveRecordライクなので、扱い易い</li>
<li>Modelクラスを継承したクラスを作るだけで、面倒な処理を大幅に軽減できる</li>
<li>テーブル定義にコードが引きづられやすくなるので注意</li>
<li>複雑なクエリの場合、通常のSQLiteのDB操作と変わらなくなる</li>
</ul>


<h2>資料</h2>

<hr />

<p>身内向けの勉強会で、ActiveAndroidについて発表してきました。
その時、書いた資料とかも残しておきます。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/29216122 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time Capsule(NAS)をMacとLinuxの両方から使えるようにする]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/11/29/timecapsule-mac-linux/"/>
    <updated>2013-11-29T00:18:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/11/29/timecapsule-mac-linux</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>糞お高いNASを買ってしまいました・・・<br/>
というか、買わざるを得ませんでしたorz</p>

<p>とりあえず、こんな理由で選定</p>

<ul>
<li>自宅の外付けHDDが故障気味</li>
<li>Macも自動でバックアップ取っておきたい</li>
</ul>


<p>勿論、QNAPでも良かったのですが、以下の理由で諦め</p>

<ul>
<li>HDDが別売とかでお高い(故障交換ができるのは強みですが・・・)</li>
<li>サイズが大きい</li>
<li>ルーター機能までついてるので省スペース</li>
</ul>


<p>で、バックアップだけではもったいないため、
よく使うOSで表題のようにNAS利用を使用と思いました。</p>

<h3>やってみる</h3>

<hr />

<p>やるまでに結構苦労しました。<br/>
そもそも、どうやって手をつけるのか若干悩みましたw</p>

<h5>障壁</h5>

<hr />

<p>Mac側(よしなにやってくれるが故の問題)</p>

<ul>
<li>GUI操作で自動的にマウントされる</li>
<li>自動的にマウントされるが故に何処にマウントされたか不明</li>
<li>マウント先不明の為、コマンドでlsとかcd実行できない</li>
</ul>


<p>Linux側</p>

<ul>
<li>使用プロトコルが分からない</li>
<li>マウントするためのファイルシステムは？？？</li>
<li>そもそもマウント先のIPとかディレクトリが不明</li>
</ul>


<h5>解決編</h5>

<hr />

<p>AirMacユーティリティをGUI操作して、以下を設定</p>

<ul>
<li>ファイル共有にチェック</li>
<li>共有ディスクのセキュリティをアカウントに変更(デフォルトはディスクパスワード)</li>
</ul>


<p>他の項目は、すぐにわかりました</p>

<ul>
<li>IPはすぐに発覚(GW + 末尾に数字の1追加)</li>
<li>プロトコルはafpもGUI操作時の情報で発覚</li>
</ul>


<p>Mac側は、afpをマウントする際のコマンド(mount_afp)を参照することでわかりました</p>

<p>以下のコマンドを実行するとよいようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mount -t afp afp://YOUR_USERNAME:YOUR_PASSWORD@&lt;TimeCapsuleのIP&gt;/Data &lt;マウント先ディレクトリ</span></code></pre></td></tr></table></div></figure>


<p>umountコマンドで普通に実行できます。</p>

<p>Mac側が判明したので、Linux側もほぼ同じようにしてできました。
但し、ファイルシステムを「cifs」に設定することやディスクの指定方法が異なりました。</p>

<p>以下のようにすればできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mount -t cifs -o user="YOUR_USERNAME",password="YOUR_PASSWORD" //&lt;TimeCapsuleのIP&gt; &lt;マウント先ディレクトリ&gt;</span></code></pre></td></tr></table></div></figure>


<h3>シェル化</h3>

<hr />

<p>一々、上記の内容を手打ちするのは面倒なので、シェル化しました。</p>

<p>こんなことをします。</p>

<ol>
<li>マウント先のディレクトリをチェック</li>
<li>ディレクトリがなければ作成</li>
<li>ディレクトリにマウント実行</li>
</ol>


<p>以下の環境で動作確認しています。</p>

<ul>
<li>MacOSX 10.8.5</li>
<li>CentOS6.4 x86_64</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'># TimeCapsuleの共有ディスクをアカウント認証にしておくこと
</span><span class='line'>USER="YOUR_USER_NAME"
</span><span class='line'>PASSWORD="YOUR_PASSWORD"
</span><span class='line'>MAC_DIRECTORY="/Volumes/timecapsule"
</span><span class='line'>LINUX_DIRECTORY="/mnt/timecapsule"
</span><span class='line'>TC_DIRECTORY="YOUR_TIMECAPSULE_DIRECTORY"
</span><span class='line'>
</span><span class='line'>if [ `echo "${OSTYPE}" |grep "linux*"` ]&&[ ! -d "$LINUX_DIRECTORY" ]; then
</span><span class='line'>    mkdir -p "$LINUX_DIRECTORY"
</span><span class='line'>elif [ ! -d "$MAC_DIRECTORY" ]; then
</span><span class='line'>    mkdir -p "$MAC_DIRECTORY"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>if [ `echo "${OSTYPE}" |grep "linux*"` ]; then
</span><span class='line'>    # for Linux
</span><span class='line'>    # use cifs-utils(RedHat)
</span><span class='line'>    mount -t cifs -o user="$USER",password="$PASSWORD" //"$TC_DIRECTORY" "$LINUX_DIRECTORY"
</span><span class='line'>else
</span><span class='line'>    # for Mac
</span><span class='line'>    # ユーザ:パスワード@TimeCapusleのIPアドレス
</span><span class='line'>    mount -t afp afp://"$USER":"$PASSWORD"@"$TC_DIRECTORY" "$MAC_DIRECTORY"
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails(ActiveRecord)でBULK INSERTする方法]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/11/25/ar-bulk-insert/"/>
    <updated>2013-11-25T00:12:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/11/25/ar-bulk-insert</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>RailsでRake Taskなんか作ったときは、バッチ処理するようなことを書くと思います。<br/>
多分ですが・・・</p>

<p>この前、バルクインサートをすることがあったのでやり方を残しておきます。</p>

<p>因みに、普通にrubyスクリプトの中でも使うこともできると思います(これも多分w)</p>

<h3>やり方</h3>

<hr />

<p><a href="https://github.com/zdennis/activerecord-import/wiki">activerecord-import</a>というGemを使用します。</p>

<p>Gemfileに以下を追加すれば、Rake Taskで使用することができます。<br/>
ぶっちゃけRake Taskだけではなく、普通に使うこともできますが・・・</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'activerecord-import'</span></code></pre></td></tr></table></div></figure>


<p>利用できるデータベースは以下のものです。</p>

<ul>
<li>mysql(アダプターはmysql, mysql2の両方で使用可能)</li>
<li>postgresql</li>
<li>sqlite3</li>
</ul>


<h3>前提</h3>

<hr />

<p>かなり簡単です。</p>

<p>以下のようなモデルを用意したとします。</p>

<ul>
<li>モデル名:Hoge</li>
<li>カラム(主キー): id</li>
<li>カラム(名前): name</li>
<li>カラム(テキスト): text</li>
</ul>


<p>このモデルを10個まとめてバルクインサートしたいとします。</p>

<h3>やり方</h3>

<hr />

<p>かなり簡単です。。。</p>

<ol>
<li>バルクインサートしたい数だけモデルオブジェクトを格納したリストを用意する</li>
<li>該当のモデルのimportメソッドに1で作成したリストを渡す</li>
</ol>


<p>コードに起こすとこんな感じです。。。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hoge_list = []
</span><span class='line'>10.times do |i|
</span><span class='line'>  hoge_list &lt;&lt; Hoge.new(id: i, name: "hoge #{i}", text: "fugafuga")
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Hoge.import hoge_list</span></code></pre></td></tr></table></div></figure>


<p>実行するとこんな感じのSQLが一気に発行されます。。。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSERT INTO `hoge` (`id`,`name`,`text`,`created_at`,`updated_at`) VALUES (1,'hoge 1','fugafuga','2013-11-25 00:30:30','2013-11-25 00:30:30') ON DUPLICATE KEY UPDATE `messages`.`updated_at`=VALUES(`updated_at`)
</span><span class='line'>INSERT INTO `hoge` (`id`,`name`,`text`,`created_at`,`updated_at`) VALUES (2,'hoge 2','fugafuga','2013-11-25 00:30:30','2013-11-25 00:30:30') ON DUPLICATE KEY UPDATE `messages`.`updated_at`=VALUES(`updated_at`)</span></code></pre></td></tr></table></div></figure>


<p>因みに、以下のようなオプションがあります。
利用する場合、importメソッドの引数にハッシュで指定するだけです。</p>

<ul>
<li>「:on_duplicate_key_update」: ユニークキーが重複したカラムを更新したい場合に設定</li>
<li>「:timestamps」: falseを設定すると、自分でcreated_at,created_on,update_at,update_onを設定</li>
<li>「:validate」: falseを設定すると、モデル検証をスキップする(デフォルトはtrue)</li>
</ul>


<p>こんな感じで設定します。。。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>columns = [:id, :name, :text]
</span><span class='line'>Hoge.import hoge_list, :on_duplicate_key_update =&gt; columns, :timestamps =&gt; false, :validate =&gt; false</span></code></pre></td></tr></table></div></figure>


<h3>使用感</h3>

<hr />

<p>結構、問題ない感じで使えました。。。</p>

<p>自分が使用した感じだと10万件の更新に1分程度かかったので、<br/>
データが増えていくようなモデル(テーブル)に対して、多用するのは危険かなと思いました。</p>

<p>コードベースで、バルクインサートやバルクアップデートができるところがいいですね。<br/>
データをまとめて引っ張って→データ処理→まとめて更新なんかの使い方では便利かもｗ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecordメモ その2]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/11/19/ar-memo-2/"/>
    <updated>2013-11-19T00:13:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/11/19/ar-memo-2</id>
    <content type="html"><![CDATA[<p>前回書いたので、メモをまたまた残しておく</p>

<p>今回は、以下の３つを書き起こす。</p>

<ul>
<li>既存行の更新処理</li>
<li>データ保存系メソッドの違い</li>
<li>既存行の削除処理</li>
<li>コールバック</li>
</ul>


<h3>既存行の更新</h3>

<hr />

<p>1.更新する行を特定してから更新するやり方</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table = Tables.find(12)
</span><span class='line'>table.name = "column name"
</span><span class='line'>table.save
</span></code></pre></td></tr></table></div></figure>


<p>2.属性の値を変更してからモデルオブジェクトを取得するやり方</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table = Tables.find(12)
</span><span class='line'>table.update_attribute(:name, "column_name")</span></code></pre></td></tr></table></div></figure>


<p>上はシンボルを使って、特定の１カラムのみの更新の場合</p>

<p>まとめて行を更新する場合、ハッシュを使いますね。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table = Tables.find(12)
</span><span class='line'>table.update_attributes(name: "column_name", text: "ActiveRecord")</span></code></pre></td></tr></table></div></figure>


<p>因みに、Railsだとこんな感じで使ってますね。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def update
</span><span class='line'>  table = Tables.find(params[:id])
</span><span class='line'>  if table.update_attributes(params[:table])
</span><span class='line'>    redirect_to action: :index
</span><span class='line'>  else
</span><span class='line'>    redirect_to action: :edit
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>3.行の読み込みと更新を一度に行う方法</p>

<p>これは特に言うこともないですね。<br/>
指定した行を更新し、結果をDBに反映、そのままオブジェクトを取得します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table = Tables.update(12, name: "column_name", text: "ActiveRecord")</span></code></pre></td></tr></table></div></figure>


<p>因みに、update_allメソッドを使えばまとめて更新することができます。<br/>
第1引数にupdate文、第2引数にwhere句を指定という形でやります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>table = Tbales.update_all("name = column_name, text = ActiveRecord", "id = 12")</span></code></pre></td></tr></table></div></figure>


<p>戻り値は、データベースのアダプターによって異なるようです。<br/>
大体、更新行数が返るようですが、Oracleだけ何故か違うみたいです。。。</p>

<h3>データ保存系メソッドの違い</h3>

<hr />

<table>
<thead>
<tr>
<th align="left">メソッド </th>
<th align="left"> 違い </th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">save    </td>
<td align="left">レコードが保存された場合、trueを返し、そうでなければnilを返す</td>
</tr>
<tr>
<td align="left">save!   </td>
<td align="left">保存が成功した、trueを返し、そうでなければ例外を発生</td>
</tr>
<tr>
<td align="left">create  </td>
<td align="left">保存に成功したかどうかは関係なく、ActiveRecordオブジェクトを返す。データが保存されたかどうかの確認は検証チェックが必要</td>
</tr>
<tr>
<td align="left">create! </td>
<td align="left">成功時は、ActiveRecordオブジェクトを返し、そうでなければ例外を発生</td>
</tr>
</tbody>
</table>


<p>なので、使い分けはこんな感じに行う</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if table.save
</span><span class='line'>  検証と保存に成功
</span><span class='line'>else
</span><span class='line'>  検証エラー
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>begin
</span><span class='line'>  table.save!
</span><span class='line'>rescue ActiveRecord::RecordInvalid =&gt; error
</span><span class='line'>  検証エラー
</span><span class='line'>rescue ActiveRecord::RecordNotSaved =&gt; error
</span><span class='line'>  保存に失敗(コールバックで保存が出来なかった)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>既存行の削除処理</h3>

<hr />

<p>これは２種類の方法があります。<br/>
１つ目、データベースを直接操作する感じのやり方</p>

<p>こんな感じで、id指定で削除できます。<br/>
idを格納した配列を指定することで、まとめて削除もできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Tables.delete(12)</span></code></pre></td></tr></table></div></figure>


<p>SQLのwhereを使ってまとめて削除する方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Tables.delete_all(["id = 12"])</span></code></pre></td></tr></table></div></figure>


<p>これもupdate_allメソッドと同じで削除した行数が返ってきます。</p>

<p>もう一つのやり方は、destroyメソッドを使う方法です。<br/>
こいつは、削除というよりもデータの凍結ですね。</p>

<p>特定の行のみ凍結</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Tables.destroy(12)</span></code></pre></td></tr></table></div></figure>


<p>まとめて凍結する方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Tables.destroy_all("name = ?", "column_name")</span></code></pre></td></tr></table></div></figure>


<p>因みにdeleteメソッドを使った場合、<br/>
ActiveRecordの検証メソッドが実行されないことに注意かも。</p>

<h3>コールバック順序</h3>

<hr />

<p>コールバックで独自に処理を入れたい場合ってあると思うので、ついでにメモしておく</p>

<p>新規レコードでmodel.saveを実行した場合、以下の順序でコールバックされる</p>

<ol>
<li>before_validation</li>
<li>検証処理</li>
<li>after_validation</li>
<li>before_save</li>
<li>before_create</li>
<li>挿入処理</li>
<li>after_create</li>
<li>after_save</li>
</ol>


<p>更新の場合だと以下になる</p>

<ol>
<li>before_validation</li>
<li>検証処理</li>
<li>after_validation</li>
<li>before_save</li>
<li>before_update</li>
<li>更新処理</li>
<li>after_update</li>
<li>after_save</li>
</ol>


<p>削除(model.destroy)だと、以下になる</p>

<ol>
<li>before_destroy</li>
<li>destroy処理</li>
<li>after_destory</li>
</ol>


<p>ここまでそれなりに書いたので、もうちょい参照系も書いておきたいなw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecordメモ]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/11/12/ar-memo/"/>
    <updated>2013-11-12T00:20:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/11/12/ar-memo</id>
    <content type="html"><![CDATA[<p>使ってるけど、意外と知らなかったのでメモ</p>

<h3>抽出方法は全部同じ</h3>

<hr />

<p>whereの条件指定の方法ですね。</p>

<p>以下の３つは、全て同じSQLを発行します</p>

<p>1.Hashで条件設定する方法(AR独自チックな感じで大体使う方法)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hoge.where(:title =&gt; "title", :id =&gt; 1)</span></code></pre></td></tr></table></div></figure>


<p>2.プレースホルダで地道にパラメータ設定する方法(どの言語でも通用する)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hoge.where("title = ? and id = ?", "title1", 1)</span></code></pre></td></tr></table></div></figure>


<p>3.シンボルで対応付けをわかりやすくする方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hoge.where("title = :title and id = :id", {:title =&gt; "title", :id =&gt;1})</span></code></pre></td></tr></table></div></figure>


<h3>抽出結果がなかったらレコードの新規作成をする</h3>

<hr />

<p>これ、一発でできるメソッドあったんですね。<br/>
知らなかった。。。</p>

<p>どうやらfirst_or_createというメソッドを使えばよいみたい。<br/>
で、ブロックを取ることができるので、ブロック内で挿入する値を自由に設定できる</p>

<p>以下のような感じで書くとできる模様。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hoge.where(:title =&gt; "title").first_or_create do |p|
</span><span class='line'>    p.body = "hogehoge"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>結局は裏で2回SQL発行してるだけなんですけどね。(selectとinsert)</p>

<p>と、まぁ色々とありますがこんなところで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EdTech Hackathonに行ってきた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/10/28/edtech-hackathon/"/>
    <updated>2013-10-28T23:44:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/10/28/edtech-hackathon</id>
    <content type="html"><![CDATA[<p>久しぶりにHackathonに行ってきた気がする。</p>

<p>成果は・・・</p>

<p>「これからのIT業界を支える未来のエンジニアを育成できました!!」</p>

<p>これだけだと、「Hackathonなのにコードの成果がなくないか？」<br/>
ってことになりかねないし何の事かさっぱり分からないと思うので当日の詳細を以下に載っけます。</p>

<h3>アイデア出し</h3>

<hr />

<p>通称、「Ideathon」なんだけども・・・<br/>
前日に人が集まらずだったので、チームとか作る内容もあんまりいい感じには決まらなかった。</p>

<p>例外は、自分を含めたチームぐらいでした。<br/>
一応、大雑把なアイデアを持っていたので、募集かけたらすんなりと決まりました。</p>

<p>チームメンバーというか役割は、以下の５人です。</p>

<ul>
<li>プログラム 自分</li>
<li>プログラム 大学生</li>
<li>デザイン + ディレクター 本職の方</li>
<li>素材、画像作成、プレゼン : 中学生</li>
</ul>


<p>こんな構成でした。今回は中学生がいるんですよ。中学生!!<br/>
最年少参加でした。。。</p>

<p>所謂、学生チームですね。</p>

<p># 自分がHackathonに初参加してた時よりもまだ若いのですよ。<br/>
# 時代は進むものです。</p>

<p>ディレクターとの合言葉は、「俺達、老害なんで彼らの成長を支えよう」ということでした(ぉぃ</p>

<p># 因みに、後で知ったことなのですが・・・<br/>
# チーム内で自分が一番最年長でした(> &lt;;)</p>

<p>プログラマー側の打ち合わせでは、以下のことを決めました。</p>

<ul>
<li>使用言語はJavaにする(大学生たっての希望)</li>
<li>フレームワークは、Seaser2(大学生が使用したことあるそうなので・・・)</li>
<li>サーバは、Tomcat7.x</li>
<li>DBはmysql 5.6.13</li>
<li>上記、開発環境の準備をしてくること</li>
</ul>


<p>SIer等でよくありがちな、Javaを使ったWebアプリ開発ですね。</p>

<p># 僕もいい大人(?)なので、希望は叶えてあげたいものです<br/>
# 主催者が、学生に対して、自分をJavaエンジニアとして学生に推薦したのもありますが・・・</p>

<h3>Hackathon当日の開始前</h3>

<hr />

<p>色々とドタバタしました。<br/>
手持ちで持ってきたモニターがディレクターさんのPCで使えないなどのハプニング。</p>

<p>元々のコンセプトのすり合わせを開始前のこの時点で話し合いました。</p>

<p>ハプニングの最中にディレクターさんと２人で本日のゴールを何処に落としこむかを話していました。</p>

<p># 学生さん達には秘密会議的にやってて申し訳なかった<br/>
# 実はこの時点で、ある程度本日の着地点(現実的に出来そうな範囲)の見積もりを立ててました。</p>

<h3>Hackathon当日の午前</h3>

<hr />

<p>開始と同時に、「こういう機能でこういう表示方法にしましょう」ということを<br/>
ディレクターさんとワイヤーフレームモデルを使って合意を取りました。</p>

<p># ここは勝手に進めて学生さんに申し訳なかった・・・。</p>

<p>デザイナーとして活躍してくれる中学生は、ディレクターさんに任せ、プログラマー側はプログラマー同士で作業をすすめることにしました。</p>

<p>プログラマー側では、大学生側の開発環境が出来ていなかったので、開発環境を構築することにしました。</p>

<p>tomcatのインストールやmysqlのインストール&amp;設定、eclipseの設定を教えながら進めました。</p>

<p>インストールの待ち時間の間、作成するものの以下の内容について説明してました。</p>

<ul>
<li>アプリケーションの説明</li>
<li>表示する画面の構成要素の説明&amp;簡単な構成案</li>
<li>DB設計</li>
</ul>


<p>この中で以下のついてどうやって見つければ良いかの説明を行いました。</p>

<ul>
<li>どうやればDB設計ができるか</li>
<li>画面の構成要素はどう決めればよいか</li>
<li>暗黙的な要件の見つけ方(画面に現れない&amp;前提としている内容等)</li>
</ul>


<p>そうこう説明しているうちに午前中が終了でお弁当タイムになりました。<br/>
唐揚げ弁当うまかったなー</p>

<h3>Hackathon当日の午後</h3>

<hr />

<p>午前中に開発環境の構築や設計周りの教示に費やしていたので、<br/>
当初のゴールまで難しいことが、この時点で判明。</p>

<p>ディレクターと話をして、「彼らのスキルアップというか育成に費やそう」ということにしました。</p>

<p># EdTechということで教育がテーマだからいいかーということでお互いに合意しました。</p>

<p>はじめは、自分で進めてみようということで、お互いの機能を実装することに専念しました。<br/>
自分の担当した機能は実装と簡単な動作試験まで完了することができました。</p>

<p># この間、１時間無いぐらい。</p>

<p>この後、終了時間３０分前までは、大学生につきっきりになり、以下のことをマンツーマンで教示しました。<br/>
所々、ペアプロも含んでいます。</p>

<ul>
<li>リーダブルコード的なこと(メソッド名の命名規則や付随すること諸々)</li>
<li>スコープの話と(自分の考える)ポリシー(publicにしたら何処からでも使われるので、javadoc書く等)</li>
<li>Seaser2の設計思想とMVC的な話</li>
<li>Seaser2の実装方法や設定の説明&amp;解説</li>
<li>コードの書き始めはどうしたらよいのか(逐次的に処理概要をTODOで書いてみるなどのやり方の話)</li>
<li>コードのリファクタリング等</li>
<li>eclipseのショートカットキーや設定全般</li>
</ul>


<p>ざっと覚えてるのは、この辺りだけどもっとなにか色々と偉そうに言ってたような気がする。。。</p>

<p>終了まで残り３０分のところで、自分が作った部分の機能とデザインをマージ作業しました。<br/>
マージ作業中は、大学生放置しましたけど、許して下さいm(<em> </em>)m</p>

<p>久しぶりにwebapp/WEB-INF周りを弄ったので、jsp含んでた場合リソースの扱いに注意すること忘れてトラブりました。</p>

<p># 今回の場合だと、「webapp」ディレクトリ直下に置かないと認識されませんでしたw</p>

<p>最後のプレゼンは、中学生が頑張ってくれました!!<br/>
自分には中々できないプレゼンや将来的にこういう機能もあればいいかもーみたいな案も考えてくれていました!!</p>

<h3>感想</h3>

<hr />

<p>久しぶりにいい刺激を受けました。<br/>
社内にいてもいい刺激を受けることが多いですが、外部のエンジニアとの交流もいいものです。<br/>
何よりものを作り上げるのは楽しいです。</p>

<p>今回のHackathonに関してはものを作るよりも、教育していたほうが長かったです。 <br/>
ですが、自分にも得るものがありましたし、復習の機会になりました。<br/>
大学生の彼が、自分の拙い説明で何かを得てくれれば自分も嬉しいと思います。</p>

<p># 自分が初めてHackathonに出た時のようにですが・・・</p>

<h3>Hackathonで構築した開発環境と簡単な設計メモ</h3>

<hr />

<p>以下に、説明に使用したメモを残します。<br/>
こいつを参考にするとTomcat7.x + Eclipse + Seaser2な開発環境は構築できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>★tomcatインストール
</span><span class='line'>$brew install tomcat
</span><span class='line'>
</span><span class='line'>1.ホームディレクトリの.bash_profileに以下を追加
</span><span class='line'>
</span><span class='line'>export CATALINA_HOME='/usr/local/Cellar/tomcat/7.0.42/libexec'
</span><span class='line'>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_25.jdk/Contents/Home
</span><span class='line'>PATH=${JAVA_HOME}/bin:$PATH
</span><span class='line'>PATH=$PATH:${CATALINA_HOME}
</span><span class='line'>
</span><span class='line'>2.ターミナル上で$source .bash_profileを実行
</span><span class='line'>3.tomcat起動「/usr/local/Cellar/tomcat/7.0.42/libexec/bin/startup.sh」
</span><span class='line'>4.tomcat停止「/usr/local/Cellar/tomcat/7.0.42/libexec/bin/shutdown.sh」
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Homebrewが無ければ、インストールして下さい
</span><span class='line'>使用しているShell(bash以外)が違う場合は適宜読み替えて下さい
</span><span class='line'>
</span><span class='line'>★eclipse
</span><span class='line'>1.「http://www.eclipsetotale.com/tomcatPlugin.html」から最新のプラグインをダウンロード
</span><span class='line'>2.ダウンロードしたzipを解答して、できたディレクトリごと eclipseのディレクトリの下に移動
</span><span class='line'>3.eclipseを再起動
</span><span class='line'>4.設定→tomcat
</span><span class='line'>5.tomcatのバージョンを7に変更
</span><span class='line'>6.HOMEを/usr/local/Cellar/tomcat/7.0.42/libexec
</span><span class='line'>7.適用を押す
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>これでeclipse上からtomcat操作ができる
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>★mysql
</span><span class='line'>brew install mysql
</span><span class='line'>
</span><span class='line'>DBの保存先とキャッシュの保存場所の設定
</span><span class='line'>mysql_install_db --verbose --user=`whoami` --basedir="$(brew --prefix mysql)" --datadir=/usr/local/var/mysql --tmpdir=/tmp
</span><span class='line'>
</span><span class='line'>rootパスワードの設定
</span><span class='line'>mysql.server start
</span><span class='line'>mysqladmin -u root password '好きなパスワード'
</span><span class='line'>mysql -uroot -p
</span><span class='line'>
</span><span class='line'>何でもできるユーザーの追加(本当はここはしっかりと考える必要あるけど今回はハッカソンなのでパス)
</span><span class='line'>GRANT ALL PRIVILEGES ON *.* TO edtech@localhost IDENTIFIED BY 'edtechhackathon' WITH GRANT OPTION;
</span><span class='line'>GRANT ALL PRIVILEGES ON *.* TO edtech@'%' IDENTIFIED BY 'edtechhackathon' WITH GRANT OPTION;
</span><span class='line'>mysql -uedtech -pedtechhackathon
</span><span class='line'>
</span><span class='line'>データベースの作成
</span><span class='line'>create database edtechhackathon;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>これで開発をします。
</span><span class='line'>ユーザー名:edtech
</span><span class='line'>パスワード:edtechhackathon
</span><span class='line'>
</span><span class='line'>jdbcドライバはこんな感じかな
</span><span class='line'>jdbc:mysql://localhost:3306/edtechhackathon
</span><span class='line'>接続ユーザー:edtech
</span><span class='line'>接続パスワード:edtechhackathon
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>★Doltengのインストール(一応)
</span><span class='line'>したがって行う
</span><span class='line'>http://dolteng.sandbox.seasar.org/
</span><span class='line'>→DBからエンティティを自動生成するので使う
</span><span class='line'>
</span><span class='line'>★eclipsemarket placeからインストール
</span><span class='line'>プロパティエディタのインストール
</span><span class='line'>maven integrationプラグイン
</span><span class='line'>
</span><span class='line'>★Devloder
</span><span class='line'>mkdir -p /usr/local/Cellar/tomcat/7.0.42/libexec/server/lib
</span><span class='line'>$cp /Applications/eclipse/plugins/com.sysdeo.eclipse.tomcat_3.3.0/DevloaderTomcat7.jar /usr/local/Cellar/tomcat/7.0.42/libexec/lib/
</span><span class='line'>
</span><span class='line'>★mysql追加
</span><span class='line'>mysql.server stop
</span><span class='line'>cp /usr/local/Cellar/mysql/5.6.13/my.cnf /usr/local/Cellar/mysql/5.6.13/my.cnf.20131026
</span><span class='line'>「port = 3306」を記述
</span><span class='line'>mysql.server start
</span><span class='line'>
</span><span class='line'>★確認用データ投入
</span><span class='line'>mysql -uedtech -p -hlocalhost edtechhackathon
</span><span class='line'>CREATE TABLE sample(id int auto_increment primary key, data varchar(255) NOT NULL UNIQUE, created_at datetime NOT NULL) ENGINE=InnoDB; 
</span><span class='line'>insert into sample(data, created_at) values('test', '2013-10-26');
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>★usersテーブル
</span><span class='line'>入力項目は、以下のもの
</span><span class='line'>・名前
</span><span class='line'>・メール
</span><span class='line'>・パスワード(アプリ側でBlowfish形式で暗号化しておくこと、暗号化の鍵はedtechとパスワード入力値とする。初期でinsertする内容は「test」にする)、
</span><span class='line'>・Roleは1(教師)、0(親)、2(管理者)で表現(アプリ側で数値を見てRoleの判断する)
</span><span class='line'>
</span><span class='line'>create table users( user_id int auto_increment primary key, name varchar(255) not null, mail varchar(255) not null, password varchar(255) not null, role int not null) ENGINE=InnoDB; 
</span><span class='line'>
</span><span class='line'>★fixture
</span><span class='line'>insert into users(name, mail, password, role) values('hoge', 'hogeATgmail.com', '0791e4e0ade0f161', '2');
</span><span class='line'>insert into users(name, mail, password, role) values('fuga', 'fugaAtgmail.com', '0791e4e0ade0f161', '1');
</span><span class='line'>insert into users(name, mail, password, role) values('hogehoge', 'hogehogeAtgmail.com', '0791e4e0ade0f161', '0');</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octpressで記事を一度公開停止→再公開をしたい場合の方法]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/10/19/fix-octpress-page/"/>
    <updated>2013-10-19T10:24:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/10/19/fix-octpress-page</id>
    <content type="html"><![CDATA[<p>何個か前の記事を加筆修正したときの手順をまとめます。<br/>
但し、このやり方はpush内容を残したくないときのやり方に加えて、<br/>
ハッシュ値を知ってれば参照できてしまうという点があります。<br/>
(公開されているページは修正されたものが表示されます)</p>

<h3>記事の公開停止方法</h3>

<hr />

<p>以下の順序で変更を行います</p>

<ol>
<li>octpressでgithubにpushしているディレクトリに移動する</li>
<li>gitコマンドで記事をpushしたコミットまで遡って、 変更取り消しを行う</li>
</ol>


<p>それぞれコマンドは以下のようになります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$cd ~/octpress/_deploy
</span><span class='line'>$git push -f origin master:HEAD^^</span></code></pre></td></tr></table></div></figure>


<p>これで、２つ前の記事公開の状態まで変更することができました。
同じ方法をとれば、記事の順序を入れ替え(削除)した状態で公開することも出来ると思います。<br/>
(git rebase後にpush origin masterなどすればです)</p>

<h3>再公開方法</h3>

<hr />

<p>普通に記事を生成して再度サーバにpushして下さい。<br/>
ファイルの日付や記事の日付を修正していなければ、
公開停止前と同じURLになります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[packerを使用して、VirtualMachineで動くVagrant用のBoxファイルを作成した]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/10/16/packer-basic/"/>
    <updated>2013-10-16T00:23:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/10/16/packer-basic</id>
    <content type="html"><![CDATA[<p>昨日(日付の上では、一昨日)にあったGo Conference 2013 autumnに行ってきました。</p>

<p>野良Hackathonがあったので、久々のGo慣らしも兼ねてpackerで１つ環境用意してやるかといった感じでやってました。<br/>
勿論、イメージ作ってる待ち時間の間にpackerのソースも読んでました<br/>
正直、ドキュメント読んで(?)ってなったところもあったので読んだとかそんな感じです。</p>

<p>Google I/O以来に会った<a href="https://twitter.com/ymotongpoo">@ymotongpoo</a>さんにLTやらね？って誘われた。<br/>
然しながら、Goのネタが今手元に無かったので、LT時刻までにpackerで環境用意できたらやるって言ったけど、出来なかったのでLT諦めた。<br/>
後で、すごい誤った。(完成したのは、LT終了して暫くしてからだった)<br/>
<a href="https://twitter.com/ymotongpoo">@ymotongpoo</a>さん、もし見てたら次回のGoConではLTやれるように準備しておきます。</p>

<p>という訳で、代わり(?)に表題の内容をやります。</p>

<h2>最終ゴール</h2>

<hr />

<p>以下のコマンドでVirtualBox上で動作するCentOS6.4(64bit)が起動してログインできるようにする</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$vagrant up</span></code></pre></td></tr></table></div></figure>


<p>但し、Vagrant側では、特にアプリケーションのインストールを実施せず、packer側で以下の２点を満たすこと</p>

<ul>
<li>最小インストールしたパッケージを全て最新化すること</li>
<li>Gitをインストールすること</li>
</ul>


<h2>前提</h2>

<hr />

<p>前提がないとお話にならないので、以下が入ってることにします。</p>

<ul>
<li>Vagrant 1.3.4</li>
<li>VirtualBox 4.2.16</li>
<li>Go 1.1.2</li>
</ul>


<p>こいつらが入ってない場合は、入れて下さい。</p>

<p>あと、実行環境はMacでやってますが、Linuxも似たような感じでできると思います。<br/>
Windowsは知らないですが多分できるんじゃないかなぁと思います。</p>

<h3>packerのインストール</h3>

<hr />

<p>packerをインストールします。<br/>
公式の手順に従えば1発でインストールできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$brew tap homebrew/binary
</span><span class='line'>$brew install packer</span></code></pre></td></tr></table></div></figure>


<h3>OSインストール用のkickstartファイルを用意する</h3>

<hr />

<p>kickstartは、RHEL系(CentOSなど)OS のインストール&amp;セットアップが自動化できることを指します。<br/>
で、一応OSインストールした時の構成がOS側で記録されていまして、「/root/anaconda-ks.cfg」がkickstartファイルになります。<br/>
他にも、system-config-kickstart.noarchをインストールすることでGUIで設定ファイルを用意できるようになっています。</p>

<p>以下のような感じで最小構成インストールファイルを用意します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>install
</span><span class='line'>cdrom
</span><span class='line'>lang en_US.UTF-8
</span><span class='line'>keyboard us
</span><span class='line'>network --bootproto=dhcp
</span><span class='line'>rootpw --iscrypted $1$FB.fOroc$b2.YcN30BjrYxlUbECUxO1
</span><span class='line'>firewall --enabled --service=ssh
</span><span class='line'>authconfig --enableshadow --passalgo=sha512
</span><span class='line'>selinux --disabled
</span><span class='line'>timezone UTC
</span><span class='line'>bootloader --location=mbr
</span><span class='line'>
</span><span class='line'>text
</span><span class='line'>skipx
</span><span class='line'>zerombr
</span><span class='line'>
</span><span class='line'>clearpart --all --initlabel
</span><span class='line'>autopart
</span><span class='line'>
</span><span class='line'>auth  --useshadow  --enablemd5
</span><span class='line'>firstboot --disabled
</span><span class='line'>reboot
</span><span class='line'>
</span><span class='line'>%packages --nobase
</span><span class='line'>@core
</span><span class='line'>%end
</span><span class='line'>
</span><span class='line'>%post
</span><span class='line'>/usr/bin/yum -y install sudo
</span><span class='line'>/usr/sbin/groupadd moonstruckdrops
</span><span class='line'>/usr/sbin/useradd moonstruckdrops -g moonstruckdrops -G wheel
</span><span class='line'>echo "moonstruckdrops"|passwd --stdin moonstruckdrops
</span><span class='line'>echo "moonstruckdrops        ALL=(ALL)       NOPASSWD: ALL" &gt;&gt; /etc/sudoers.d/moonstruckdrops
</span><span class='line'>chmod 0440 /etc/sudoers.d/moonstruckdrops
</span><span class='line'>%end</span></code></pre></td></tr></table></div></figure>


<p>最小インストールを実施した後にsudoをインストールし、ログインユーザーを新規に追加しています。</p>

<p>因みに、rootパスワードは以下のコマンドで生成します。<br/>
生成された文字列をrootpwに記述します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$openssl passwd -1</span></code></pre></td></tr></table></div></figure>


<h3>jsonファイルを作成する</h3>

<hr />

<p>細かい解説は抜きにして、以下のような感じで作成します。<br/>
大体、ドキュメントに書いてあるので直感的に分かるかと思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "builders": [
</span><span class='line'>        {
</span><span class='line'>            "type": "virtualbox",
</span><span class='line'>            "vm_name": "centos_box",
</span><span class='line'>            "guest_os_type": "RedHat_64",
</span><span class='line'>            "disk_size": "20000",
</span><span class='line'>            "format": "ovf",
</span><span class='line'>            "hard_drive_interface":"sata",
</span><span class='line'>            "boot_wait": "5s",
</span><span class='line'>            "iso_url": "http://ftp.iij.ad.jp/pub/linux/centos/6.4/isos/x86_64/CentOS-6.4-x86_64-minimal.iso",
</span><span class='line'>            "iso_checksum_type": "md5",
</span><span class='line'>            "iso_checksum": "4a5fa01c81cc300f4729136e28ebe600",
</span><span class='line'>            "ssh_username":"root",
</span><span class='line'>            "ssh_password":"vagrant",
</span><span class='line'>            "ssh_port": 22,
</span><span class='line'>            "shutdown_command": "shutdown -h now",
</span><span class='line'>            "guest_additions_path": "VBoxGuestAdditions_.iso",
</span><span class='line'>            "virtualbox_version_file": ".vbox_version",
</span><span class='line'>            "vboxmanage":[
</span><span class='line'>                ["modifyvm", "", "--memory", "1024"],
</span><span class='line'>                ["modifyvm", "", "--cpus", "2"]
</span><span class='line'>            ],
</span><span class='line'>            "http_directory": "./builders/",
</span><span class='line'>            "boot_command": [
</span><span class='line'>                "&lt;tab&gt; text ks=http://:/ks.cfg&lt;enter&gt;&lt;wait&gt;"
</span><span class='line'>            ]
</span><span class='line'>        }
</span><span class='line'>    ],
</span><span class='line'>    "provisioners": [{
</span><span class='line'>        "type": "shell",
</span><span class='line'>        "inline": [
</span><span class='line'>            "sleep 30",
</span><span class='line'>            "sudo yum -y update",
</span><span class='line'>            "sudo yum -y install git"
</span><span class='line'>            ]
</span><span class='line'>    }],
</span><span class='line'>    "post-processors": [{
</span><span class='line'>        "type": "vagrant",
</span><span class='line'>        "output": "centos.box"
</span><span class='line'>    }]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>ビルドしてイメージを作成する</h3>

<hr />

<h5>作成したjsonに誤りがないことを確認する</h5>

<p>以下のコマンドを使用して確認する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$packer validate</span></code></pre></td></tr></table></div></figure>


<p>以下の実行結果になれば、エラーなく記述できている</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Template validated successfully.</span></code></pre></td></tr></table></div></figure>


<p>エラーだと、こんな感じでどこが誤っているか教えてくれる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Failed to parse template: Error in line 14, char 8: invalid character '"' after object key:value pair</span></code></pre></td></tr></table></div></figure>


<h5>ビルドを行う</h5>

<p>うまくいけば、期待した結果の仮想マシンができている</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$packer build -only=virtualbox centos.json</span></code></pre></td></tr></table></div></figure>


<h3>vagrantを使ってインストールしたOSを起動する</h3>

<hr />

<p>やることは非常に簡単です。</p>

<p>まず、初期化します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$vagrant init</span></code></pre></td></tr></table></div></figure>


<p>vagrantの設定ファイルを編集します。</p>

<ul>
<li>「config.vm.box_url = &#8220;your_boxfile_path&#8221;」に生成したファイルのパスを記述</li>
<li>「vb.gui = true」 を有効化(コメント削除)</li>
</ul>


<p>最後に起動します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$vagrant up</span></code></pre></td></tr></table></div></figure>


<p>うまくいけば、最終ゴールの内容で起動します。</p>

<h3>嵌ったビルドエラー</h3>

<hr />

<p>ビルドを行うと以下のようなビルドエラーに遭遇します。<br/>
エラーになると、以下のようなエラーになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>==&gt; virtualbox: Waiting for SSH to become available...
</span><span class='line'>==&gt; virtualbox: Timeout waiting for SSH.
</span><span class='line'>==&gt; virtualbox: Unregistering and deleting virtual machine...
</span><span class='line'>==&gt; virtualbox: Deleting output directory...
</span><span class='line'>Build 'virtualbox' errored: Build was halted.</span></code></pre></td></tr></table></div></figure>


<p>解決方法ですが、「&#8221;ssh_wait_timeout&#8221;」の値を長めに設定する、もしくはjsonに記述しない(デフォルトは20min設定のため)こと<br/>
少し考えれば理解できた話なんですが、そもそもこのsshはどこで使用するかというとOSインストール完了後、即ちprovisionersで利用します。<br/>
そのため、インストールしたOSに接続するためsshが必要になるということです。(ゴールの場合だと、updateとgitインストール)<br/>
こういうことから、OSインストールが終わるまでssh接続できないからsshがタイムアウトしていたということです。</p>

<p>そもそも、公式のドキュメントに「&#8221;ssh_wait_timeout&#8221;:&#8221;30s&#8221;」と記述してあり、sshがどこで使われるのか言及していないことも嵌る原因だと思います。</p>

<h3>感想というか思うところ</h3>

<hr />

<p>ドキュメントもかなり充実してるんで、BOXファイルを作成するまでは割りとすんなりいけるかなぁと思います。<br/>
一部、嵌まりどころもありますが・・・。</p>

<p>一方で、仕組み上仕方ない部分もありますが、kickstartやその他OS自動インストールの知識がないと使いづらい印象を受けました。<br/>
尤も、こういうツールに手を出す人は、知識持ちの人かもしれませんが・・・</p>

<p>「packer + Vagrant + Chef」を組み合わせれば、かなりプラットフォーム及び開発環境系の自動化ができるなぁと思いました。</p>

<p>しかし、これがGoで作られているのがすごいよなぁ・・・。<br/>
Goマジイケてると思います。</p>
]]></content>
  </entry>
  
</feed>
