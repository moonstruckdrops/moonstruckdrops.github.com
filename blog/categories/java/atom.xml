<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2015-12-13T01:58:48+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Heroku上でJersey + Jetty + Gradleを動かす]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/03/17/jersey-on-heroku/"/>
    <updated>2015-03-17T01:14:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/03/17/jersey-on-heroku</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>JavaでRestfulといえば、JAX-RSが有名ですね。</p>

<p>それを扱いやすくしたFrameworkといえば、<a href="https://jersey.java.net/">Jersey</a>になります。<br/>
これをHerokuで動かすようにしてみます。</p>

<p>ついでにオワコン臭漂うmavenを辞めて、Gradleでビルドができるようにもしてみます</p>

<h3>目標</h3>

<hr />

<p>以下ができていること</p>

<ul>
<li>Heroku上でJerseyが動くこと</li>
<li>HerokuではJettyがサーブレット・コンテナとして動くこと</li>
<li>ビルドツールには、デフォルトのmavenではなくGradleであること</li>
</ul>


<h3>Jersey</h3>

<hr />

<p>まずはmaven ArchTypeから必要なファイルを準備</p>

<p><a href="https://jersey.java.net/download.html">ここ</a>を参考にすると、ArchTypeは2種類あることが分かります。</p>

<p>今回はJettyで動かすので、サーブレットコンテナ用のものを使います</p>

<p><code>
mvn archetype:generate -DarchetypeGroupId=org.glassfish.jersey.archetypes -DarchetypeArtifactId=jersey-quickstart-webapp -DarchetypeVersion=2.17
</code></p>

<p>必要項目を聞かれますので、以下のような感じで入力していきます</p>

<p><code>
Define value for property 'groupId': : kurobara
Define value for property 'artifactId': : kurobara
Define value for property 'version': 1.0-SNAPSHOT:
Define value for property 'package': kurobara: kurobara
</code></p>

<p>成功すれば、以下の構成になります</p>

<p><code>
├── pom.xml
├── src
│   └── main
│       ├── java
│       │   └── kurobara
│       │       └── MyResource.java
│       ├── resources
│       └── webapp
│           ├── WEB-INF
│           │   └── web.xml
│           └── index.jsp
</code></p>

<h3>mavenの削除</h3>

<hr />

<p>普通に考えると、mavenを使わなければpom.xmlを残してもよいかと思います(自分も最初は思いました)
Herokuではmavenがデフォルトで使われますので、削除してしまいます</p>

<p><code>
rm pom.xml
</code></p>

<p>どうやら、mavenとGradleの両方のビルドファイルが存在するとHerokuではmavenのものが最優先で使われるようです</p>

<h3>Gradleの追加</h3>

<hr />

<p>以下の内容を<code>build.gradle</code>に記載します</p>

<p>このファイルのミソは<code>task stage(dependsOn: ['clean', 'installApp'])</code>を記載していることです。
Herokuではこのタスクが必要なようです。</p>

<p><a href="https://github.com/heroku/devcenter-gradle">公式</a>を参考にしました。</p>

<p>多分、必要無いと思いますが念のためgradlewも用意しました(自分は一応、これもファイルに追加しています)</p>

<p>```
apply plugin: "java"
apply plugin: "war"
apply plugin: "jetty"
apply plugin: 'application'</p>

<p>group = "kurobara"
version = 1.0
sourceCompatibility = 1.7
mainClassName = "kurobara"
applicationName = "kurobara"</p>

<p>def defaultEncoding = 'UTF-8'
[
  compileJava,
  compileTestJava,
  javadoc
]<em>.options</em>.encoding = defaultEncoding</p>

<p>repositories {
  mavenLocal()
  maven { url "http://maven.seasar.org/maven2" }
  mavenCentral()
}</p>

<p>dependencies {
  compile 'org.eclipse.jetty:jetty-server:9.2.10.v20150310'
  compile 'org.eclipse.jetty:jetty-webapp:9.2.10.v20150310'
  compile 'org.glassfish.jersey.core:jersey-server:2.17'
  compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.17'</p>

<p>  testCompile 'junit:junit:4.10'
}</p>

<p>task stage(dependsOn: ['clean', 'installApp'])</p>

<p>[jettyRun, jettyRunWar]<em>.httpPort = 8090
[jettyRun, jettyRunWar]</em>.contextPath = 'kurobara'</p>

<p>task wrapper(type: Wrapper) {
  gradleVersion = '1.6'
}
```</p>

<h3>Jettyの準備</h3>

<hr />

<p>最低限度の内容でJettyサーバが動くようにします</p>

<p>mainメソッドにサーバの実装を記載します。</p>

<p>Gradleに記載したように、これがmainClassになります(mainClassNameを参照)</p>

<p>```
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.webapp.WebAppContext;</p>

<p>public class Main {</p>

<p>  public static void main(String[] args) throws Exception {</p>

<pre><code>  Server server = new Server(Integer.valueOf(System.getenv("PORT")));

  WebAppContext context = new WebAppContext();
  context.setServer(server);
  context.setContextPath("/");
  context.setResourceBase("src/main/webapp");
  context.setClassLoader(Main.class.getClassLoader());
  server.setHandler(context);

  server.start();
  server.join();
</code></pre>

<p>  }
}
```</p>

<p>以下の構成になるようにMainクラスを配置します</p>

<p><code>
├── build.gradle
├── src
│   └── main
│       ├── java
│       │   └── kurobara
│       │       ├── Main.java &lt;- これを追加
│       │       └── MyResource.java
│       ├── resources
│       └── webapp
│           ├── WEB-INF
│           │   └── web.xml
│           └── index.jsp
</code></p>

<h3>動作確認</h3>

<hr />

<p>まずは、テストが動くかどうか確認</p>

<p><code>
$gradle clean
$gradle test
</code></p>

<p>次にアプリをビルドし、サーバを起動</p>

<p><code>
$gradle clean
$gradle build
$gradle jettyRunWar
</code></p>

<p>以下のコマンドで<code>Got it!</code>が返却されるか確認</p>

<p><code>
curl -v http://localhost:8090/kurobara/webapi/myresource
</code></p>

<h3>Heroku環境用の準備</h3>

<hr />

<p>Herokuで動かすJavaのバージョンを指定するsystem.propertiesを作成<br/>
(以下のようにとりあえず確実に動作するバージョンを指定)</p>

<p><code>
java.runtime.version=1.7
</code></p>

<p>Procfileに記載するスクリプトファイルの確認</p>

<p><code>
$gradle stage
</code></p>

<p>こういう形にビルド結果が出力されているので、アプリケーション起動スクリプトのファイルパスを確認する</p>

<p><code>
├── build
│   ├── classes
│   │   └── main
│   │       └── kurobara
│   │           ├── Main.class
│   │           └── MyResource.class
│   ├── dependency-cache
│   ├── install
│   │   └── kurobara
│   │       ├── bin
│   │       │   ├── kurobara &lt;- これが起動用ファイル
│   │       │   └── kurobara.bat
</code></p>

<p>生成したスクリプトファイルパスをProcfileに記載</p>

<p><code>
web: ./build/install/kurobara/bin/kurobara
</code></p>

<p>不要ファイルを無視するように.gitignoreを作成<br/>
(Herokuへのデプロイはgitのため)</p>

<p><code>
build/
.gradle/
</code></p>

<p>最終的に以下の構成になります</p>

<p><code>
├── .gitignore
├── Procfile
├── build.gradle
├── src
│   └── main
│       ├── java
│       │   └── moonstruckdrops
│       │       ├── Main.java
│       │       └── MyResource.java
│       ├── resources
│       └── webapp
│           ├── WEB-INF
│           │   └── web.xml
│           └── index.jsp
└── system.properties
</code></p>

<h3>Herokuへdeploy</h3>

<hr />

<p>herokuへloginする</p>

<p><code>
$ brew install heroku
$ heroku login
</code></p>

<p>サーバへデプロイする</p>

<p><code>
$ git init
$ git add .
$ git commit -m "Ready to deploy"
$ git remote add heroku your_heroku_path
$ git push heroku master
</code></p>

<p>以下のコマンドで<code>Got it!</code>が返却されるか動作確認</p>

<p><code>
$curl -v http://your_app.herokuapp.com/webapi/myresource
</code></p>

<h3>感想</h3>

<hr />

<p>書くと簡単でしたが、実際にやってみると思った以上に嵌まりどころが多かった</p>

<p>特に以下が盛大な罠でした</p>

<ul>
<li>Procfileに書くファイルはどれなのか</li>
<li><code>heroku logs</code>を確認すると<code>app crash</code>と表示されて何がなんだかわからんかったこと</li>
<li><code>app crash</code>起因ですがweb.xmlはいじらなくてもいいのか？なんて思ったこと</li>
</ul>


<p>一度環境さえ準備できれば開発に専念できるようになるので、非常に楽ですね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なぜApacheとTomcatを連携させるのか]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/03/17/apache-plus-tomcat/"/>
    <updated>2015-03-17T00:12:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/03/17/apache-plus-tomcat</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>同僚とApacheとTomcatって何で連携させるんだっけ？<br/>
という話が出たので備忘録的に記載しておきます</p>

<p>ぶっちゃけ、今更感がすごい内容ですが・・・</p>

<h3>Apache</h3>

<hr />

<p>ざっくり言うと、クライアントのブラウザからアクセスし、サービスを提供するためのWebサーバソフトウェア</p>

<h3>Tomcat</h3>

<hr />

<p>こちらもざっくり言うと、以下のもの</p>

<ul>
<li>「サーブレット・コンテナ」(Servlet等を動作させるために必要なWebアプリケーションサーバ)</li>
<li>Servletのインスタンス管理やセッションの管理</li>
<li>Webサーバ機能有り(主に開発とデバッグ用)</li>
</ul>


<h3>連携理由</h3>

<hr />

<p>開発、デバッグ用途としてWebサーバ機能があるので、問題はないのですが
そもそもとして、ApacheなどのWebサーバの性能と同等に捌けるかは疑問があったりするところ</p>

<p>なので、以下の処理分担としたほうが効率よく捌けるため連携をさせることが多い</p>

<ul>
<li>静的コンテンツ(HTMLや画像ファイルなど)の処理はApacheが担当(何故なら、高速でTomcatに比べて高速に処理できるから)</li>
<li>動的コンテンツに関しての処理をTomcatが担当</li>
</ul>


<p>所謂、餅は餅屋ということですな</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logbackで動的にログの出力先を変更する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/02/15/logback-synamic-log/"/>
    <updated>2014-02-15T21:42:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/02/15/logback-synamic-log</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>といっても大したことではなく、「同僚にできないの？」って質問されたことが発端です。</p>

<p>やったこと無かったけど、気になったので調べてみることにしました。</p>

<p>業務要件的にも、以下のことはありそうな感じかなーとは思いましたがｗ</p>

<ul>
<li>あるログはデフォルトの出力先に</li>
<li>致命的なエラーは、ログの出力方法はそのままで別の出力先に</li>
</ul>


<h3>やり方</h3>

<hr />

<p>割りと簡単に出来ました</p>

<p>手順としてはこんな感じ・・・</p>

<ol>
<li>Loggerを取得する</li>
<li>Loggerから変更対象の設定名でAppenderを取得する</li>
<li>AppenderをFileAppenderにキャストする(コレがミソ)</li>
<li>ログ出力を一時停止する</li>
<li>setFileメソッドで出力先ファイルを変更する</li>
<li>ログ出力を再開する</li>
</ol>


<p>コードにするとこんな感じかな(loggerの取得方法は色々変りそうだけど・・・)</p>

<p><code>
Logger logger = LoggerFactory.getLogger(LogbackLogging.class);
FileAppender&lt;ILoggingEvent&gt; fileAppender = (FileAppender&lt;ILoggingEvent&gt;) logbackLogger.getAppender("FILE");
fileAppender.stop();
fileAppender.setFile("your_new_log_file");
fileAppender.start();
</code></p>

<p>実は、以下の２つのことで気が付きましたw</p>

<ul>
<li><a href="http://logback.qos.ch/apidocs/index.html">javadoc</a>(Appender<E>を実装してる)</li>
<li>getAppenderメソッドの戻り値(Appender<E>が返される)</li>
</ul>


<h3>感想</h3>

<hr />

<p>割りと簡単にできるんですねw</p>

<p>後はこの処理をラップしたようなクラス&amp;静的メソッドを作ると汎用的に使えていいのではないだろうか。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[log4j 2を使った。おまけで他のloggingも用意した。]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/12/23/java-logging/"/>
    <updated>2013-12-23T03:27:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/12/23/java-logging</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>今はRails使いですが、数年前まではJava使いでした。<br/>
何やらlog4jがメジャーバージョンアップ始めたという噂を聞いたので試してみました。<br/>
因みに、自分が最後に使っていたのは「slf4j + logback」です。</p>

<h3>コード類</h3>

<hr />

<p>コードは<a href="https://github.com/moonstruckdrops/java-logging-sample/tree/master/Log4j2Sample">github</a>に置きました。<br/>
どれも必要最低限のライブラリしか使っていませんので、動作の参考になるかと思います。</p>

<p>特にivy, maven, gradleを使うと必要以上のライブラリまで取ってくるので、解決に困っている方がいれば役立つかも・・・</p>

<p># 自分が偶に忘れるなんてことは言えない・・・</p>

<h3>log4j 2.x</h3>

<hr />

<p><a href="http://logging.apache.org/log4j/2.x/index.html">本家</a>曰く、何やらこんなことが増えたらしい。</p>

<ul>
<li>APIの分離</li>
<li>パフォーマンス(性能)改良</li>
<li>multiple API(commons-logging, slf4j)のサポート</li>
<li>設定の自動リロード</li>
<li>logbackライクなFilter設定</li>
<li>plugin機構の追加</li>
</ul>


<p>後は、地味に細かい改良があったりします。。。</p>

<h3>セットアップ</h3>

<hr />

<p>ライブラリ(2013/12/22時点)は、以下のものがあればよいようです。</p>

<ul>
<li>log4j-api-2.0-beta9.jar</li>
<li>log4j-core-2.0-beta9.jar</li>
</ul>


<p>slf4jと連携させたいときは、以下を追加します。</p>

<ul>
<li>log4j-slf4j-impl-2.0-beta9.jar</li>
<li>slf4j-api.1.7.5.jar</li>
</ul>


<p>Gradleだとこんな感じですね。(transitiveをつけるのは余計なライブラリをダウンロードさせないため)</p>

<p>```
dependencies {</p>

<pre><code>compile ('org.apache.logging.log4j:log4j-core:2.0-beta9') {transitive = false}
compile ('org.apache.logging.log4j:log4j-api:2.0-beta9') {transitive = false}
compile ('org.apache.logging.log4j:log4j-slf4j-impl:2.0-beta9') {transitive = false}
compile ('org.slf4j:slf4j-api:1.7.5') {transitive = false}
</code></pre>

<p>}
```</p>

<p>このあたりを参考にするといいかも</p>

<ul>
<li><a href="http://logging.apache.org/log4j/2.x/maven-artifacts.html">maven連携</a></li>
<li><a href="http://logging.apache.org/log4j/2.x/log4j-slf4j-impl/">slf4j連携の注意点</a></li>
</ul>


<p>設定ファイルの置き場ですが、こちらは「クラスパス」が通ったところに置けばよいでしょう。<br/>
# eclipseとかだとsrcの直下の置けばよいです。</p>

<p>因みに、この設定ファイルですが以下に変更となったようです。</p>

<ul>
<li>log4j2.xmlもしくはlog4j2.jsonのどちらかを設定ファイルとする</li>
<li>propertiesファイルでは記載できなくなった</li>
<li>ファイル名の規則が「log4j2」になった</li>
</ul>


<p># Javaの特徴という感じだったのでプロパティファイル結構好きだったんだけどなぁ(日本語書くとアレなのは置いておいて)<br/>
# 複雑なことは書けないという致命傷もあったので、設定が複雑なことには向かなかったというのも分かる<br/>
# jsonのサポートは今風かも。</p>

<p>ログの設定にjsonを使う場合は、以下のライブラリを追加する必要があるようです。</p>

<ul>
<li>jackson-core-2.2.2.jar</li>
<li>jackson-databind-2.2.2.jar</li>
</ul>


<h3>設定</h3>

<hr />

<p>ログって基本、一度設定してしまうと何か特別な理由が無い限り設定変更ってしませんよね。<br/>
# ログ分析が必要になったとか、ログレベルの変更をする必要が出たとか</p>

<ul>
<li><a href="http://logging.apache.org/log4j/2.x/manual/architecture.html">デフォルト</a>はERRORとFATALのみ表示(ログレベルは、FATAL > ERROR> WARN > INFO > DEBUG > TRACE)</li>
<li><a href="http://logging.apache.org/log4j/2.x/manual/layouts.html">指定できる出力フォーマット</a></li>
<li><a href="http://logging.apache.org/log4j/2.x/manual/appenders.html">appender</a>は、コンソールやファイルの出力するフォーマット定義</li>
<li>loggersは、どのappendersを使うかを指定することでログの出力方式を決定できます</li>
<li>最低限、appenderとloggersを設定すれば動きます。</li>
</ul>


<p>以下のような感じでlog4j2.xmlを設定します。</p>

<ul>
<li>Consoleとログファイルの両方にログを出力するようにしています</li>
<li>ログファイルの出力は、JSONを設定しています</li>
</ul>


<p>```
&lt;?xml version="1.0" encoding="UTF-8"?>
<configuration status="OFF">
  <appenders></p>

<pre><code>&lt;Console name="Console" target="SYSTEM_OUT"&gt;
  &lt;PatternLayout&gt;
    &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&lt;/pattern&gt;
  &lt;/PatternLayout&gt;
&lt;/Console&gt;

&lt;RollingFile name="RollingFile" fileName="log4j2_sample_log.log" filePattern="log4j2_sample_log_%d{yyyy-MM-dd}.log.gz"&gt;
  &lt;JSONLayout complete="true" charset="UTF-8" /&gt;
  &lt;Policies&gt;
    &lt;TimeBasedTriggeringPolicy /&gt;
  &lt;/Policies&gt;
&lt;/RollingFile&gt;
</code></pre>

<p>  </appenders></p>

<p>  <loggers></p>

<pre><code>&lt;root level="trace"&gt;
  &lt;appender-ref ref="Console" /&gt;
  &lt;appender-ref ref="RollingFile" /&gt;
&lt;/root&gt;
</code></pre>

<p>  </loggers></p>

<p></configuration>
```</p>

<p>他にも出来そうなこと</p>

<ul>
<li><code>「&lt;property name="LOG_PATH" value="" /&gt;」</code>のように定義することもできるような感じなので柔軟に出来そうですね。</li>
<li>appenderを追加すれば、状況に応じたログ出力が出来そう(普通のログとJSONのログ等)</li>
<li>JSONでログ出力すれば、ログの分析がしやすそう(分析基盤(Fluentdとか)を使ったり作ればですが)</li>
</ul>


<h3>おまけ(その1)</h3>

<hr />

<p>いつもSLF4jを使用するときの組み合わせを忘れるので、ここにメモします。
SLF4jはFacadeパターンを採っていまして、以下のメリットがあるようです。</p>

<ul>
<li>柔軟な切り替え</li>
<li>効率化</li>
</ul>


<p>これのお陰で、移行とかがスムーズにできるというわけです。
以下の表に組み合わせをメモしておきます。</p>

<table>
<thead>
<tr>
<th> </th>
<th>Log4j</th>
<th>Log4j2</th>
<th>Logback</th>
<th>Logging</th>
<th>Simple</th>
</tr>
</thead>
<tbody>
<tr>
<td>SLF4J/コア</td>
<td>slf4j-api.jar</td>
<td>slf4j-api.jar</td>
<td>slf4j-api.jar</td>
<td>slf4j-api.jar</td>
<td>slf4j-api.jar</td>
</tr>
<tr>
<td>SLF4J/アダブタ</td>
<td>slf4j-log4j12.jar</td>
<td>log4j-slf4j-impl</td>
<td>logback-classic.jar, logback-core.jar</td>
<td>slf4j-jdk14.jar</td>
<td>slf4j-simple.jar</td>
</tr>
<tr>
<td>ロギング・ライブラリ</td>
<td>log4j-1.2.x.jar</td>
<td>log4j-core, log4j-api</td>
<td>logback-classic.jar, logback-core.jar</td>
<td>java.util.logging</td>
<td>slf4j-simple.jar</td>
</tr>
</tbody>
</table>


<p># どちらかと言うとこちらのほうが必要だったかもw</p>

<h3>おまけ(その2)</h3>

<hr />

<p>ついでといってはなんですが、他にJavaでよく使いそうなloggingも用意しました。<br/>
どれも必要最低限のライブラリしか使っていませんので、動作の参考になるかと思います。</p>

<ul>
<li>Commons Logging + SimpleLog</li>
<li>SLF4j + Log4j</li>
<li>SLF4j + Logback</li>
<li>SLF4j + Log4j2</li>
</ul>


<p><a href="https://github.com/moonstruckdrops/java-logging-sample">ここ</a>に置きました。</p>

<p>Gradleがあれば使えるようにしてあります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependency Injectionについて]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/06/27/dependency-injection/"/>
    <updated>2013-06-27T19:28:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/06/27/dependency-injection</id>
    <content type="html"><![CDATA[<p>DI(Dependency Injection)について、あるところで聞かれたので回答したときのメモでも残します。</p>

<p>簡単に言うと、よく言われる「依存性の注入」といいます。</p>

<p>が、なんのことかさっぱりわからないですね。
少し言い換えてあげると</p>

<h6>「依存性をモジュールもしくはクラス内部に抱え込まずに外部から依存内容を設定してあげる」</h6>

<p>となります。</p>

<p>擬似コードを出すとDI前にこんなコードとすると
```
public Hoge(){</p>

<pre><code>this.fuga = new Fuga("hogefuga");
</code></pre>

<p>}
```</p>

<p>DI後の擬似コードはこんな感じ
```
public Hoge(Fuga fuga){</p>

<pre><code>this.fuga = fuga;
</code></pre>

<p>}
```</p>

<p>コンストラクタの引数Fugaを差し替えるだけで容易に設定内容を変更できます。<br/>
依存前のコードだと、依存性はFugaコンストラクタの中にありますが、依存後のコードは依存性は外部にあります。(引数の内容次第)<br/>
このFugaのコンストラクタがリソースに関わる何かだとDI前のコードであればユニットテストが大変になりますね。<br/>
しかし、DI後のコードであれば引数を差し替えるだけでユニットテストができるようになります。</p>

<p>なので、DIをするメリットというと(個人的に)以下が挙げられます。</p>

<ul>
<li>依存しているものが外部にあるので、ユニットテストで差し替えが簡単にできる(外部からモックにしやすい)</li>
<li>IFさえ同じものであれば、別の実装を行ったものを設定として渡してやることができる(柔軟性)</li>
</ul>


<p>面倒になるのは、事前準備ですがメリットのほうが大きいと個人的には思ってます。<br/>
面倒な事前処理(主にコンストラクタ生成ですが)をやってくれるのがDIコンテナですね。</p>

<p>よく使うDIコンテナだと、有名なjavaのコンテナはこんなところですかね。</p>

<ul>
<li>GoogleGuice</li>
<li>Seaser2</li>
<li>SpringFramework</li>
</ul>


<p>自分が使うときの基準だと、以下になりますね。</p>

<ul>
<li>Seaser2なプロダクト(SAStrutsとか)を使っている、もしくは使う場合は、「Seaser2」のDIコンテナ</li>
<li>Spring関係の何かを使っている、もしくは使う場合は、「SpringFramework」のDIコンテナ(尤も殆ど使ったことないです)</li>
<li>それ以外の場合なら、大体「GoogleGuice」(どこかに事例とかあればいいですし、大体がWicketとかで使います)</li>
</ul>


<p>AndroidにもDIコンテナ(RoboguiceやDagger)あるのですが、殆ど使いませんね。<br/>
使い勝手が悪かったり、ドキュメントがなかったりなので・・・</p>
]]></content>
  </entry>
  
</feed>
