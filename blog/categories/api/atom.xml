<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: API | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2015-02-19T00:10:07+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[APIを作る際のAPIバージョンに関するメモ]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/02/18/api-life-cycle/"/>
    <updated>2015-02-18T23:19:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/02/18/api-life-cycle</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>APIを作るときにどうするか？を開発チーム内で議論したので、備忘録的なメモ</p>

<p>発端となった会話は、こんな感じだったはず</p>

<p>「マイクロアーキテクチャなサービスを作ったときってAPIを作ると思うけど、ライフサイクルって考えてる？」<br/>
「APIを利用するフロントは更新できるけど、APIは依存されるものが多いから簡単には更新できないよね？」<br/>
「APIってモバイルアプリからも利用した場合、修正しづらくない？バージョン管理でもするの？」</p>

<h3>APIの種別</h3>

<hr />

<p>以下の３つぐらいになりそう</p>

<ul>
<li>外部公開向け</li>
<li>モバイルアプリ向け</li>
<li>webサービス向け</li>
</ul>


<h3>外部公開向け</h3>

<hr />

<ul>
<li>API変更の影響が大きい</li>
<li>ドキュメント更新必須</li>
<li>利用者が離れるのでドラスティックな変更はできない</li>
<li>利用者への周知が必須</li>
</ul>


<h3>モバイルアプリ向け</h3>

<hr />

<ul>
<li>アプリのみが影響を受けるので、API変更における影響は少ない</li>
<li>アプリバージョンによるので自由にAPI更新ができない</li>
<li>OSバージョンによってアプリのアップデートができないことが多いので、更新によって使えなくなる可能性有</li>
<li>更新API対応のアプリであっても、アプリが更新されることは無いと思ったほうがよい</li>
</ul>


<h3>webサービス向け</h3>

<hr />

<ul>
<li>クライアントもAPIに合わせて最新にできるので、変更しやすい</li>
<li>キャッシュされたクライアントのコードとのデータ不整合が起きやすい</li>
<li>キャッシュに振り回される(iOSのwebview等)</li>
</ul>


<h3>バージョニング方式</h3>

<hr />

<p>APIのバージョン管理方式は以下のものが採用される傾向にある</p>

<ol>
<li>アクセス先URIそのものを大きく変更する</li>
<li>URIにバージョンを埋め込む</li>
<li>クエリに使用APIバージョンを入れる</li>
<li>メディアタイプにバージョンを指定する</li>
</ol>


<p>世間的には、2のパターンが比較的多く採用される傾向</p>

<h3>URIにバージョンを埋め込み方式</h3>

<hr />

<ul>
<li>「v1」のように「v」をつけてバージョンを明確にすることが多い</li>
<li>日付やリリースバージョン(ハッシュ等)をバージョンにするAPIもある(twillo等)</li>
<li>URIに組み込むバージョンは、メジャー番号のみを含める</li>
<li>APIの修正は、後方互換を保ちつつ対応する</li>
</ul>


<p>バージョニングは以下のセマンティックバージョニング方式を取ることが多い</p>

<ul>
<li>パッチバージョンは、ソフトウェアのAPIに変更がないバグ修正を行ったときに増える</li>
<li>マイナーバージョンは後方互換がある機能変更、特定の機能追加のときに増える</li>
<li>メジャーバージョンは後方互換が無い変更の時に増える</li>
</ul>


<h3>メディアタイプにバージョンを指定する</h3>

<hr />

<ul>
<li>「Accept: application/vnd.example.v2+json」のような形で規定する</li>
<li>URIがリソースを表しているので、HTTPの文法に則っている</li>
<li>「Content-Type」の指定誤りで、サーバ、クライアント側ともにエラーになりやすい傾向</li>
</ul>


<h3>バージョン変更指針</h3>

<hr />

<ul>
<li>APIは基本変更しないほうがよい</li>
<li>変更は後方互換を保ちつつ対応できる場合は、マイナーバージョンアップ(可能な限りこちらを選択)</li>
<li>後方互換が保てない修正の場合はメジャーバージョンアップ</li>
<li>レスポンスデータ整合性/整理のためであれば、バージョンは上げない(後方互換を維持し続け、ドキュメント整理で対応)</li>
</ul>


<h3>メジャーバージョンアップ指針</h3>

<hr />

<p>後方互換が保てない場合のみ実施し、バージョンアップのルールを整理してから行う</p>

<ul>
<li>セキュリティ/権限などのAPI使用ルール変更</li>
<li>認証方式の変更</li>
<li>乱雑に作った(ルールが無い)APIを使いやすくするための整備</li>
</ul>


<h3>APIの提供終了</h3>

<hr />

<ul>
<li>API提供終了前に提供終了日時のアナウンスをする(提供終了後、半年ほどは動かしておくこと)</li>
<li>提供終了までにAPIを利用できなくするブラックアウトテストを数回実施する</li>
<li>API提供終了の仕様をドキュメントに盛り込んでおく(HTTPのステータスコード410(Gone)を返すなど)</li>
<li>利用期限をAPI提供開始時に決めておく</li>
<li>古いAPIを叩いたときに、新APIへのリダイレクトは、混乱を招くので避けたほうがよい</li>
</ul>


<p># モバイル向けAPIの場合、ユーザー体験に直結するので仕様として予め考えておく(モバイル向けの場合、APIの停止はトレンドを見つつ行うこと)
# アプリのアップデートを促すようにしておく(強制アップデートは好まれないが、使えなくなるよりも遥かにマシ)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web API The Good Parts2章]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/12/22/web-api-good-parts-2/"/>
    <updated>2014-12-22T23:18:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/12/22/web-api-good-parts-2</id>
    <content type="html"><![CDATA[<h2>前置き</h2>

<h4>近況</h4>

<hr />

<p>ざっくりと書くと、お前エンジニアなのに勉強しなくていいの？という状態</p>

<ol>
<li>免許が取れたので単車を乗り回している(運転が楽しくて毎日、運転しているような)</li>
<li>昨年よりも比較的、仲がいい友人(男女問わず)と遊ぶ機会が多くなったかも...</li>
<li>気の合う仲間と組んで、(Swiftで)アプリ作っている</li>
<li>その気の合う仲間への技術指導していたり...</li>
</ol>


<p>なんだか、教えることが多くなって自分が学習している時間が比較的減ってきているそんな感じががが</p>

<h4>そういう訳なので</h4>

<hr />

<p>本屋でざっくりと見かけてツボに嵌った本を読んでいこうかと</p>

<p>「Web API The Good Parts」</p>

<p>なのですが、上記3,4が結構あるので中々進まないという(ぉぃ</p>

<p>ということなので、なるたけ気になるところ(覚えておくべきところ)だけまとめていこうかなと</p>

<p>斜め読みした感じでは、結構ツボに嵌る内容なので自分のバイブルに入選してもいいかなと思ってたり。</p>

<h2>エンドポイント設計</h2>

<ol>
<li>公開する機能を先に設計する</li>
<li>覚えやすく、どんな機能を持つURIかひと目で分かるようにする</li>
<li>HTTPメソッドの活用</li>
<li>設計の注意点</li>
<li>クエリパラメータ</li>
<li>ログインや認証</li>
<li>ホスト名とエンドポイント</li>
</ol>


<h4>1に関して</h4>

<hr />

<p>どんなAPIが必要かどうかを先に洗い出しておく</p>

<h4>2に関して</h4>

<hr />

<ul>
<li>短く入力しやすいURI</li>
<li>人間が読んで理解できるURI</li>
<li>大文字、小文字が混在しないURI</li>
<li>改造しやすいURI</li>
<li>サーバ側アーキテクチャが反映されていないURI</li>
<li>ルールが統一されたURI</li>
</ul>


<h4>3に関して</h4>

<hr />

<p>HTTPメソッドを有効活用</p>

<ul>
<li>Restfulな形で活用すれば、一般的な形</li>
</ul>


<h4>4に関して</h4>

<hr />

<ul>
<li>複数形の名詞を利用する</li>
<li>利用する単語に気をつける((ProgramableWeb)[http://www.programmableweb.com/]等、他のサービスを参考に)</li>
<li>スペースやエンコードが必要な文字は避ける</li>
<li>単語をつなげる場合はハイフンにする(SEO的に有利なことも)</li>
</ul>


<h4>5に関して</h4>

<hr />

<ul>
<li>相対位置を使用する場合、データ数が多くなると取得件数が減ること、更新頻度が高いものは不整合が起きやすくなることに注意</li>
<li>絶対位置を使用する場合、クエリパラメータが「x以降」,「この日付よりも古いもの」という形でクエリパラメータをもたせたほうがよい</li>
<li>日付の形式は、RFC3339に規定されている「1970-01-01T00:00:00Z」の形にする</li>
<li>絞り込みのパラメータは、「q」のような形は曖昧検索に取られやすいので完全一致の場合は適切なパラメータにすること</li>
<li>一意なリソースを表すのに必要な情報: パス</li>
<li>省略可能: クエリパラメータ</li>
</ul>


<h4>6に関して</h4>

<hr />

<ul>
<li>OAuthを使用して、標準的な形にする</li>
</ul>


<p>標準的なOAuthに則るとエラーメッセージ(RFC6749, RFC6750)は、以下のような形式となる
(当然ながらhttpステータスは401)</p>

<p><code>
{
  "error": "invalid_token"
}
</code></p>

<h4>7に関して</h4>

<hr />

<ul>
<li>ホスト名にapiを入れるのが主流</li>
<li>企業で複数のサービスをホストする場合、例外的なホスト名</li>
<li>サービスとしてのapiの場合はホスト名にapiをいれたほうがよい(外部から使われるため)</li>
<li>プラットフォームの場合、service等をホスト名にいれる</li>
</ul>


<h2>まとめ</h2>

<hr />

<ul>
<li>一般的なURI設計がそのまま適用できる</li>
<li>APIならではのルール、デファクトスタンダードがある</li>
<li>URIはリソースを表すものなので、URIとHTTPメソッドの組み合わせで処理の対象と内容を設計をする</li>
</ul>


<h4>Good</h4>

<ul>
<li>覚えやすく、どんな機能を持つかが一目で分かるようにエンドポイントにする</li>
<li>適切なHTTPメソッドを利用する</li>
<li>適切な英単語を利用し、単数形、複数形にも注意する</li>
<li>認証はOAuth2.0を使う</li>
</ul>

]]></content>
  </entry>
  
</feed>
