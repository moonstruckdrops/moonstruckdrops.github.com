<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 戯言 | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/xi-yan/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2013-12-19T01:34:46+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SIerを退職しました]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/09/08/retire-sier/"/>
    <updated>2013-09-08T00:14:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/09/08/retire-sier</id>
    <content type="html"><![CDATA[<h3>あなた誰？</h3>

<hr />

<p><a href="https://twitter.com/kurobara">@kurobara</a>と言います。<br/>
SIerとして勤めていました。<br/>
AppEngineやAndroid、サーバサイド(インフラ込)なことをしているエンジニアです。<br/>
RubyやGoとかが好きです。<br/>
勉強会だとYokohama.rbやKyotoGDGとかによく出没しています。<br/>
その他、気が向いた(その場で触ってる技術)勉強会に行ったりしています。</p>

<h3>はじめに</h3>

<hr />

<p>2013年8月31日付けで、新卒で入社した会社を退職しました。<br/>
2010年の入社から数えて3年半、社会人としてのマナーや基礎知識、技術系知識を教えて頂けました。<br/>
お世話になった皆様、本当にありがとうございました。</p>

<p>退職理由は、言語化しづらい感じがするのでダラダラとこれまでのことを書きます。<br/>
正直、何でなの？と思われることかもしれないです。<br/>
普通のことかもしれませんが、ジレンマに感じる人もいた<br/>
ということだけ理解していただける感じでお願いします。<br/>
決して、憂さ晴らしという形で書いているわけではありません。<br/>
ご理解とご了承をお願いします。</p>

<h3>出来事と心境</h3>

<hr />

<p>ツラツラとあったことや覚えている範囲で当時思ってたことを書き下して行きます。</p>

<h5>大学時代</h5>

<hr />

<p>サーバサイドアプリ(学生向け+自分用に簡単なWebサービス)を作っていました。<br/>
プログラムを書くことは好きでしたが、<br/>
ベンチャー企業とかでアルバイトをしているわけではありませんでした。<br/>
(恐らく、当時のプログラムで叩きだした実績のお陰で入社できたのだと思います。)</p>

<h6>内定まで</h6>

<p>当時(今も仕事上変わりませんが)の自分ですがjavaでバリバリ書いてました。<br/>
当時の私は、フレームワーク「Wicket」を使ってサーバサイドアプリを書いていました。<br/>
こんな経緯もあったので、以下の理由で内定を承諾したと思います。</p>

<ul>
<li>Javaに強い方々(<a href="https://twitter.com/uehaj">@uehaj</a>,<a href="https://twitter.com/nobeans">@nobeans</a>)がいるらしいので、自分もその人と同じようにできるかもしれない</li>
<li>なんだかんだで、会社がいい(NTTグループなので)から安定している生活ができるかもしれない</li>
<li>(当時?)Wicket使いの人(<a href="https://twitter.com/yamkazu">@yamkazu</a>)もいるから、wicket使ったりでなんか色々できるんじゃね？</li>
<li>技術的なことができるんじゃないか</li>
</ul>


<p>とか考えていたと思います。<br/>
よくも悪くも生活安定第一の志向を持った普通の就職活生でした。<br/>
(当時は、売り手市場だったのが、リーマンショックの影響が出ていた時期でもありました)</p>

<h6>内定後</h6>

<p>Kyoto GTUG(今のKyotoGDG)で開催されたGoogle AppEngineのハッカソンに参加しました。<br/>
卒論テーマにも関係もあるので・・・という軽い気持ちの参加だったと思います。<br/>
(単純にAppEngineの情報が欲しいという側面もあったと思います。)</p>

<p>今も関東でお付き合いがある「<a href="https://twitter.com/dddaisuke">@dddaisuke</a>」さん、「<a href="https://twitter.com/fushiroyama">@fushiroyama</a>」さんに出会いました。<br/>
ハッカソン後の懇親会でじっくり話す機会があり、そこで何か色々話したと思います。<br/>
(大学生であることややってることとか将来的な話とか・・・)</p>

<p>お二人にとって取り留めのないことだと思いますが、当時の自分の考えに衝撃があったと思ってます。<br/>
# 当時の自分(大学生にしては技術力高いなど)にとって褒められたとかもあったはず。。。</p>

<p>なので、お二人とハッカソンが無ければ今の自分はいないと思います。<br/>
(人生の転機の出会いかもしれないですね。)</p>

<p>#因みに、ハッカソンの結果は二位でした。</p>

<p>以下のこともあったので、余計に自分の考えや行動もギークよりに変わってきました。</p>

<ul>
<li>KyotoGTUGのハッカソンの結果が良かったこと</li>
<li>ハッカソン後にあったKyoto GTUGのイベント(AndroidハッカソンやOSC Kansai)で色々やらせていただいたこと</li>
<li>関東の勉強会への参加(ここで出会った<a href="https://twitter.com/shin1ogawa">@shin1ogawa</a>さんに後々まで覚えられてたw)</li>
</ul>


<h5>入社してから</h5>

<hr />

<p>さて、入社してからなのですが様々なことを学ばせて頂きました。<br/>
そこで、技術面と仕事面という２つの面で書きたいと思います。</p>

<h6>技術面</h6>

<p>今思うとですが、主軸となる技術とそれ以外の技術という形の方針だったのかなぁと思います。</p>

<ul>
<li>主軸:AndroidとAndroidで活用している周辺技術</li>
<li>それ以外:Linux,Web系(サーバサイド)、その他ツール類</li>
</ul>


<p>大きく分けるとこんな感じでしょうか・・・。</p>

<p>幸いなことに、他の同期と比較してプログラムはさせて頂いたほうだと思います。<br/>
特にAndroidに関しては、プロダクションレベル(一般公開しても恥ずかしくないレベル)のものを実装できました。<br/>
<a href="https://twitter.com/korodroid">@korodroid</a>さん,<a href="https://twitter.com/sumio_tym">@sumio_tym</a>さん、どうもありがとうございました。</p>

<p>また、時には意見の衝突も行いながらも寛大な心で受け入れて頂いた皆さんありがとうございました。</p>

<p>あとは、社内の技術勉強会でも数回(1回はメイン!!)発表させて頂けたこともステップアップに繋がったと思います。<br/>
<a href="https://twitter.com/suzukima">@suzukima</a>さん、<a href="https://twitter.com/yamkazu">@yamkazu</a>さん、ありがとうございました。</p>

<p>さて、ここまで良かった話なのですがどうにもしっくりこなかったところになります。</p>

<p>何かというと、「Android周辺技術しか」できていないことです。</p>

<p>これが自分にとって一番キツイ点でした。(人によってはハッピーかもしれませんが)</p>

<p>上記にも書きましたが、元々web系、それもサーバサイド技術まわりを中心にやって来ました。<br/>
その為、自分としては以下のような思いがありました。</p>

<ul>
<li>サーバサイド周り中心の技術に強くなりたい</li>
<li>サーバサイド周りをメインでやっていきたい</li>
</ul>


<h6>仕事面</h6>

<p>｢製造工程｣をメインに担当し､SEという肩書きながらプログラミングをかなりさせていただきました。<br/>
加えて、中堅(大手かも)SIerで実施する工程は大体をやらせて頂けたと思います。。。<br/>
世間一般に｢SIer(特に元請け)の人間は技術力がない｣という様な事が言われていますが､<br/>
幸いにも自分が配属された部署には技術に明るい人(<a href="https://twitter.com/nobeans">@nobeans</a>さん,<a href="https://twitter.com/sumio_tym">@sumio_tym</a>さん,<a href="https://twitter.com/korodroid">@korodroid</a>さん)が多く学ぶところは大きかったです。</p>

<p>2年目からその方々との会う機会が減りましたが・・・</p>

<p>また、理解度が高かった上司と先輩も良かったことではないかと思っています。</p>

<p>あまり声を大きくしたくはないですが、所謂炎上状態のPJも経験しました・・・<br/>
辛い中でも色々出来たので、今ではいい思い出です。</p>

<p>さて、経験の話以外に常々感じていたことピックアップして残したいと思います。<br/>
願わくば、こういうことを思うような人が出なければと思います・・・</p>

<ul>
<li>仕事をしている人達が、｢楽しくなさそうしている人が多いな｣と感じた(ギャップに近いところ)</li>
<li>「政治的な理由」で制限が多くなってしまうこと</li>
<li>後が大変なことが多々あったりしたこと</li>
<li>資料を説明するための資料をつくること</li>
</ul>


<p>思っていたことに加えて何よりも辛かったのは、時間がめちゃくちゃに減ったということです。</p>

<p>このままだと技術者として取り残されてしまうのではないかという焦りが出てきましたし、<br/>
事実、取り残され始めたという形容し難い感覚を感じていました。</p>

<h6>最終的に・・・</h6>

<p>キッカケとなったことは、以下のものです。。。</p>

<ul>
<li>他のエンジニアと交流し、自分が何をしたかったのか考えなおしたこと</li>
<li>GoogleI/Oに参加し、様々な国のエンジニアと話をし交流してきたこと</li>
<li>「<a href="https://twitter.com/dddaisuke">@dddaisuke</a>」さん、「<a href="https://twitter.com/fushiroyama">@fushiroyama</a>」さんと飲んだこと(これまでのことを話ました)</li>
</ul>


<p># GoogleI/Oで世界中のエンジニアに色々言われました(- -;)<br/>
# 自分や自分の持つ能力を詳しく知ってるエンジニアは言うことが鋭いですね<sup>^;;</sup></p>

<p>言われるまでも無く、自分としても思うところがあったのは事実です。<br/>
進むべきキャリアもどうしようかと上司や周りのエンジニアに相談もしていました。</p>

<p>上記の思うところやキッカケで起こった内容をじっくり考え直してみたら、<br/>
自分にとって最良の道は、外に出たほうが良いだろうと考えました。</p>

<p># 最終(寧ろそこからが大変ですが)的な目標も到達するためにもというところもありました。</p>

<h3>最後に</h3>

<hr />

<p>SEとしての生活は、必ずしも良かったことばかりとは言い難かったです。<br/>
ですが、ここで学んだことは後々、自分にとってプラスになると思っています。</p>

<p>周りの皆様(同期含む)からの期待(これから支えていって欲しいという)を感じる中で<br/>
このようなことになってしまい申し訳ありませんでした。</p>

<p>特に、自分を育成して頂きました「<a href="https://twitter.com/sumio_tym">@sumio_tym</a>」,「<a href="https://twitter.com/korodroid">@korodroid</a>」のお二人に大変感謝をしております。</p>

<p>選択した道に後悔が無い様、自分の信じた道を進んで行きたいと思います｡</p>

<p>最後になりましたが関係者の皆様､<br/>
今まで本当にありがとうございました｡</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[削除してしまったDropboxのデータを復元する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/07/13/recover-dropbox-data/"/>
    <updated>2013-07-13T17:06:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/07/13/recover-dropbox-data</id>
    <content type="html"><![CDATA[<h3>簡単な経緯</h3>

<hr />

<p>このブログ記事を書くキッカケになった内容を以下に記述します。</p>

<p>お馬鹿すぎて笑えますwww</p>

<ol>
<li>Dropboxアプリ起動</li>
<li>アプリを起動したまま、あるコマンドを実行</li>
<li>Dropboxと同期したディレクトリが2で実行したコマンドで削除される</li>
<li>1のDropboxアプリが削除した状態を同期開始</li>
<li>削除だけなので、同期が一瞬で終わってしまう</li>
<li>Dropboxサーバのデータが削除</li>
</ol>


<p>こんな感じでした・・・
実際は、Dropboxのディレクトリだけでなくもっと影響がでかくて涙を流しています。</p>

<h3>復元の手順</h3>

<hr />

<p>復活の呪文を唱えるにも条件があります。</p>

<h4>削除してからの日数が30日以内であれば、復元可能</h4>

<p>というものです。</p>

<p>幸いなことに削除した次の日に気がついたので、自分はこの条件を満たしていました。</p>

<p>で、肝心の復元の手順ですが、以下で実施します。</p>

<ol>
<li>Dropboxのウェブサイトにログイン</li>
<li>画面右上の「削除済みファイル」をクリック</li>
<li>ファイル名の横に表示されている逆三角を押下し復元をクリック</li>
</ol>


<h4><a href="https://www.dropbox.com/help/296/ja">公式の手順</a></h4>

<p>これで削除したファイルが復元できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日経ソフトウェア7月号の特集を読んだ感想]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/06/18/nikkei-software-07/"/>
    <updated>2013-06-18T23:36:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/06/18/nikkei-software-07</id>
    <content type="html"><![CDATA[<p>日経ソフトウェア7月号の特集「そのコードは古い!」を読んだ感想。</p>

<p>これとは別の技術書を書店まで買いに行きました。</p>

<p>そこで日経ソフトウェアを手に取りました。</p>

<p>いつもは、日経ソフトウェアを書店でパラパラ目を通す程度です(エンジニアに端くれかみたいな感想は兎も角)
ただ、今回は特集のタイトルに惹かれて買ってじっくり読んでみました。</p>

<p>なので、特集に限って読んだ感想というメモを残します。
あくまで、私めの意見というか感想なので・・・スルーしていただけると。</p>

<h3>C言語編</h3>

<hr />

<p>point1「void mainはやめよう」とありますが、これは入門書のサンプルが諸悪の根源かと思います。<br/>
自分がC言語を学習したときは、普通にvoid mainで教わりました。<br/>
当時は、Unix/Linuxの知識も無いので当たり前ですし、戻り値が、intになっていてもおまじない程度の認識でした。</p>

<p>なので、intの意味まで教えてあげるべきかなーと思います。(特に初学者に対してですが)<br/>
こうやって、サンプルコードとして教えてあげればいいかなーとか思いました。(これなら処理が正常終了していることが明確になるかと)<br/>
```</p>

<h1>include&lt;stdio.h></h1>

<h1>include&lt;stdlib.h></h1>

<p>int main(void){
 printf("Hello world");
 return EXIT_SUCCESS;
}
```</p>

<p>以下のものは当たり前の話かなーと思いました。</p>

<ul>
<li>point2「文字定数にchar型は使わない」(関数同士で受け渡す際はint型に変換されるから)</li>
<li>point3「古い関数定義はやめよう」(K&amp;Rの記述方法。本を読めば分かります)</li>
<li>point4「gets関数は古い」(確保された領域以上のものが入力されたらバッファオーバーフローになっちゃうから)</li>
<li>point5「switch文あり気で考えない」(これはどの言語でも言える話で、コードが見づらくなっちゃう上に、break文忘れるとバグになってしまう)</li>
<li>point6「何でも#defineで定数や関数マクロを定義するのは古い」(コンパイル時の型チェック等スルーする上、関数マクロは記述ミスをしやすくなるから)</li>
<li>point7「定数の羅列に#defineは古い」(意味のある連続したものだとenum使ったほうが便利ですね)</li>
<li>point8「ポインタサイズでメモリを確保しない」(ポインタ型とデータ型は処理系によってサイズが違うから)</li>
</ul>


<p>point8の良くないコードは以下のもの
<code>
double *d
d = (double *)malloc(sizeof(d)*100)
</code>
良いコードは以下のもの
<code>
double *d
d = (double *)malloc(sizeof(*d)*100)
</code></p>

<p>書いて思ったけど、普通のことだな。。。</p>

<h3>java編</h3>

<hr />

<p>お仕事柄メイン(?)で使ってたので・・・</p>

<ul>
<li>point1「C言語で主流だったハンガリアン記法は古い」</li>
<li>point2「スネークケースは使わない」</li>
<li>point3「メソッドの先頭に変数宣言を並べるのは古い」</li>
<li>point4「エラー種別をintで返さない」</li>
<li>point5「処理結果を引数に格納しない」</li>
</ul>


<p>このあたりはCの悪癖なんで、マジ勘弁して下さい・・・。<br/>
コードレビューにこんなコード出してきたら速攻Rejectしちゃいますよ。。。<br/>
poin4は、Exceptionをthrowすればいいのでなんとかなります(尤もjniに依存するようなコードだと考えてもいいかなーなんて個人的には考えてしまいます)<br/>
point5なんか副作用が山盛りなコードになりますしね。</p>

<p>気を取り直して・・・。</p>

<ul>
<li>point6「ジェネリクスを使用しないコードは古い」(リストを型安全にできますよねー。キャスト地獄はヤダー)</li>
<li>point7「定数インターフェースは古い」(static importとか、定数の機能分割をやるでしょ)</li>
<li>point8「意味のない定数値は書かない」(enumにしろって話。これもC言語の定数定義の話と同じですね)</li>
<li>point9「finally句でcloseするのは古い定石」(java7以降だとそうですね。java6までだとこの定石を使いましょう)</li>
<li>point10「ジェネリクスで型を省略しないのは古い」(point6と矛盾してるような感じですが、こちらはjava7の話で俗にダイヤモンド演算子と呼ばれるもの)</li>
<li>point11「ファイルの読み込みには数行も使うな」(java7以降に限る話です。java6までは従来道理の読み込み処理を書きましょう)</li>
<li>point12「定番ライブラリはApacheCommonsだけではない」(それもそうだよねーって話。ジェネリクス非対応だったり、流れるようなインターフェースもなかったりだし)</li>
<li>point13「Listからある条件に一致した要素を取り出す際、for文を使うのは古い」(filterメソッドを使ったらいいよってこと。因みにGroovy使えって言ったらダメ？)</li>
</ul>


<p>point9で言ってるjava7での新しい定石「close句の省略」
```
try ( FileReader in = new FileReader("hoge.txt");</p>

<pre><code>BufferdReader br = new BufferedReader(in);{
// 詳細な処理
</code></pre>

<p>}catch(Exception e){</p>

<pre><code>// 例外処理
</code></pre>

<p>}
```</p>

<p>point10のダイヤモンド演算子
<code>
List&lt;String&gt; list = new ArrayList&lt;&gt;();
</code></p>

<p>point11のファイル読み込み処理(Filesクラスが便利になった)
<code>
Files.readAllLines("hoge.txt",Charset.defaultCharset());
</code>
因みに、従来の長い処理(途中の前後を省略)
```
BufferdReader br = new BufferedReader(in);
String line;
while((line = br.readLine()) == null){</p>

<pre><code>// 読み込んだときの処理
</code></pre>

<p>}
```</p>

<h3>javascript編</h3>

<hr />

<p>思うところというよりも・・・<br/>
HTML5といいJQuery,CoffieScript,Dart等、言語の発展が最近めざましいと個人的に思ってます。<br/>
そのため、感想というよりもこうするのが最近のトレンドだよねーみたいな感じでした。</p>

<ul>
<li>point1「HTMLのform要素に処理を埋め込むのは古い」(特殊な事をしなければ、HTML5で事足りることが増えてきたと思う)</li>
<li>point2「ロールオーバにa要素を使っているのは古い」(ブラウザのサポートに依るのは？と思った。SE/SIerなところだと未だにIE6でみたいなことがまかり通るし、一概に古いと断言するのはどうかと思った。)</li>
<li>point3「JavaSriptライブラリを使わないのは時代遅れ」(これはそうかなーと思う。実際にjQueryは使いますし。)</li>
<li>point4「jQueryを使わないコードは古い」(古いと断言するのは、どうかと思うが使うほうが楽できる。コラムにあったけど万能ではないね。特にIEが絡むとなると途端に辛くなる)</li>
<li>point5「HTML5のAPIを使わないと時代遅れ」(新規に書く場合ならHTML5を使っていき、補助(Flashがやってたとことか)でJSを使うのがいいのかなーと思う)</li>
<li>point6「多言語の助けを借りる」(DartとかTypeScriptかな。得手不得手があるので適材適所で使えばいいと思う。jsとかで書きづらいところはサーバサイドJavaとかでやってもいいわけだしね)</li>
</ul>


<h3>C#編</h3>

<hr />

<p>自分が、C#を現在進行形で勉強中なので、感想が出てくるより先にこう書けばいいのかー。<br/>
なんてことを思いました。<br/>
サンプルのあるのが全てではないよ～的な感じですね。</p>

<h3>Ruby編</h3>

<hr />

<p>これは、好きな言語</p>

<ul>
<li>point1「大量の引数が必要な際ハッシュオブジェクトを利用するのは古い」(このテクニック自体は好きだけど、ハッシュキーが無かったら大惨事になることがありますね)</li>
<li>point2「配列のグループ分けを長々と書くのは古い」(1.8系に限らず、1.9系でも思わずやってしまいそうな処理がコード例だった。chunkメソッドで配列のグループ分けができるのか)</li>
<li>point3「配列からランダムに値を抽出する際delete_atメソッドは古い」(samplingって意味から作ったっぽいsampleメソッドを使用すればランダムに値を抽出できる)</li>
<li>point4「テストフレームワークは１つと考えるのは古い」(要するに適材適所。RSpecとTestUnitの両方を併用(てテスト範囲なり、記述方法なり、assertなり)してテストをすればいいと個人的に思ってる)</li>
<li>point5「execコマンドでjavaのクラスを読み込むのは古い」(一々、外出しにしたjavaを読み込む何かの実行ファイルを作成する必要はなく、JRubyを使えばいいよって話。割りと普通かと思ってた)</li>
</ul>


<p>point1はRuby2.0で導入されたキーワード引数でデフォルト値を設定すればいいですね。
```
def keyword(hoge:0,fuga:"fugafuga")</p>

<pre><code>puts #{hoge}
puts #{fuga}
</code></pre>

<p>end</p>

<p>keyword hoge:10 fuga:"hogehoge"
```</p>

<p>point2の配列のグループ分け(偶数のものと奇数のもを分ける)
<code>
[1,2,4,7,9].chunk{|a| a.even?}.each{|k,v| puts "#{k} #{v}"}
</code></p>

<p>point3の配列からランダムに値を抽出する
<code>
[1,2,4,7,9].sample(2) #-&gt; [4,9]
</code></p>

<p>point5のJRubyで実行する話(Jythonとかも似たような感じですね)
```
require 'java'
import 'java.lang.System'</p>

<p>puts "hogehoge"
System.out.println("fugafuga");</p>

<p>```</p>

<p>特集を読んだ感想は以上かなー。
なんとなく、書籍のサンプルがアレな時があるって感じじゃねーの？みたいな感想でごめんなさい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初海外がGoogleI/Oだったので、準備とか苦労したことのメモ]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/05/31/oversea-travel/"/>
    <updated>2013-05-31T06:59:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/05/31/oversea-travel</id>
    <content type="html"><![CDATA[<p>GoogleI/O2013に行ってました。</p>

<p>初海外の人が如何にして海外に行ってきたかを記録します。</p>

<h3>前提</h3>

<hr />

<p>何はともあれGoogleI/Oのチケットを手に入れましょう。<br/>
話はそれからです。</p>

<h3>必要なもの</h3>

<hr />

<p>海外へ渡航するにあたって必要なものは以下のものでした。</p>

<ol>
<li>パスポート</li>
<li>ESTA</li>
<li>航空チケット(もしくは海外に行ける手段)</li>
<li>宿泊先の確保</li>
<li>旅行期間の調整(会社とか学校とか)</li>
<li>スーツケース</li>
<li>衣類など</li>
<li>印刷物一式</li>
<li>その他</li>
</ol>


<p>上から順番に解説します。</p>

<h5>パスポート</h5>

<p>これは当たり前なので、解説不要でしょう。<br/>
持ってなくても、チケット購入から開催日まで一ヶ月以上日数があるので<br/>
チケット購入してからすぐに申請すれば十分間に合います。(パスポートの受け取りも含めて)<br/>
戸籍抄本とか必要なので、このあたりの準備がネックでしょうか。</p>

<h5>ESTA</h5>

<p>アメリカ旅行では必要です。<br/>
ネットから申請できるので、実施しましょう。<br/>
お金がかかるのとパスポート番号の入力があるので気をつけましょう。<br/>
パスポート持ってない場合は、チケット購入後パスポートを直ぐに取得してればESTAの申請も間に合います。</p>

<h5>航空チケット</h5>

<p>ここはお任せで・・・。 <br/>
自分の失敗談は後述します。</p>

<h5>宿泊先の確保</h5>

<p>大体、こんなパターンになるのではないかと思います。</p>

<ul>
<li>エクスペディアで宿泊先を確保する</li>
<li>後述する情報交換で、相部屋募集にのっかる</li>
</ul>


<p>自分は、勝手がわからなかったので、相部屋募集にのっかりました。</p>

<p>宿泊先は、開催地に近いほうが何かと便利です。
エクスペディアで申し込むところは、KingGeorgeホテルがオススメだったりします。</p>

<h5>旅行期間の調整</h5>

<p>社会人だと当然だと思いますが、やりましょう。<br/>
宿泊期間に直結します。観光やMakerFairも参加となると長期になります。<br/>
できれば、調整は、チケット取る前がいいと思います。</p>

<h5>スーツケース</h5>

<p>大きいほうがよいと思います。<br/>
I/Oでお土産をいただきますので、お土産が入るぐらいのがベストですね。</p>

<h5>衣類など</h5>

<p>思ったほど要らないかも。<br/>
現地は、朝と晩は寒いので防寒対策にパーカーぐらいあったほうがいいかもしれないです。(寒いといっても気にならない程度かもしれないですけど)<br/>
というのも、I/OにチェックインしたときにTシャツ貰えたり、会場でTシャツ配ってたりしてるため。<br/>
自分は合計で13枚貰ってました(ぇ<br/>
実は現地にユニクロあるので、服の調達はそこでーみたいな人は殆ど要らないかも。</p>

<h5>印刷物一式</h5>

<p>あったほうがいいですね。<br/>
I/Oのチェックインはバーコード読み取り式なのですが、携帯からだと精度があまり良くないようです。<br/>
これはGoogleの中の人も話してました。(うまくいくことはうまくいくようですが・・・)<br/>
他にも空港のチケット発券や入出国で航空チケットや宿泊先など聞かれたりすることもあるので、印刷しておくとスムーズに事が進みます。</p>

<p>自分はこれだけ印刷して行きました。</p>

<ul>
<li>往復の航空チケット(支払い証明やフライト情報)</li>
<li>I/Oのチケット</li>
<li>ESTA</li>
<li>現地滞在先ホテル情報(入国時の申請書類に記入するため)</li>
<li>ちょっとしたメモ(空港案内や宿泊先までのルートなど)</li>
</ul>


<p>あとここには書いてませんが、ガイドブックもあるといいですね。<br/>
ほとんど不要だと思いますが、入国とか出国とかで提出する書類の記載方法が参考になります。</p>

<h5>その他</h5>

<p>通信事情ですが、auであればAT&amp;Tに自動(設定でデータローミングをオンにする必要はあります)で接続してくれます。<br/>
ドコモやSoftBankは知りません。<br/>
が、値段はお高いで１日いくらの料金なので５日もデータローミングで使用しまくると大変な金額になります。<br/>
現地で、simカードを購入することをオススメします。(T-mobileがオススメです)<br/>
T-mobileであれば、会場の近辺に店があります。(Powel Streetにありますね)<br/>
会場(モスコーン)はwifiを提供していますが、T-mobileだと殆ど繋がりません。(特に基調講演時は接続出来ませんでした)<br/>
基調講演以外では繋がってたような気がします。</p>

<p>飲料水事情ですが、かなり安い値段で水が売ってました。(1ドルしたかしなかったぐらい)<br/>
僕はトランクに1.5Lを詰めて持って行きましたが、８割ぐらいしか飲みませんでした。<br/>
持っていくにしても500ml２本ぐらいがベターじゃないかなー。</p>

<p>電源ケーブルですが、日本と同じ端子(２つ口)が使用できました。<br/>
が、電圧が少し高い(らしい)ので不安であれば変圧器(だったけ？)を持って行くといいかもしれないです。<br/>
旅行用に何か買うことは不要だと思います。</p>

<h3>情報交換</h3>

<hr />

<p>皆さんがよく使われるところで参加者どうし情報交換を行なっています。</p>

<ul>
<li>Twitter</li>
<li>Facebook(参加者用のグループとメッセージ)</li>
<li>Google+(参加者用のコミュニティ)</li>
</ul>


<p>参加権限とかなければ、Twitterとかで参加者を探せば入れてくれると思います。<br/>
# 自分は過去の参加者の招待でコミュニティに入れて頂きました。</p>

<h3>現地通貨はどうやってたのか</h3>

<hr />

<p>殆どがクレジットで支払っていました。<br/>
アメリカは、信用や支払い能力の世界なのでクレジットが有効です。<br/>
ドルで払うことはあるにありましたが、殆どがクレジットで支払っていました。</p>

<p>アメリカで使用できるクレジットの会社ですが、「VISA」、「American Express」が９割でした。<br/>
日本で使用できる「JCB」は殆ど使用出来ません。(自分はコレでやばいってなりました)</p>

<p>一応、紙幣でドル札も３万円用意していました。<br/>
高額紙幣は、現地で嫌われるため、最大で２０ドルで換金して行くとよいでしょう。<br/>
３万あれば、チップ等含めて０にすることが出来ました。</p>

<p>さて、チップの話ですが特に意識してチップに何か使うということはあんまりありませんでした。<br/>
お高いレストランに行ったときはサービス料として会計に含まれていました。<br/>
精々ベッドメイキングとその他ほそぼそぐらいでしたね。<br/>
大体、1ドル程度置いておけばいいでしょう。(ここらへんはその人やサービス内容によりけりです)
#ベッドメイキングは枕元に１ドル置いておきましょう。(どこに置けばいいだろうになりました)</p>

<h3>現地での言語とかコミュニケーションはどうしたか</h3>

<hr />

<p>現地は殆どで英語でしたが、特に困ることはありませんでした。<br/>
これは本当です。</p>

<p>英語を話す機会がある最初の関門は入国審査です。(飛行機は日本語話せるスタッフがいるので英語話せなくても困りません)<br/>
ここできっちり英語で会話できれば、入国してから特に困らないでしょう。<br/>
重要なことなので、もう一度言います。(一応、日本語で入国審査通ることもできるようですが、入国してからが困ります。)</p>

<h5>入国審査時に英語で会話して乗り切りましょう</h5>

<p>さて、入国してからですが・・・。<br/>
相手はしどろもどろの英語でもきっちり聞いてくれます。(相手によりけりかもしれませんが、基本的に聞いてくれます)<br/>
ここらへんは、日本でいうところの方言に近い感じなんですかね。<br/>
日本でも海外の方に道を尋ねられたりすると聞こうとするので、同じ感覚かもしれないですね。<br/>
多少訛っても気にならないような感じ。</p>

<h3>失敗したこと</h3>

<hr />

<p>ここからは自分の失敗談を記載します。</p>

<h6>航空チケット</h6>

<p>これは、往復で購入したほうがよいです。<br/>
料金が高くなってしまいます。(大体1.5倍くらいします)
内訳は以下のような感じです。</p>

<ul>
<li>NRT->SFO : 約23万</li>
<li>SFO->NRT : 約14万</li>
</ul>


<p>大体これぐらいしました。往復便で買えば、23万ぐらい(?)で済みます。<br/>
勿論、料金は航空会社や時期にもよりますがI/Oの時期だとこれぐらいですね。<br/>
日本は航空便が高いですね。</p>

<p>但し、片道で行くメリットもありまして・・・</p>

<ul>
<li>航路を自分で選択できるので、面倒な乗り換えの手間がなくなる</li>
<li>乗りたい飛行機の航空会社を選択できる</li>
<li>経由することで、旅行気分を変えることができる</li>
</ul>


<p>自分は、乗り換えの手間を極力省きたかっただけですね・・・。<br/>
初海外で、飛行機の乗り換えや経由は厳しいと思ったので。</p>

<h6>手荷物</h6>

<p>これは、失敗と言うよりもI/Oだから不要といったものでしょうか。<br/>
手荷物で以下のものを持っていました。</p>

<ul>
<li>iPad mini</li>
<li>iPhone4S(sim free)</li>
<li>iPhone5(国内版)</li>
<li>Nexus7</li>
<li>MacBookPro</li>
<li>モバイルブースター</li>
<li>Walkman</li>
<li>Shure SE530(遮音性高いので飛行機とか耳栓代わりになる)</li>
</ul>


<p>こんだけ持ってましたが、使用しないものが大半でした。<br/>
不要なものを列挙すると・・・</p>

<ul>
<li>iPad mini(飛行機の中で使用してればよいと思っていた)</li>
<li>Nexus7(飛行機の中で使用してればよいと思っていた)</li>
<li>MacBookPro(盗難にあうと不味いので常時持っていたのですが、兎に角重い)</li>
<li>Walkman(飛行機や海外で使用した記憶無し)</li>
</ul>


<p>ぐらいでしょうか。自分の場合、２台あるiPhoneはどちらも必要でした。</p>

<p>逆に持って行ったほうがよかったものを列挙します。</p>

<ul>
<li>デジカメ(当たり前ですが撮影機会は非常に多いです)</li>
<li>Android端末(sim freeかつNexusとかXperiaとかの著名な端末)</li>
<li>MacBookAir(常時持ち運びするなら軽いほうがいいですね)</li>
</ul>


<p>なので、こんなところにしておけばよかったとおもいます。</p>

<ul>
<li>MacBookAir</li>
<li>デジカメ</li>
<li>Android端末</li>
<li>iPhone</li>
<li>モバイルブースター</li>
<li>Shure SE530</li>
</ul>


<h6>金銭周り</h6>

<p>事前に調べてなかったのが悪かったのですが、クレジットで「JCB」が使用できなかったことです。<br/>
手持ちの「VISA」カードの利用残高が殆どなくってかなりキツかったです。(3万少々ぐらいだったはず)<br/>
航空チケットに「VISA」カードを使用したのが失敗でした(支払い期日がちょうど５月末だったので利用残高が増やせなかった)<br/>
カード会社によりますが、事前に申請することで海外用に利用残高を一時的に増やすことができます。<br/>
本当に事前にやりましょう。現地でやっても増額申請が降りませんでした。(２日以上かかるようでした)</p>

<p>あと、ベッドメイキング毎にチップを置きましょう・・・。
忘れていました。</p>

<h5>次回(あれば)この失敗は繰り返さないようにする。</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhoneのカレンダーアプリとGoogleCalendarを同期する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/05/iphone-google-calendar/"/>
    <updated>2013-04-05T08:13:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/05/iphone-google-calendar</id>
    <content type="html"><![CDATA[<p>iPhone/iPad購入後、１度しかやらないのでよく忘れます。<br/>
そのため、端末を新しくするとやり方を忘れるのでキモだけメモ。</p>

<h3>設定アプリ</h3>

<hr />

<ul>
<li>メール/連絡先/カレンダーの設定項目で、Gmailアカウントを登録する</li>
<li>作ったアカウントの設定項目で、カレンダーを「オン」にする</li>
<li>その他の項目は、「オフ」でもよい</li>
</ul>


<h3>カレンダーアプリ</h3>

<hr />

<ul>
<li>カレンダーの設定項目で、左下にある同期を押下する</li>
<li>Gmail項目が出るので、同期したいものをチェックする</li>
</ul>


<h3>参考</h3>

<hr />

<ul>
<li><a href="http://support.google.com/calendar/answer/151674?hl=ja&amp;ref_topic=13950">Google公式</a></li>
<li><a href="http://oshiete.appbank.net/archives/1585">画像入りの設定方法</a></li>
</ul>


<p>偶にしかやらないと忘れてしまいますね。</p>
]]></content>
  </entry>
  
</feed>
