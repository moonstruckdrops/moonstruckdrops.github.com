<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Go | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/go/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2013-08-11T22:23:25+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go Conference 2013 springに行って来ました。 #GoCon]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/13/gocon-spring/"/>
    <updated>2013-04-13T10:02:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/13/gocon-spring</id>
    <content type="html"><![CDATA[<p>午前中と午後はモクモクとコード書いてました。。。<br/>
XML周りの処理とかちょっとしたい感じだったので書いてみました。</p>

<p>「XMLの構造が分かっていたら、 Unmarshal関数を使ったほうがいいね。」</p>

<p>というのが感想です。<br/>
真面目にDOMを用意してみるとかなりコード書かないといけないので辛い感じ。<br/>
個人的には、XMLをDOMで操作するならRubyを使います(ぉぃ</p>

<p>動作速度まで測ってませんが、多分Goのほうが圧倒的速度で処理してくれるでしょう・・・。<br/>
機会があればやってみます。</p>

<p>以下、セッションメモ</p>

<h3>Goでの思考方法</h3>

<hr />

<p>class = type
object = value
method attache any type
interface はmethod(?)</p>

<p># 途中から何かしてたので聞き逃した。
# 何処かにスライド上がってないだろうか？</p>

<h3>Go言語で作るWebアプリ</h3>

<hr />

<p>Webサーバ作るときは、以下のやり方が基本</p>

<ul>
<li>http.Serverに渡して、http.Handlerで処理する</li>
<li>ListenAndServerで起動する</li>
<li>複数のハンドラを設定できる(http.serverMux型)</li>
<li>ハンドラを実装するのは大変なのでhttp.HandlerFuncを使う</li>
<li>serverMuxを作るのがめんどいなら、DefaultServerMuxというグローバル変数を使うといい</li>
<li>静的なhtmlを表示する場合は、http.FileServerを指定してやればいい</li>
</ul>


<p>Restful APIを作る</p>

<ul>
<li>GoWebを使えば、楽にできる</li>
<li>リクエストの受け取りやレスポンスをxmlやjsonで返せる</li>
<li>ルーティング管理ができる</li>
<li>Controllerを作るだけでいい</li>
<li>インタフェースを実装すればよい感じ</li>
</ul>


<p>テストパッケージやnginxと連携とかテンプレートエンジンとかあるので話したかった・・・</p>

<h3>GAE/Goの話</h3>

<hr />

<ul>
<li>main関数はAppEngineのRuntimeがやるので、実装しなくてもよい</li>
<li>構造体にデータ(kind)を作ってしまう</li>
<li>keyを作成する(AppEngineユーザーにはお馴染みの処理)</li>
<li>それからデータストアにputする</li>
<li>SDKはPythonが起動→Goで書いたアプリ起動の流れ</li>
<li>PythonとGoが連動してるのでGo単体のテストは辛い</li>
<li>AppEngineとGoは安心して使いづらい(単体テストが厳しいため)</li>
<li>Spin-Upは相当早い(Python 約386ms,Go 約48ms)</li>
<li>使用メモリは、Pythonに比べて少ない</li>
<li>Spin-Upと省メモリなので、Goは優位かも</li>
<li>I/O待ちがあるので、常にGoが早いと言えない</li>
<li>最初からAppEngineに入る場合には選択肢に入るかも</li>
<li>無理に既存のものを載せかる必要性はない</li>
<li>Pythonでメイン処理を書いて、GoをBackground処理にするという方法もアリ</li>
</ul>


<p># AppEngineで動かしてるオレオレのサービスの追加機能はGoで実装してみようかなぁ</p>

<h3>GoRoutine&amp;Channelでの並行処理</h3>

<hr />

<ul>
<li>並行処理のアプローチは「メモリのシェア」、「メッセージパッシング」の２つが大体使われる</li>
<li>GoはCSPとパイ計算がベースになっている</li>
<li>slectとclosureも並行処理で使える</li>
<li>ユーザーランドだと関数のまえにgoをつけると、goroutineが実行できる</li>
<li>gotoutineの終了は、処理が最後まで行った時、return文やgo_exitでできる</li>
<li>channelでgoroutine同士でメッセージできる</li>
<li>メッセージのバッファサイズも決めれる</li>
<li>goroutineを複数やる場合、waitegroupを使えばいい</li>
<li>Worker</li>
<li>Selectは読み出しがブロックするのを待っている</li>
<li>channelにはバッファ機能があり、バッファサイズ以上を書き込もうとするとブロックする(セマフォっぽいイメージ)</li>
<li>Goroutineでcoroutineっぽいものもできる</li>
<li>複数コアを使う場合、自分で明示的にコア設定してやる必要がある</li>
<li>netchanが昔はあったが、今はdeprecatedになっている。(I/Fが複雑になりすぎたかららしい。ノウハウ貯まれば復活するかも)</li>
</ul>


<p>\ # channelのcloseはレシーバ側で行うっぽい？</p>

<h3>goroutineのスケジューラの話</h3>

<hr />

<ul>
<li>スタックコントローラーやプロセスコントローラーで実行されてる</li>
<li>上を実現するため、Goは一部’アセンブラで書かれている</li>
<li>スケジューラ:G(goroutine),M(ワーカースレッド、マシン),P(プロセス。MAXPROCSに指定できる最大値はこいつ)</li>
<li>GOMAXPROCSは、スレッド数と同じではない(異なることもある)</li>
<li><a href="https://gist.github.com/methane/5377227">スケジューラを解析していた方のメモ</a>に詳しく流れが記載されています</li>
<li>go buildにsオプションをつけるとどんなランタイム呼ばれてるのかわかるようになる</li>
</ul>


<h3>Goのよいところ</h3>

<hr />

<p>最初の気に入らないところ</p>

<ul>
<li>第一印象、人形もコードもキモい！！違和感があった</li>
<li>似てるようで違うところが多くてキモい(C++/Java/Pythonと比較して)</li>
</ul>


<p>良かったところ</p>

<ul>
<li>読みやすい</li>
<li>シンプルな仕様(最近の言語は、便利機能多いけど複雑すぎる)</li>
</ul>


<p>Goを書き慣れてくると・・・<br/>
印象が変わる!!</p>

<ul>
<li>他の言語の複雑な型宣言にムカつく(複雑になってくるとGoのほうが有利)</li>
<li>ダックタイピングも複雑になってくると、動くことはわかるけどコードを読むときによく分からなくなる(Goだとinteeface型を作ればややこしくなくなる)</li>
<li>オブジェクト指向もGoのほうが便利(PythonもJavaもクラス設計をしっかりしないといけない)</li>
<li>スコープも調べるのが大変だし、アクセスしたいものもアクセスできないとかある(Goは大文字だとpublicそれ以外はpackage private)</li>
<li>未使用なコードもGoだとビルド時に検出してくれる(dependencyを残すと大規模開発になるとメンテが大変になる。どうしてものこしたければ「_」をつける)</li>
<li>エラー処理は、javaとかpythonはExceptionにしたがる(変なGoToしてるだけ、それは多値返せば、処理の流れは破綻しないでしょ)</li>
<li>panicは本当にどうしようもないときにだけ使用する。普通はエラーできっちり返してあげる設計にするべき</li>
<li>Goで解決したいものの多くは、サーバとかのインフラの並列処理</li>
</ul>


<p># 話聞いてると頷ける話で、確かに個人的にJavaはうざいと思うのは事実・・・
# 個人的にAPIのサンプルがドキュメントに載ってたらいいなぁなんて思いました。。。</p>

<h3>goでゲームを作る</h3>

<hr />

<ul>
<li>画面、音、入力のライブラリがある</li>
<li>なんか似たようなもので複数あるっぽい(描画だけでもGoGLとかglとか)</li>
<li>GoGL,go-flwでできる</li>
</ul>


<p>大まかな流れ</p>

<p>1 初期化で、キー入力とウィンドウ処理をしてやる(main関数ではこれだけにする)
2 初期化のタイミングでウィンドウの設定をしてやる
3 初期化以降はメインループを実行する
4 ゲームのランを行う(ウィンドウが開いてる間実行するように実装する)
5 フレームに対して描画を行う
6 ゲームを実装してる本体でキーボードとかの入力を受け取るようにする
7 描画メソッドではひたすら描画の実装をしてやる</p>

<h3>A Case Study</h3>

<hr />

<ul>
<li>Rubyにはいいところもあるが良くないところもある</li>
<li>CloudFundryでEventMachineをRubyでやっていた</li>
<li>Rubyは特に好きだ</li>
</ul>


<p>設立したベンチャー企業では
+ 複数のOSサポート
+ システムのスケールもさせたい
+ そのためGo vs Node.jsになった</p>

<p>Node.js</p>

<ul>
<li>v8ランタイム</li>
<li>イベント駆動</li>
<li>JSベース</li>
<li>ランタイム依存</li>
<li>JSベースなので(コールバック地獄)</li>
<li>実験的な機能が・・・</li>
</ul>


<p>Go</p>

<ul>
<li>設計メンバーが良かった</li>
<li>同期モデル</li>
<li>プラットフォームのサポートがよかった</li>
<li>新しい言語</li>
<li>標準ライブラリはどう使えば？</li>
<li>GCやスケジューラが隠れている</li>
</ul>


<p>いいところが多いので15分でGoを採用することになった(チームで決めた)</p>

<ul>
<li>学習が簡単だった</li>
<li>標準でライブラリが揃っている</li>
<li>なぜGoなのか(聞き取れなかった)</li>
<li>GoのGCはスタックベースなので良かった。</li>
<li>暗号化通信はOpenSSLのラッパーを用意した(パフォーマンスの問題？)</li>
<li>文字列とバイト配列の変換</li>
<li>SQLは低レベルすぎて辛いのでORMとドライバーは自前で用意した</li>
<li>mapも遅い。多分1.1で治るはず・・・</li>
<li>いけてない面もまだまだあるけど、Goを選択したのはよかった</li>
<li>GoはIaaSやPaaSで主役になれる!!</li>
</ul>


<p>まとめ</p>

<ul>
<li>GoはGoogleが採用しているだけあってシステム書くには向いている</li>
<li>Goは標準ライブラリが揃っている</li>
<li>テストやドキュメントもビルトインである</li>
<li>学習も楽にできる</li>
<li>GCもStackベースなので遅延が起きることは少ない</li>
<li>いくつかの問題は1.1で解決されることに期待!!</li>
</ul>


<p># 最後のセッションのこいつはうろ覚え(聞き取りながらで辛かった)</p>

<h3>感想</h3>

<hr />

<p>Goに関してのいいところや悪いところを吸収できたかなーと思う。<br/>
密度が濃い一日だったと思いました。　　
なによりGoでモクモクできたのが良かったなーとおもいます。(まともに書いたのはアーリーアダプター以来だった思う。。。)
コンパイルと実行が下のコマンドでできることには驚いた。(昔は8g,8lとかしてたコンパイルしてた記憶)
<code>
$go run &lt;プログラムファイル&gt;
</code>
仕事でシステム周りの実装するならGo言語をぜひとも採用させたいですね。。。</p>
]]></content>
  </entry>
  
</feed>
