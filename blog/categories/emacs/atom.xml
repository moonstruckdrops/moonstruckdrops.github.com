<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Emacs | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2015-06-21T14:58:00+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacsのバージョンで分岐をさせたい]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/01/08/emacs-version/"/>
    <updated>2015-01-08T00:51:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/01/08/emacs-version</id>
    <content type="html"><![CDATA[<h3>発端</h3>

<hr />

<p>Emacsのバージョンを最新にしたことで色々設定が楽に書けることがわかった<br/>
そのため、最新内容を反映させた</p>

<p>とはいえ、下位互換もある程度保ちたかった<br/>
(全部、追従すればいいのだがそうもいかない環境もあるので)</p>

<h3>最初に試してみた</h3>

<hr />

<p>普通にバージョンを取得してみた</p>

<p><code>
(emacs-version)
"GNU Emacs 24.4.1 (x86_64-apple-darwin14.0.0, NS apple-appkit-1343.16)
 of 2015-01-04 on hoge.local"
</code></p>

<p>文字列のマッチング処理が多くなりそうで結構めんどくさい・・・</p>

<h3>結果的にこうした</h3>

<hr />

<p>普通のmajor/minor バージョン判定を複合した条件判定するだけの関数を用意</p>

<p>24.3以下の判定</p>

<p><code>
(defvar is-less-than-or-equal-24-3 (and (&lt;= emacs-major-version 24) (&lt;= emacs-minor-version 3)))
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacsを再起動せずに設定を反映させる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/11/09/reload-config-emacs/"/>
    <updated>2014-11-09T12:23:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/11/09/reload-config-emacs</id>
    <content type="html"><![CDATA[<h3>やりたいこと</h3>

<hr />

<p>Emacsを再起動せず、設定内容を反映させたい</p>

<h3>解決編</h3>

<hr />

<p>追加した部分だけ、評価する</p>

<p><code>
M-x eval-region
</code></p>

<p>今、現在実行している全てのバッファの式を再評価する</p>

<p><code>
M-x eval-buffer
</code></p>

<p>そもそもの設定ファイルを読みなおす</p>

<p><code>
M-x load-file RET ~/.emacs.d/init.el
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vi(Vim) on Emacsを思いつきでやってみた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/06/07/vi-on-emacs/"/>
    <updated>2013-06-07T11:57:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/06/07/vi-on-emacs</id>
    <content type="html"><![CDATA[<p>ただのネタカテゴリですwww</p>

<p>昨夜、盛大に悪酔いしましてその時思いつきました。</p>

<p>手順とか見れば、誰でも思いつくでしょう。</p>

<p>という訳で以下に起動手順と感想を書いてみました。</p>

<h3>Vi(Vim) on Emacsの手順</h3>

<hr />

<ol>
<li>ターミナルを起動します。</li>
<li>おもむろにemacsとタイプしてEnterを押します。</li>
<li>M-x shellを実行し、shellモードを起動します。</li>
<li>shellモードで入力受付状態になりますので、おもむろに「vi」もしくは「vim」とタイプしてEnterを押します。</li>
</ol>


<p>あら不思議、Emacs上でVi(もしくはVim)が起動しましたよっと。</p>

<h3>Vi(Vim) on Emacs使った感想</h3>

<hr />

<p>やめておけの一言!!
ざっと、使用してみた感覚だとこんな感じ。</p>

<ul>
<li>Escを押したのか押してないのか判断がつけられない</li>
<li>モード切り替えの挙動が怪しい</li>
<li>環境かもしれないけど、Macだとスクリーン表示がおかしい</li>
</ul>


<p>ネタとしてはありですが、実用にはとても耐えられるものではないのでやめましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EmacsのScratchバッファに設定を追加してみた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/14/emacs-scratch-setting/"/>
    <updated>2013-04-14T22:06:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/14/emacs-scratch-setting</id>
    <content type="html"><![CDATA[<p>Emacsのscratchバッファってすごく便利ですよね。</p>

<p>特に以下のことによく使います。</p>

<ul>
<li>ちょっとしたメモしたり</li>
<li>URLメモを取ったり</li>
<li>ちょっとした引用メモの整形とか</li>
<li>マクロの実験とか</li>
</ul>


<p>まぁよく使うわけです・・・
が、ついうっかりでEmacsを終了したりとか、Emacs本体がゾンビプロセスになったりとかでロストしてしまうことがあります。<br/>
自分はこれでよく泣きました(> &lt;;)</p>

<p>また、メモを保存しておこうと思った時にバッファの先頭にある初期メッセージが鬱陶しくなってきます。</p>

<p>今回は、これらの問題を解決してしまいます。</p>

<p>まずは、scratchの初期メッセージ消去します。<br/>
以下の内容を「.emacs/init.el」に追加します。</p>

<p><code>
(setq initial-scratch-message "")
</code></p>

<p>この設定を加えて、Emacsを再起動するとscratchバッファの初期メッセージがなくなります。
即座に反映したければ、評価してもいいとおもいます。</p>

<p>次に、Emacsが終了してしまったときにScratchバッファの保存と再起動時にScratchバッファの内容を復元する方法ですが・・・</p>

<p>以下の内容を「.emacs/init.el」に追加します。</p>

<p>```
(defun save-scratch-data ()
  (let ((str (progn</p>

<pre><code>           (set-buffer (get-buffer "*scratch*"))
           (buffer-substring-no-properties
            (point-min) (point-max))))
    (file "~/.emacs.d/backups/.scratch"))
(if (get-file-buffer (expand-file-name file))
    (setq buf (get-file-buffer (expand-file-name file)))
  (setq buf (find-file-noselect file)))
(set-buffer buf)
(erase-buffer)
(insert str)
(save-buffer)
(kill-buffer buf)))
</code></pre>

<p>(defadvice save-buffers-kill-emacs
  (before save-scratch-buffer activate)
  (save-scratch-data))</p>

<p>(defun read-scratch-data ()
  (let ((file "~/.emacs.d/backups/.scratch"))</p>

<pre><code>(when (file-exists-p file)
  (set-buffer (get-buffer "*scratch*"))
  (erase-buffer)
  (insert-file-contents file))
))
</code></pre>

<p>(read-scratch-data)
```</p>

<p>上のEmacsLispが何をやっているかと言うと・・・<br/>
終了時にScratchの内容をファイルに書き込み、起動時に書き出したScratchバッファの内容を読み込みしているだけです。</p>

<p>これで、Scratchバッファをちょっとしたメモ帳として大いに活用できますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacsでmarkdown-modeを使用する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/03/24/markdown-mode/"/>
    <updated>2013-03-24T00:38:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/03/24/markdown-mode</id>
    <content type="html"><![CDATA[<p>Emacsでmarkdown-modeを使用してみます。<br/>
markdownの編集で使えるモードで結構便利なので紹介してみます。</p>

<h4>インストール</h4>

<hr />

<p>Emacsのパッケージインストーラからインストールをします。<br/>
以下を実行します。<br/>
<code>
M-x package-list-packages
</code>
markdown-modeを選択してインストールを実施します。</p>

<p>他にmarkdownコマンドが使用できるようにする必要がありますので、合わせてインストールします。<br/>
MacOSXだとHomebrewを使用すれば一発でインストール出来ます。
<code>
$brew install markdown
</code></p>

<h4>設定</h4>

<hr />

<ul>
<li>markdown-modeを使用できるように「.emacs.d/init.el」に以下を追加</li>
</ul>


<p><code>
(autoload 'markdown-mode "markdown-mode.el" "Major mode for editing Markdown files" t)
</code></p>

<ul>
<li>markdown-modeで使用できる拡張子を追加</li>
</ul>


<p><code>
(setq auto-mode-alist (cons '("\\.markdown" . markdown-mode) auto-mode-alist))
</code></p>

<p>上の設定では、.markdownと付くファイルは、markdown-modeを使用する設定です。<br/>
他に使用したいmarkdown-modeを使用したい拡張子があれば、同じようにして追加します。(下は.txtと付くファイルをmarkdown-modeで開きます)<br/>
<code>
(setq auto-mode-alist (cons '("\\.txt" . markdown-mode) auto-mode-alist))
</code></p>

<h4>エラー対処</h4>

<hr />

<p>プレビューを実行しようとすると、以下のようなエラーが発生します。<br/>
<code>
/bin/bash: markdown: command not found
</code></p>

<p>原因は、以下の２点が考えられます。</p>

<ol>
<li>markdownコマンドがインストールされていない</li>
<li>Emacsが認識しているパスと環境変数のパスが異なる</li>
</ol>


<p>1に関しては、markdownコマンドをインストールをすれば解決します。<br/>
2に関してですが、以下のようにしてEmacs側にパスを通してやれば解決できます。
```
(dolist (dir (list</p>

<pre><code>          "/sbin"
          "/usr/sbin"
          "/bin"
          "/usr/bin"
          "/opt/local/bin"
          "/sw/bin"
          "/usr/local/bin"
          (expand-file-name "~/bin")
          (expand-file-name "~/.emacs.d/bin")
          ))
</code></pre>

<p> (when (and (file-exists-p dir) (not (member dir exec-path)))
   (setenv "PATH" (concat dir ":" (getenv "PATH")))
   (setq exec-path (append (list dir) exec-path))))
```</p>

<h4>プレビュー</h4>

<hr />

<ul>
<li><em>markdown-output</em>バッファでプレビューを確認する
<code>
C-c C-c m
</code></li>
<li>ブラウザでプレビューを確認する(一時ファイルを作成します)
<code>
C-c C-c v
</code></li>
</ul>


<p><a href="http://jblevins.org/projects/markdown-mode/">公式</a>にその他の使用方法が掲載されていますので、その他の機能はそちらを参照してください。</p>

<p>ブラウザでプレビューしていて、かつOctpress用の記事を編集する場合、注意してください。</p>

<p>そのままデプロイするとhtmlファイルまでアップロードされてしまうので、２重投稿になるので気をつけてください。</p>
]]></content>
  </entry>
  
</feed>
