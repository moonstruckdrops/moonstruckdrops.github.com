<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2013-04-05T23:50:22+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[3分で認証とか考慮しないWebDavを構築してみる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/02/httpd-webdav/"/>
    <updated>2013-04-02T00:30:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/02/httpd-webdav</id>
    <content type="html"><![CDATA[<p>大したことはないし、そこらへんに構築メモは転がってるので要らないと思うけど・・・</p>

<p>という訳で、一から最低限の機能のみを構築しますという体で進めます。<br/>
日本語の文字化け対策にエンコーディングを入れてーみたいなことはしません。</p>

<p>動かすことのみに注力します。</p>

<h3>環境</h3>

<hr />

<p>・CentOS6.3 x86_64</p>

<h3>Apacheのインストール</h3>

<hr />

<p>以下のコマンドでApacheをインストールします。<br/>
このとき、インストールするパッケージはdevelにします。(色々必要なものが一緒に入るので)</p>

<p><code>
$sudo yum install httpd-devel
</code></p>

<h3>モジュールの確認</h3>

<hr />

<p>WebDavは、Apacheの追加モジュールです。<br/>
develパッケージでインストールした場合、自動でインストールされますが念の為に確認します。<br/>
以下の２つが、「/etc/httpd/conf/httpd.conf」に記載されているか確認します。</p>

<ul>
<li>LoadModule dav_module modules/mod_dav.so</li>
<li>LoadModule dav_fs_module modules/mod_dav_fs.so</li>
</ul>


<p>記載が無ければ、「/usr/lib/httpd/modules/」に上記モジュールがあるか確認します。<br/>
モジュールが存在していれば、追加しましょう。</p>

<h3>WebDavの設定</h3>

<hr />

<p>以下の内容で、「/etc/httpd/conf.d/webdav.conf」を作成します。<br/>
ACLやBasic認証とかもここで設定できますが、最低限動作なので実施しません。<br/>
因みに、ディレクトリに対して細かい設定ができます。</p>

<p>```
#</p>

<h1>This is to permit URL access to WebDav.</h1>

<p>#
Alias /webdav/ "/var/www/html/webdav/"
<IfModule mod_dav.c></p>

<pre><code>DAVMinTimeout 600
&lt;Location /webdav&gt;
    DAV On
&lt;/Location&gt;
</code></pre>

<p></IfModule>
```</p>

<h3>WebDav用のディレクトリ作成</h3>

<hr />

<p>WebDavとして共有するためのディレクトリを作成します。
<code>
$sudo mkdir -p /var/www/html/webdav
</code>
ディレクトリをApacheから制御できるように所有者・所有グループを「apache」に変更します。
<code>
$sudo chown apache:apache /var/www/html/webdav
</code></p>

<h3>iptablesの設定</h3>

<hr />

<p>iptablesを未設定のままにすると、iptablesによってアクセスできないので、80番ポートのアクセスを許可するように設定変更します。<br/>
<code>
$sudo emacs /etc/sysconfig/iptables
</code></p>

<p>80番での通信を許可するよう、以下の内容をREJECTの前に追加します。
<code>
-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
</code></p>

<p>iptablesを再起動します。
<code>
$sudo /etc/init.d/iptables restart
</code></p>

<h3>Apacheの起動</h3>

<hr />

<p>以下のコマンドで起動します。</p>

<p><code>
$sudo /etc/init.d/httpd start
</code></p>

<p><a href="http://localhost/webdav">http://localhost/webdav</a>にアクセス出来れば完了です。</p>

<p>この程度だと、大したことないし知ってれば３分要らないかもw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[findコマンドのメモ]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/03/31/find-command/"/>
    <updated>2013-03-31T00:04:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/03/31/find-command</id>
    <content type="html"><![CDATA[<p>普段から常用しているコマンドなのですが、今更という感じです。</p>

<p>滅多に使用しないオプションを今回使用することになったので、記録しておこうかと思った次第です。<br/>
※今回、使ったのは日時オプションです</p>

<table>
<thead>
<tr>
<th align="left"> コマンドオプション    </th>
<th align="center"> 機能          </th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> -name [filename]    </td>
<td align="center"> 指定した文字でファイル、ディレクトリを検索</td>
</tr>
<tr>
<td align="left"> -user [username]    </td>
<td align="center"> 指定したユーザーが所有するファイル、ディレクトリを検索</td>
</tr>
<tr>
<td align="left"> -group [groupname]  </td>
<td align="center"> 指定したグループが所有するファイル、ディレクトリを検索</td>
</tr>
<tr>
<td align="left"> -type [type]        </td>
<td align="center"> ファイルの種類を指定して検索(b：ブロック型特殊ファイル　c：キャラクタ型特殊ファイル　d：ディレクトリ　l：シンボリックリンク　f：通常ファイル)</td>
</tr>
<tr>
<td align="left"> -atime (+/-)n       </td>
<td align="center"> 最後にアクセスしたのがn日前で検索(+をつけると~日以上、-をつけると~日以下)</td>
</tr>
<tr>
<td align="left"> -ctime (+/-)n       </td>
<td align="center"> 最後にステータスが変更されたのがn日前で検索(+をつけると~日以上、-をつけると~日以下)</td>
</tr>
<tr>
<td align="left"> -mtime (+/-)n       </td>
<td align="center"> 最後にデータが修正されたのがn日前で検索(+をつけると~日以上、-をつけると~日以下)</td>
</tr>
<tr>
<td align="left"> -mmin (+/-)n        </td>
<td align="center"> 最後にデータが修正されたのがn分前で検索(+をつけると~日以上、-をつけると~日以下)</td>
</tr>
<tr>
<td align="left"> -newer [filename]   </td>
<td align="center"> 指定したファイルよりも後に更新されているものを検索対象にする</td>
</tr>
<tr>
<td align="left"> -size n[c/k/b]      </td>
<td align="center"> nのサイズのファイルを検索(c:バイト、k:キロバイト、b:ブロック)</td>
</tr>
<tr>
<td align="left"> -ls                 </td>
<td align="center"> 検索結果のファイル、ディレクトリの詳細を表示する(lsコマンドと同じ)</td>
</tr>
<tr>
<td align="left"> -print              </td>
<td align="center"> 検索結果を標準出力に出す(元々結果表示されるんで不要かも)</td>
</tr>
<tr>
<td align="left"> -fprint [filename]  </td>
<td align="center"> 検索結果をファイルに出力する(>でファイル出力できるので不要かも)</td>
</tr>
<tr>
<td align="left"> -exec [command] {}\;</td>
<td align="center"> 検索結果を指定コマンドにの引数に設定して実行する</td>
</tr>
</tbody>
</table>


<p>(例)カレントディレクトリ配下のファイルに「hogehoge」という文字が含まれているかどうか調べる</p>

<p>以下のコマンドで調べることができます。
<code>
$find . -type f -exec grep hogehoge {}\;
</code></p>

<p>こちらでも同じ結果を得られます。
<code>
$find . -type f |xargs grep "hogehoge"
</code></p>

<p>どちらでもいいと思いますが、自分はよく後者を利用しますね。</p>
]]></content>
  </entry>
  
</feed>
