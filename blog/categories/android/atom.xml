<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2014-02-23T21:05:06+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Volleyをビルドする]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/01/30/build-volley/"/>
    <updated>2014-01-30T00:36:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/01/30/build-volley</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>とある作業でAndroidの通信用ライブラリ「Volley」を使いたくなりました。<br/>
が、毎回使うたびにeclipseでーとかやりたくないわけです。<br/>
なので一度ビルドしてしまい、ライブラリ化してしまおうという魂胆です。</p>

<p># 毎回、ビルドどうやるんだっけな？ってAnt Task見たりするのも面倒というオチもあったりw</p>

<h3>ビルド前準備</h3>

<hr />

<p>Volleyにはビルド用のファイルとして、以下の2つがついています</p>

<ul>
<li>Ant</li>
<li>Gradle</li>
</ul>


<p>ですが、Gradleでビルドしようとした場合、エラーになります。<br/>
タスク一覧も見れませんでしたw</p>

<p>という訳でしたのでAntでやります。</p>

<p>その前に、VolleyはAndroid4.0がベースで作られているようなので、Android4.0のライブラリをインストールしておきます。</p>

<h3>ビルド</h3>

<hr />

<p>以下のコマンドでビルドします。</p>

<p><code>
$ant jar
</code></p>

<p>成功すれば、「volley/bin/volley.jar」というファイルが出来てます。</p>

<h3>バージョン管理とか</h3>

<hr />

<p>ここからは完全に余談なのですが・・・</p>

<p>こういうライブラリを使う場合だと、バージョンが重要だったりしてきます。</p>

<p>では、どうすればいいかということなのですが、自分としてはgit submoduleを使うことをオススメします。</p>

<p>こうすることで、本体コード(volleyを使う側)のバージョンアップに合わせて、都度volleyのバージョンアップを図ればいいことになります。</p>

<p>こんな感じのディレクトリ構成とし、Volleyは都度上記コマンドでビルドする運用</p>

<p><code>
Android
  |
  |- MainProject(自分が作成するアプリ)
  |
  |- Volley
</code></p>

<p>git submoduleのコマンドは以下です。
<code>
$git submodule add https://android.googlesource.com/platform/frameworks/volley Volley
</code>
submodule化したものを更新する場合は、以下のコマンドです<br/>
# 初回の場合は、updateではなくinitをしてsubmodule化したファイル類を取得する必要があります
<code>
$git submodule update
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android端末のROM焼きをやってみる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/01/02/write-android-rom/"/>
    <updated>2014-01-02T20:42:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/01/02/write-android-rom</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>Android端末ではNexus5を使用しています。</p>

<p>ついこの前(?)、4.4→4.4.2にアップデートしてみました。</p>

<p>アップデートしてみたところ、全体的な機能改善がされていました。</p>

<p>ところが、端末スピーカーを使って音声再生したところ音が割れるようになりました。</p>

<p>暫く、我慢して使って音声再生していたのですが、最早限界に達しましてダウングレードをすることにしました。</p>

<p># 大体、Android界隈でこういうROM焼きをする場合ってカスタムROMを焼くことが多いですが・・・ ^<sup>;;</sup></p>

<p># カスタムROMにしてしまうとAPIとか動作含めて検証機として微妙かなという印象もあるので純正にします。</p>

<h3>注意事項</h3>

<hr />

<p>本作業によって、メーカーの補償は一切きかなくなります。<br/>
本作業でデータが消えたり、Nexus5が起動しなくなってしまったとしてもこちらは一切責任を負いません。<br/>
全て自己責任でお願い致します。</p>

<h3>対象機器</h3>

<hr />

<p>Nexus5</p>

<h3>手順</h3>

<hr />

<p>どの端末で大体やることは同じのようです。</p>

<ol>
<li>Bootloderの解除</li>
<li>ROMの入手</li>
<li>ROMを焼く</li>
</ol>


<h3>Bootloderの解除</h3>

<hr />

<p>実はこれが一番ハードルが高いです。 <br/>
機種によって解除するための作業が微妙に異なるためです。(解除するための鍵を入手したり等)</p>

<p>幸いなことにNexus5はハードルが高くありません。</p>

<p># 流石、天下のGoogle様ですねw</p>

<p>以下の手順で行います。</p>

<ol>
<li><code>adb reboot bootloader</code>を入力する(電源ボタンとボリュームダウンボタンを同時押しで電源を入れるでも可)</li>
<li>画面に倒れたドロイド君が表示されていればOK</li>
<li><code>fastboot oem unlock</code>を入力する</li>
<li>Nexus5に、「Unlock bootloader?」と尋ねる画面が表示される</li>
<li>ボリュームボタンを操作し「Yes」を選び電源ボタンを押す</li>
</ol>


<p>上記作業が成功すれば、Nexus5のブートローダー画面のLOCK STATEが「unlocked」に変化しています。</p>

<p>ロックしたい場合は、<code>fastboot oem lock</code>と入力すれば、LOCK STATEが「locked」に変化します。</p>

<h3>ROMの入手</h3>

<hr />

<p>ここは簡単です。</p>

<p>純正のROMは、<a href="https://developers.google.com/android/nexus/images?hl=ja">Factory Images for Nexus Devices</a>から入手できます。</p>

<p># カスタムROMは専用のサイトとか行けばよいと思います。</p>

<h3>ROM焼き</h3>

<hr />

<p>これも簡単です。</p>

<p>純正のROMの場合は、shellとバッチが用意されていますのでそれを実行するだけです。<br/>
実行タイミングは、ブートローダー画面で行います。</p>

<p>こんな感じでログが出たあとに端末が再起動すれば成功かと思います。</p>

<p>```
sending 'bootloader' (2506 KB)...
OKAY [  0.288s]</p>

<p>中略</p>

<p>writing 'cache'...
OKAY [  1.904s]
rebooting...</p>

<p>finished. total time: 99.240s
```</p>

<p>以上！！自分の作業備忘録でした！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveAndroidを使ってみた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/12/19/active-android/"/>
    <updated>2013-12-19T00:58:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/12/19/active-android</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<hr />

<p>久しぶりにオレオレ用のAndroidアプリを書きました。<br/>
その際、DBを使ったのですが、面倒くさいことはしたくなかったので<br/>
Android向けO/R Mapperである<a href="https://github.com/pardom/ActiveAndroid">ActiveAndroid</a>使いました。</p>

<p>その時のメモを備忘録な感じで残します。</p>

<h2>準備</h2>

<hr />

<p>以下のようにして、ライブラリを自分でビルドします。<br/>
ビルド完了後、プロジェクトのビルドパスにライブラリを追加します。</p>

<p><code>
$ git clone https://github.com/pardom/ActiveAndroid.git
$ cd ActiveAndroid
$ sh gradlew build
</code></p>

<h2>設定</h2>

<hr />

<p>2種類の方法で利用準備ができます。</p>

<ol>
<li>AndroidManifest.xmlに設定する</li>
<li>Applicationクラスを継承した独自のクラスを用意する</li>
</ol>


<p>1のやり方は以下のような形で定義します。</p>

<ul>
<li>meta-dataタグを用意し、そこにDB名前とバージョンを記載</li>
<li>android:nameに「com.activeandroid.app.Application」を記載</li>
</ul>


<p>```
&lt;application</p>

<pre><code>    android:allowBackup="true"
    android:name="com.activeandroid.app.Application"&gt;
    ・・・

    &lt;meta-data android:name="AA_DB_NAME" android:value="test.db" /&gt;
    &lt;meta-data android:name="AA_DB_VERSION" android:value="1" /&gt;

    ・・・
</code></pre>

<p></application>
```</p>

<p>2のやり方は、以下のようにして設定内容を組み立て、起動と停止処理を組み込みます。</p>

<p>```
public class MyApplication extends Application {</p>

<p>  @Override
  public void onCreate() {</p>

<pre><code>super.onCreate();
Builder builder = new Configuration.Builder(getBaseContext());
builder.setCacheSize(1024*1024*4);
builder.setDatabaseName("test.db");
builder.setDatabaseVersion(1);
ActiveAndroid.initialize(builder.create(), true);
</code></pre>

<p>  }</p>

<p>  @Override
  public void onTerminate() {</p>

<pre><code>super.onTerminate();
ActiveAndroid.dispose();
</code></pre>

<p>  }
```</p>

<p>上記の内容では、以下のものを設定しています。</p>

<ul>
<li>キャッシュサイズ4MB</li>
<li>DBを「test.db」</li>
<li>バージョンを「1」</li>
<li>ActiveAndroidのログを有効化(initializeメソッドのtrueのこと)</li>
</ul>


<p>個人的には、以下の理由から組み立てて実行するほうがよいかと思います。</p>

<ul>
<li>ActiveAndroidの設定に引きづられず、自分のアプリに影響が出ないこと</li>
<li>DBのキャッシュサイズを決められる(デフォルトが1KBのため)</li>
<li>progurdによる難読化ができる(AndroidManifest.xmlに書けば見え見えになりますが、コードだと難読化ができる)</li>
</ul>


<p>尤も、最後のはコード上でstaticに文字列として定義するとあまり意味がないですが・・・</p>

<h2>モデル定義</h2>

<hr />

<p>以下のような感じでアノテーションをつける形で定義します。</p>

<p>```
@Table(name = "Items")
public class Item extends Model {</p>

<p>  @Column(name = "id", notNull = true)
  public int id;</p>

<p>  @Column(name = "name", unique = true, onUpdate = ForeignKeyAction.NO_ACTION)
  public String name;</p>

<p>  @Column(name = "category", onNullConflict = ConflictAction.REPLACE)
  public String category;</p>

<p>  public List<Test> tests() {</p>

<pre><code>return getMany(Test.class, "test");
</code></pre>

<p>  }
}
```</p>

<p>アノテーションに付けれる内容は以下の表のような感じのものです。<br/>
殆どが<a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html">Android本家のページ</a>のConstants(CONFLICT_XXXと記載されたもの)なので<br/>
こちらの説明を読んで設定すればよいかと思います。</p>

<table>
<thead>
<tr>
<th> 定義先 </th>
<th> 定義内容 </th>
<th> 意味</th>
</tr>
</thead>
<tbody>
<tr>
<td> クラス </td>
<td> name      </td>
<td> 対応するテーブル名</td>
</tr>
<tr>
<td> 変数   </td>
<td> name      </td>
<td> 対応するカラム名</td>
</tr>
<tr>
<td>      </td>
<td> length           </td>
<td> 長さの制約(デフォルト -1(無制限?))</td>
</tr>
<tr>
<td>      </td>
<td> notNull          </td>
<td> not null制約(デフォルト false)</td>
</tr>
<tr>
<td>      </td>
<td> onNullConflict   </td>
<td> null制約違反時の動作を設定する(デフォルトはFAIL, 設定内容はAndroid公式参照)</td>
</tr>
<tr>
<td>      </td>
<td> onDelete         </td>
<td> 削除時の外部キーの動作設定(CASCADE, RESTRICT等が設定可能)</td>
</tr>
<tr>
<td>      </td>
<td> onUpdate         </td>
<td> 更新時の外部キーの動作設定(CASCADE, RESTRICT等が設定可能)</td>
</tr>
<tr>
<td>      </td>
<td> unique           </td>
<td> ユニーク制約(デフォルト false)</td>
</tr>
<tr>
<td>      </td>
<td> onUniqueConflict </td>
<td> ユニーク制約違反時の動作を設定\n(デフォルトはFAIL, 設定内容はAndroid公式参照)</td>
</tr>
</tbody>
</table>


<p>意味が必ずしも正しいかと言われると少し自信がありませんが、多分こんな感じかと。</p>

<p>また、1対Nのような関係を作るときは、getMenyメソッドを実装したヘルパーメソッドを作る必要があるようです。</p>

<h2>クエリ</h2>

<p>クエリについて、書いていきます。</p>

<p>以下を使ったことがあればすんなり理解できるかと・・・</p>

<ul>
<li>JavaのO/R Mapper(s2jdbc等)</li>
<li>RubyのActiveRecord</li>
</ul>


<h3>挿入</h3>

<hr />

<p>以下のような感じで記載します。<br/>
ActiveRecordと殆ど同じですね。</p>

<p><code>
Item item = new Item();
item.name = "test";
item.save();
</code></p>

<p>以下のようにすれば、バルクインサートもできます。
また、トランザクションも併せて記載します。</p>

<p>```
ActiveAndroid.beginTransaction();
try{
  for(int i = 0; i &lt; 1000; i++ ){</p>

<pre><code>Item item = new Item();
item.name = "test_" + i;
item.save();
</code></pre>

<p>  }
  ActiveAndroid.setTransactionSuccessful();
}finally{
  ActiveAndroid.endTransaction();
}
```</p>

<p>トランザクション中にエラーが出てもthrowされないので、注意して下さい。<br/>
コンフリクト周りでエラーが出る場合は、モデルのアノテーションに定義した内容が適用されます。</p>

<h3>削除</h3>

<hr />

<p>やり方は、以下の３種類です。</p>

<ol>
<li>オブジェクトをロードしてから削除する方法</li>
<li>静的メソッドを使用して削除する方法</li>
<li>クエリを組み立てて削除する方法</li>
</ol>


<p>1のやり方は、以下です。<br/>
一度、selectしてから削除という感じです。
<code>
Item item = Item.load(Item.class, 1);
item.delete();
</code></p>

<p>2のやり方は、以下です。<br/>
主キーさえ分かっていれば、こちらのほうが無駄なクエリを発行しない分早いです。</p>

<p><code>
Item.delete(Item.class, 1);
</code></p>

<p>3のやり方は、以下です。<br/>
複数の行をまとめて削除できたりします。</p>

<p><code>
new Delete().from(Item.class).where("Id = ? and name = ?", 1, "test").execute();
</code></p>

<h3>参照</h3>

<hr />

<p>これも直感的に記述できます。<br/>
使い方は、s2jdbcに似ています。</p>

<p>```
Item result = new Select().from(Item.class).executeSingle();</p>

<p>List<Item> resultSet = new Select("id", "name").from(Item.class).execute();</p>

<p>List<Item> resultSet = new Select().from(Item.class).where("Id = ? and name = ?", 1, "test").execute();
```</p>

<p>上記のような形で実行できます。</p>

<ul>
<li>先頭１つのカラムデータのみ取得</li>
<li>カラムを指定した取り方</li>
<li>条件付き(s2jdcのようにandメソッドとかはありません)</li>
</ul>


<p>テーブル結合時は、以下のような形で記述します。<br/>
現状では、以下の方法しか手段がないようです。</p>

<ol>
<li>ActiveAndroidでクエリオブジェクト作成</li>
<li>1で作成したクエリオブジェクトからsqlを作成</li>
<li>2のsqlを直接実行しCursorクラスのオブジェクトを取得</li>
<li>Cusorクラスからデータを取得する(whileループ等で・・・)</li>
</ol>


<p>```
From query = new Select().from(Item.class).innerJoin(Hoge.class).on("Hoge.id = Item.id");</p>

<p>Cursor cursor = Cache.openDatabase().rawQuery(query.toSql(), query.getArguments());
```</p>

<h2>感想</h2>

<hr />

<p>こんな感じな印象でした。簡単なものだと今後も使うかも。</p>

<ul>
<li>ActiveRecordライクなので、扱い易い</li>
<li>Modelクラスを継承したクラスを作るだけで、面倒な処理を大幅に軽減できる</li>
<li>テーブル定義にコードが引きづられやすくなるので注意</li>
<li>複雑なクエリの場合、通常のSQLiteのDB操作と変わらなくなる</li>
</ul>


<h2>資料</h2>

<hr />

<p>身内向けの勉強会で、ActiveAndroidについて発表してきました。
その時、書いた資料とかも残しておきます。</p>

<p><iframe src="http://www.slideshare.net/slideshow/embed_code/29216122 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[端末にインストールしてあるapkファイルを取り出す]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/07/14/push-apk/"/>
    <updated>2013-07-14T11:48:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/07/14/push-apk</id>
    <content type="html"><![CDATA[<p>訳があって実施することになりました。<br/>
ビルドに使ったソースコードがなくなってしまっただけなんですけどね。</p>

<h3>前提</h3>

<hr />

<ol>
<li>adbコマンドが使える環境であること</li>
<li>端末がデバッグモードONであること</li>
</ol>


<h3>手順</h3>

<hr />

<p>以下の方法で実施します。</p>

<ol>
<li>adb shell pm list packages -f | grep [取得対象のパッケージ名の一部]</li>
<li>1を実行すると「package:/data/app/&lt;apkファイル名>=&lt;アクティビティ名>」が表示される</li>
<li>adb pullコマンドでapkファイルのフルパス(/data/app/&lt;apkファイル名>)を指定する</li>
</ol>


<p>これだけです。</p>

<p>一応ソースコードを紛失したapkのバイナリが取り出せました。<br/>
別の端末にインストールできる。<br/>
よかったよかった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Androidのソースコード検索サービスを構築してみる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/03/25/gnu-global/"/>
    <updated>2013-03-25T12:17:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/03/25/gnu-global</id>
    <content type="html"><![CDATA[<p>色々経緯(長いような長くないようなもの)があるわけでして、構築してみることにしました。<br/>
とりあえず、aospのmasterで構築してみます。</p>

<h4>環境</h4>

<hr />

<ul>
<li>Ubuntu12.04 x86_64</li>
<li><a href="http://www.gnu.org/software/global/">GNU Global 6.2.8</a></li>
<li>Apache2</li>
</ul>


<p>GNU Globalのバージョンは、なるべく新しいものを入れるようにします。。。<br/>
Ubuntuのapt-getでインストールもできますが、ソースコードを解析した結果が正しくgenerateされません。<br/>
6.2.8だと正しく解析できました。(公式もdebianで配布しているパッケージは古いと記載があったので、Ubuntuも同じ感じでしょう)</p>

<h4>事前準備</h4>

<hr />

<p>事前準備として、以下を実施します。</p>

<ul>
<li>GNU Globalのインストール</li>
<li>Apache2のインストール</li>
<li>Androidのソースコードをダウンロード</li>
</ul>


<h6>GNU Globalのインストール</h6>

<hr />

<p>前述のように、UbuntuのリポジトリにあるGNU Globalは古いのでソースコードの解析が正しく行われません。<br/>
そのため、ビルドしてインストールします。</p>

<ol>
<li>ソースコードの取得(<a href="http://www.gnu.org/software/global/">ここ</a>からダウンロード)</li>
<li>ビルド(ここではデフォルト設定で行います)
<code>
$./configure --prefix=/usr/local/global
$make
</code></li>
<li>インストール
<code>
$sudo make install
</code>
ビルドの際に付与するオプションはご自身で設定してください。</li>
</ol>


<h6>Apache2のインストール</h6>

<hr />

<p>普通にインストールします。
<code>
$sudo apt-get install apache2
</code></p>

<p>UbuntuっていうかDebian系使いづらいなぁ・・・。</p>

<h6>Androidのソースコード取得</h6>

<hr />

<p>(公式)[]にしたがって実施します。<br/>
今回は「/var/aosp」のディレクトリ配下に保存することとします。</p>

<h4>コード解析(タグ作成)の実施</h4>

<hr />

<p>以下のコマンドで実行します</p>

<p><code>
$cd /var/aosp
$gtags -v
</code></p>

<h4>タグのHtml化</h4>

<hr />

<p>以下のコマンドで実行します。</p>

<p>```
$cd /var/aosp
$htags -afsnDvo --title Android --item-order=s --show-position --fixed-guid --auto-completion</p>

<p>```</p>

<p>非常に長いオプションですが、ソースコード検索フォームのhtmlが生成されます。<br/>
検索に加えて、検索フォームの上で入力補完をできるようにしていますので、CGIの実行が必要です。</p>

<h4>Apache2の設定</h4>

<hr />

<p>以下のコマンドでブラウザから参照可能なディレクトリを作成します。
<code>
$mkdir -p /var/www/aosp
</code></p>

<p>コンテンツの配備を実施します。<br/>
特に意図はないですが、コピーだとめんどいのでシンボリックリンクにします。
<code>
$cd /var/www/aosp
$ln -s ../aosp/HTML HTML
</code></p>

<p>/etc/apache2/sites-enable/defaultsを編集します。</p>

<p>```
ScriptAlias /cgi-bin/ /var/www/aosp/HTML
<Directory "</var/www/aosp/HTML/cgi-bin"></p>

<pre><code>AllowOverride None
Options +ExecCGI
AddHandler cgi-script .cgi .pl
Order allow,deny
Allow from all
</code></pre>

<p></Directory>
```</p>

<p>編集完了後、apache2を再起動します。
<code>
$/etc/init.d/apache2 restart
</code></p>

<p>ブラウザ上で<a href="http://localhost/aosp">http://localhost/aosp</a>にアクセスして、画面が表示されることを確認します。</p>

<h4>感想</h4>

<hr />

<p><a href="https://sites.google.com/site/devcollaboration/codesearch">こういうサービス</a>が、既に世の中にある訳で・・・</p>

<p>自分がやる必要ってあんまりないんじゃないかなーとか。。。</p>
]]></content>
  </entry>
  
</feed>
