<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2017-09-21T22:22:42+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AndroidでGroovyを使ってみる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/12/20/android-groovy/"/>
    <updated>2015-12-20T23:38:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/12/20/android-groovy</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>現在常用のスマホとしてAndroid端末を使っています。<br/>
(つい半年前まではiPhoneを使っていました)</p>

<p>端末機としては海外版、XperiaZ3 Compactです。<br/>
(昨今の大型化している流れの中軽量かつ音楽プレイヤーとしても優れている機種として選定しました。)</p>

<p>元々iPhoneユーザーかつ環境が全てApple製品で統一されているので、音楽管理もiTunesで行っています。</p>

<p>そういう状況下であったので、iSyncrというアプリでiTunesのプレイリストと端末を同期させて利用していました</p>

<p>どうもXperiaZ3 Compact側のイヤホンジャック(ヘッドホンジャック)が壊れたようで、<br/>
音楽プレイヤーとしてはまともには利用できなくなりました</p>

<p>とはいえ、Youtubeを見て修理するのはリスクが高いのと、パーツが個人輸入になるので調達までのハードルが高いので修理方向は諦めました</p>

<p>が、どうも最近のwalkmanでは、microSDを使えプレイリストを少し調整すれば認識できるようなことを聞きつけました<br/>
(店頭モックでも、プレイリストを認識し再生可能であることを確認しました)<br/>
なので、microSDとの同期はiSyncrに任せ、同期したプレイリストの変更を独自のアプリでやればいいのではないかと思い今回やってみました</p>

<h3>やりたいこと</h3>

<hr />

<p>まずはiSyncrで作ったプレイリストがウォークマンから認識できるかどうかを確認しました。<br/>
結論的に言うとそのままでは不可能で、一旦編集が必要のようです。</p>

<p>どうやらiSyncrを使ってiTunesの曲を転送したときは、iSyncrの作ったm3uプレイリストを正しく認識出来ないようです<br/>
これは、ウォークマン側のプレイリスト内のパスの解釈の問題のようです。<br/>
対処方法としては、パスの先頭の「/」を削除することで認識させることできます<br/>
(ウォークマン内部では、パスが補完されているのかもしれませんがその辺りは不明です)</p>

<p>こんな感じになるようにします</p>

<p><code>
/hoge/fuga.mp3     -&gt; hoge/fuga.mp3
/hoge/fugafuga.mp3 -&gt; hoge/fugafuga.mp3
</code></p>

<p>ということで実装としてやりたいことは至ってシンプルです</p>

<ul>
<li>編集後のプレイリストファイルを作成する</li>
<li>iSyncrで作成したプレイリストの内容を、ほぼそのまま編集後のプレイリストに書き込む</li>
<li>この時、行の最初の文字が「/」の場合、上記のように先頭の「/」を空文字に置換する</li>
</ul>


<h3>何故Groovy</h3>

<hr />

<p>Javaで書くと、以下の内容が面倒だったりするわけなのです</p>

<ul>
<li>StreamだとかWriterやらReaderやらでコード自体が肥大化、冗長化すること</li>
<li>ファイルの中身の操作や置換とか結構大変で面倒</li>
</ul>


<p>なので、今回その辺もサクッと実装できるGroovyで書いてみました</p>

<p>他にあるとすれば・・・</p>

<ul>
<li>GroovyがAndroidでも動くということ</li>
<li>置換検証用のコードをサクッと移植したかったこと</li>
<li>個人的にGroovyでコード書くというリハビリ(書かなくなって久しいので)</li>
</ul>


<h3>当該Groovyコード</h3>

<hr />

<p>やりたいことを実施するファイルの置換用コードは以下のようになります</p>

<p>```
def files = new File('Your Path').listFiles()
playList = files.findAll { it.getName() =~ /.*.m3u$/ }</p>

<p>playList.each { file ->
  def playListName = file.canonicalPath</p>

<p>  // 変更版プレイリスト
  def newPlayListName = "${file.canonicalPath}.new"
  def newPlayListFile = new File(newPlayListName)</p>

<p>  // 変更版プレイリストに現行プレイリストの修正内容を出力
  newPlayListFile.withWriter('UTF-8') { writer -></p>

<pre><code>file.newReader().transformLine(writer) { line -&gt;
  if (line.startsWith("/")){
    // 行の最初の文字の場合、「/」を置換する
    line.replaceFirst(/\//,"")
  } else {
    // それ以外の場合はそのまま出力
    line
  }
}
</code></pre>

<p>  }</p>

<p>  // ファイル名を変更する
  file.renameTo("${file.canonicalPath}.old")
  newPlayListFile.renameTo("${playListName}")
}
```</p>

<p>本当であれば上書き保存という形にしたいところですが、<br/>
元のファイルが無くなってしまうと今度は同期が取れなくなる可能性があるので別ファイルとしました</p>

<h3>GroovyをAndroidに導入</h3>

<hr />

<p>まずはGroovyのインストールをします。<br/>
以下のような形で<a href="http://sdkman.io/">sdkman</a>を使いましょう</p>

<p><code>
$ curl -s http://get.sdkman.io | bash
$ sdk ls groovy
$ sdk install groovy 2.4.5
$ sdk use groovy 2.4.5
</code></p>

<p>次にAndroidStudioでAndoridプロジェクトを用意します<br/>
Androidプロジェクトに対して、<a href="https://github.com/groovy/groovy-android-gradle-plugin">groovy-android-gradle-plugin</a>を導入します</p>

<p>プロジェクトROOTにあるbuild.gradleを以下のようにします<br/>
(プラグインを導入するのみです)</p>

<p>```
buildscript {</p>

<pre><code>repositories {
    jcenter()
}
dependencies {
    classpath 'com.android.tools.build:gradle:1.3.0'
    classpath 'org.codehaus.groovy:gradle-groovy-android-plugin:0.3.6'
}
</code></pre>

<p>}</p>

<p>allprojects {</p>

<pre><code>repositories {
    jcenter()
}
</code></pre>

<p>}</p>

<p>task clean(type: Delete) {</p>

<pre><code>delete rootProject.buildDir
</code></pre>

<p>}
```</p>

<p>次にアプリ側のbuild.gradleを変更します<br/>
(プラグインの適用と、コンパイルライブラリの追加、プラグインの設定追加)</p>

<p>```
apply plugin: 'com.android.application'
apply plugin: 'groovyx.grooid.groovy-android'</p>

<p>android {</p>

<pre><code>中略
</code></pre>

<p>}</p>

<p>dependencies {</p>

<pre><code>compile fileTree(dir: 'libs', include: ['*.jar'])
testCompile 'junit:junit:4.12'
compile 'com.android.support:appcompat-v7:23.1.1'
compile 'com.android.support:design:23.1.1'
compile 'org.codehaus.groovy:groovy:2.4.3:grooid'
</code></pre>

<p>}</p>

<p>project.androidGroovy {</p>

<pre><code>options {
    configure(groovyOptions) {
        encoding = 'UTF-8'
        forkOptions.jvmArgs = ['-noverify'] // maybe necessary if you use Google Play Services
    }
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
}
</code></pre>

<p>}
```</p>

<p>ソースの配置を<code>「src/main/java/MainActivity.java」</code>から<code>「src/main/groovy/MainActivity.groovy」</code>変更します</p>

<p>最後にソースを以下のようにしてGroovyライクに実装します</p>

<p>```</p>

<p>@CompileStatic
public class MainActivity extends AppCompatActivity {</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    def hello = { lang -&gt;
        def toast = Toast.makeText(this, "Hello ${lang}!", Toast.LENGTH_LONG)
        toast.setGravity(Gravity.CENTER, 0, 0)
        toast.show()
    }
    hello("Hello Groovy on Android!")
}
</code></pre>

<p>}
```</p>

<p>一応いっておきますが、@CompileStaticアノテーションで静的コンパイルしなくても動作はします<br/>
が、動的コードはパフォーマンス的にきびしいので@CompileStatic推奨されているようです</p>

<h3>ビルド時の注意点</h3>

<hr />

<p>Android Studioでビルドを実行したとき、エラーがあった場合以下のような形でEventLogに出力されてビルドが停止します。<br/>
メッセージを見ても、何が悪いか分かりません。正直、自分は困惑しました</p>

<p><code>
0:52:06 Platform and Plugin Updates: The following components are ready to update: Google Play services, Google Repository, Android SDK Platform-tools
1:14:33 Gradle sync started
1:14:57 Gradle sync completed
1:14:57 Executing tasks: [:app:generateDebugSources, :app:generateDebugAndroidTestSources]
1:15:01 Gradle build finished in 4s 168ms
1:15:41 Executing tasks: [:app:generateDebugSources, :app:generateDebugAndroidTestSources, :app:compileDebugSources, :app:compileDebugAndroidTestSources]
1:15:47 ExternalSystemException: String index out of range: -105
</code></p>

<p>そのときはGradle Consoleを確認しましょう<br/>
以下のような形でエラーメッセージが表示されています<br/>
(この場合、Syntaxエラーですね)</p>

<p>```
:app:compileDebugJavaWithJavac UP-TO-DATE
:app:compileDebugGroovyWithGroovyc
startup failed:
MainActivity.groovy: 53: expecting ')', found '}' @ line 53, column 13.</p>

<pre><code>           }
           ^
</code></pre>

<p>1 error</p>

<p> FAILED</p>

<p>FAILURE: Build failed with an exception.</p>

<ul>
<li><p>What went wrong:
Execution failed for task ':app:compileDebugGroovyWithGroovyc'.</p>

<blockquote><p>Compilation failed; see the compiler error output for details.</p></blockquote></li>
<li><p>Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.</p></li>
</ul>


<p>BUILD FAILED</p>

<p>Total time: 5.687 secs
```</p>

<p>因みに上記のような形になった場合、何故かそのままではビルドの再開が出来ませんでした。<br/>
対応としては一度「Clean Project」を実行する必要があります</p>

<h3>結果的に・・・</h3>

<hr />

<p>ここまで読めば、分かる方はわかりますが実現はサクッとは出来ませんでした。</p>

<p>何故かと言うとAndroid4.4あたりから導入された<a href="https://developer.android.com/intl/ja/guide/topics/providers/document-provider.html">Storage Access Framework</a>のことをスッカリ忘れていたのでやりたいことは出来ませんでしたorz</p>

<p>当初の運用自体は、iSyncrの同期先をSDカードにしてSDカードに対して同期<br/>
その後同期されたSDカードをPC側にマウントして、上記コードを通してやればよいので無理にAndroid経由させなくていいかなぁと思った次第です</p>

<p>とはいえGroovyでAndroidアプリを書いてみることはまぁできたのでよしとします。<br/>
GroovyでGroovy GDKの便利なAPIやクロージャの恩恵を最大限に受けてて、簡潔に書くことが出来て素晴らしいなと思いました</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BuildConfigを使用して、環境ごとに値を取得仕分けてみる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/03/17/android-build-config/"/>
    <updated>2015-03-17T23:57:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/03/17/android-build-config</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>WebAPIと連携するようなAndroidアプリを作っているのですが
開発と本番で接続先を切り替える必要が出てきました。</p>

<p>それのライトな対応方法をメモ</p>

<h3>build.gradleを編集</h3>

<hr />

<p>以下のような形で記載</p>

<p>```
buildTypes {
  debug {</p>

<pre><code>buildConfigField "String", "API_URL", "\"http://api-dev.hoge.co.jp\""
</code></pre>

<p>  }
  release {</p>

<pre><code>buildConfigField "String", "API_URL", "\"http://api.hoge.co.jp\""
</code></pre>

<p>  }
}
```</p>

<h3>ソースコード側</h3>

<hr />

<p>以下のように特に気にせずBuildConfigを参照すればよい</p>

<p><code>
String url = BuildConfig.API_URL
</code></p>

<p>ビルド環境に応じた値が取得できる</p>

<h3>できたけど・・・</h3>

<hr />

<p>これぐらいなら、まぁbuild.gradleでいいやという気がするもののパラメータ増えたら収拾つかなくなる予感</p>

<p>真面目にやるならBuild Variantsを使うほうがよいかと思います</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidのPull To Refreshをちょっとだけ調べた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/01/17/pull-to-refresh/"/>
    <updated>2015-01-17T23:58:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/01/17/pull-to-refresh</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>ここの内容は完全に備忘録です。<br/>
何故かというと、自分がちょっと実現したい機能があったけどできるのだろうかと調べてみたメモだからです。</p>

<h3>普通のPull To Refresh</h3>

<hr />

<p>所謂、下向きに引っ張るとListViewが更新されるやつですね。</p>

<p>これはAPI Level19のSupport V4 Libraryにて機能提供されているので、簡単に実現できます。<br/>
(ちょっと癖はあるかもしれませんが・・・)</p>

<p>以下にデモとReferenceを記載</p>

<ul>
<li><a href="https://developer.android.com/samples/SwipeRefreshLayoutBasic/index.html">SwipeRefreshLayoutBasic</a></li>
<li><a href="https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html">SwipeRefreshLayout</a></li>
</ul>


<p># デモを見ればわかりますが、扱うだけなら非常に楽に使えるような感じになっています(カスタムは面倒臭さそう)<br/>
# ぐぐれば、いっぱい記事は見つかるので詳細はそちらに譲ります</p>

<h3>やりたかったこと</h3>

<hr />

<p>下から上にListViewを引っ張ると、ListViewが更新されること<br/>
俗に言う、bottomup to refreshってやつです</p>

<h3>調べてみた</h3>

<hr />

<h4>ライブラリは？</h4>

<p><a href="https://github.com/chrisbanes/Android-PullToRefresh">Android-PullToRefresh</a>が、対応している
但し、作者がdeprecated宣言</p>

<h4>カスタム実装は？</h4>

<p>少し試してみた感じだと、標準機能を駆使して実現(Classの継承など)は、まず無理かも</p>

<p># そもそも、そんな感じで簡単にrefreshする機能を上下を入れ替え作られているような感じにはなってなかった</p>

<h4>ソースコードを見れば？</h4>

<p>結論から言うと、onTouchEventでアニメーションの実施の有無など詳細な条件判定とかやっているので今のところ難しそう</p>

<p><a href="https://android.googlesource.com/platform/frameworks/support/+/refs/heads/master/v4/java/android/support/v4/widget/SwipeRefreshLayout.java">SwipeRefreshLayout.java</a></p>

<p># 追いかけた結果を書くのは割愛します</p>

<h5>他の人はどうなの？</h5>

<p>同じことを考える方はいらっしゃるようですね。</p>

<p><a href="http://stackoverflow.com/questions/24867204/swiperefreshlayout-pull-from-bottom">SwipeRefreshLayout - Pull From Bottom</a></p>

<p>ざっくり書くと、こんな感じ</p>

<ul>
<li>今のAPIだと簡単には無理</li>
<li>OSSのコードをコピーして、自前で<a href="https://bitbucket.org/andreyice/swiperefreshlayoutbottom">実装</a>した</li>
<li><a href="http://www.oodlestechnologies.com/blogs/Implementing-Pull-to-refresh-(like-in-Facebook-mobile-app)-for-ANDROID-using-Titanium">ここ</a>を参考に実装すればもしかしたらできるかも</li>
</ul>


<p># ソースコード見た感触とあまり変わらない(´・ω・｀)</p>

<h3>ちょっと調べてとりあえず分かったこと</h3>

<hr />

<p>API叩いて直ぐ実現可能というわけではないようですね(´・ω・｀)</p>

<ul>
<li>クラスを継承した独自のLayoutにすればなんとかできそうかもしれない</li>
<li>但し、onTouchEventを自前で実装するのと処理中のアニメーションを挟むため、一筋縄ではいかない</li>
<li>実現方法の参考実装はあるので、うまくできそうかやってみればいいかもしれない</li>
<li>deprecated宣言しているが、ライブラリを使えば楽にはできる(その後のメンテナンスコストは払う必要は出そうだが・・・)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Bazaar and Conference 2014 Springに行ってきた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/03/23/abc-2014-spring/"/>
    <updated>2014-03-23T22:12:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/03/23/abc-2014-spring</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>もう殆ど、Androidをやっていない身ですが情報追っかけ程度に参加してきました。</p>

<p>因みに、当日は寝坊してやべぇって言ってたのは内緒w</p>

<p>興味が湧いたセッションは2つぐらいだったので、それさえ聴ければいいかなーぐらいの感覚で行ってきました。</p>

<p>というわけで、当日のメモに加筆修正したものを残します。</p>

<h3>UI/UXデザイントレンド 2014</h3>

<hr />

<h4>デザイントレンド</h4>

<ul>
<li>質感がわかるようなデザインに変わりつつ</li>
<li>スキュモーフィズムからフラットデザインへ

<ul>
<li>装飾を外してシンプルに</li>
<li>flatvsrealism.com</li>
</ul>
</li>
<li>フラットのほうが意図が伝わりやすい

<ul>
<li>Androidのデザインガイドラインもフラットなものに変わっている</li>
<li>Googleも力を入れていることがわかる</li>
</ul>
</li>
</ul>


<h4>Androido UI</h4>

<h5>2011年のTrend</h5>

<ul>
<li>派手</li>
<li>白いテキスト</li>
<li>リアルで立体的なアイコン</li>
<li>この当時はiPhoneが流行っていたので、似たようなデザインになるような感じ</li>
</ul>


<h5>2012年のTrend</h5>

<ul>
<li>黒やダークな背景</li>
<li>ダークやマットな色</li>
<li>水色や白のテキスト</li>
<li>レイアウトがグリッドスタイル</li>
<li>ON/OFFボタンなど、ルールが破綻してるところもあった</li>
<li>ボーダレスUI(ひと目でボタンなのかわからないようなものを指す)</li>
</ul>


<h5>2013年のTrend</h5>

<ul>
<li>白や明るい背景</li>
<li>カードスタイル(Googleの殆どのアプリが対応)</li>
<li>影を入れたりして立体感を出している

<ul>
<li>(GooglePlayでの)評価が上がりやすい</li>
<li>platformとの統一感が重要</li>
</ul>
</li>
<li>ボーダレスUIは健在・・・</li>
<li>シンプルなアイコンやイラスト</li>
</ul>


<h4>2014年(1Q)のTrend</h4>

<ul>
<li>Yahoo weatheアプリのような感じになりつつある

<ul>
<li>カードスタイルから変わる</li>
</ul>
</li>
<li>端末のスペックが上がってきたから対応できるようになってきた

<ul>
<li>写真やグラデーション</li>
</ul>
</li>
</ul>


<h4>Android wear</h4>

<ul>
<li>サークルUI

<ul>
<li>アイコンが丸くなっているものが増えてきた</li>
<li>フラットで押したりする領域が分からないという問題への回答かも</li>
</ul>
</li>
<li>より大きな書体</li>
<li>写真やビジュアルリッチに</li>
</ul>


<h4>webサイトデザインとの違い</h4>

<ul>
<li>スケーラブル、モニターによっての情報量が違う

<ul>
<li>スマホ向けは、シンプル・単機能・担当直入な処理デザインに</li>
</ul>
</li>
</ul>


<h4>QAメモ</h4>

<ul>
<li>アプリのUIデザインはどうするの？

<ul>
<li>ゲームUIとアプリUIとは全く違うので、機能を入れ過ぎないようにする</li>
</ul>
</li>
<li>インタラクションにもデザイナーが関わってやっていくほうがよい

<ul>
<li>ダサいものになりづらい</li>
<li>エンジニアも積極的にデザイナーと一緒にやっていく</li>
</ul>
</li>
<li>流行を追っかけるためのデザインサイト

<ul>
<li>Android niceties</li>
</ul>
</li>
<li>デザインにも事業戦略が必要

<ul>
<li>古い端末もサポートするのか？など

<ul>
<li>2.x系はもう切ってもいいかも</li>
<li>１つで全部の対応は難しいので避けたほうがよい</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>トレンドの変遷(最近のAndroidアプリのトレンドについて)</h3>

<hr />

<h4>はじめに</h4>

<ul>
<li>セッションはAndroid Pattern Cookbookの解説&amp;補足</li>
<li><a href="https://play.google.com/store/apps/details?id=yanzm.products.patterncookbook">AndroidPatternCoockbookのデモアプリ</a>あるので確認しながらだと理解進むかも</li>
<li>最近の開発は、タブレット対応も必須</li>
</ul>


<h4>ダッシュボードデザイン</h4>

<ul>
<li>メインコンテンツが複数ある場合、機能が視認しやすいので優位</li>
<li>1回操作挟むのは、ダメじゃね？</li>
</ul>


<h4>タブ</h4>

<ul>
<li>スワイプでタブ間の行き来ができるように</li>
<li>各コンテンツのスワイプはできない・・・</li>
</ul>


<h4>NvigationDrawer</h4>

<ul>
<li>ガイドライン化</li>
<li>メジャーなものは大体NvigationDrawerを使ってる</li>
<li>アイコン左、カウンターは右</li>
</ul>


<h4>アプリの世界観も重要</h4>

<ul>
<li>FeedlyやEvernoteが筆頭

<ul>
<li>出しすぎなところもあるけど・・・</li>
</ul>
</li>
</ul>


<h4>上部にユーザー情報を表示が多い</h4>

<ul>
<li>アカウント切り替えが難しいタイプも・・・</li>
</ul>


<h4>オリジナリティを出す</h4>

<ul>
<li>黒はデザインが難しい</li>
</ul>


<h4>アクションバー</h4>

<ul>
<li>アクションバーとコンテンツの配色は雰囲気になる

<ul>
<li>白だと明るい、清潔感が出やすい</li>
<li>白+黒だと引き締まる</li>
</ul>
</li>
<li>アクションバーの背景

<ul>
<li>下に影をつけるものも多い</li>
</ul>
</li>
<li>フレームワークのアクションバーを使ったほうがよい

<ul>
<li>アプリの世界観次第で独自路線があるならいいけど。</li>
</ul>
</li>
</ul>


<h4>フォント</h4>

<ul>
<li>ライセンス問題になりやすいので、フォントはアプリに内蔵しないほうがいい</li>
<li>fontFamilyを使うと改善できる可能性がある

<ul>
<li>font同士を組み合わせて使うほうといい</li>
</ul>
</li>
</ul>


<h4>ヘルプポップアップ</h4>

<ul>
<li>注目させたい場合、アニメーションを使うと注目させやすい</li>
</ul>


<h4>インストラクション</h4>

<ul>
<li>「ここを押す」などの表示を入れやすい</li>
</ul>


<h4>チュートリアル</h4>

<ul>
<li>読む？テキスト量は減らしたほうがいい</li>
<li>画像で伝え、1行ぐらいがいい</li>
<li>無くてもいいかの検討も重要</li>
</ul>


<h4>viewpager</h4>

<ul>
<li>スクロールできるタブ</li>
<li>タイトルストリップ</li>
<li>インジケータ

<ul>
<li>ページの移動でアイコンが変わるもの</li>
</ul>
</li>
<li>ページ切り替えでエフェクト</li>
</ul>


<h4>タブレット対応</h4>

<ul>
<li>スケールアップは微妙な対応

<ul>
<li>データ量が無ければ、それでもいいかも</li>
<li>画像入れるなりで、余白を減らす</li>
</ul>
</li>
<li>macroreflow

<ul>
<li>グリッドの並び替え

<ul>
<li>数も重要になる</li>
</ul>
</li>
<li>スマホはリストで対応してやるといい</li>
</ul>
</li>
<li>master/detailパターン

<ul>
<li>gmailアプリとかgoogle playアプリ</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Volleyをビルドする]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/01/30/build-volley/"/>
    <updated>2014-01-30T00:36:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/01/30/build-volley</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>とある作業でAndroidの通信用ライブラリ「Volley」を使いたくなりました。<br/>
が、毎回使うたびにeclipseでーとかやりたくないわけです。<br/>
なので一度ビルドしてしまい、ライブラリ化してしまおうという魂胆です。</p>

<p># 毎回、ビルドどうやるんだっけな？ってAnt Task見たりするのも面倒というオチもあったりw</p>

<h3>ビルド前準備</h3>

<hr />

<p>Volleyにはビルド用のファイルとして、以下の2つがついています</p>

<ul>
<li>Ant</li>
<li>Gradle</li>
</ul>


<p>ですが、Gradleでビルドしようとした場合、エラーになります。<br/>
タスク一覧も見れませんでしたw</p>

<p>という訳でしたのでAntでやります。</p>

<p>その前に、VolleyはAndroid4.0がベースで作られているようなので、Android4.0のライブラリをインストールしておきます。</p>

<h3>ビルド</h3>

<hr />

<p>以下のコマンドでビルドします。</p>

<p><code>
$ant jar
</code></p>

<p>成功すれば、「volley/bin/volley.jar」というファイルが出来てます。</p>

<h3>バージョン管理とか</h3>

<hr />

<p>ここからは完全に余談なのですが・・・</p>

<p>こういうライブラリを使う場合だと、バージョンが重要だったりしてきます。</p>

<p>では、どうすればいいかということなのですが、自分としてはgit submoduleを使うことをオススメします。</p>

<p>こうすることで、本体コード(volleyを使う側)のバージョンアップに合わせて、都度volleyのバージョンアップを図ればいいことになります。</p>

<p>こんな感じのディレクトリ構成とし、Volleyは都度上記コマンドでビルドする運用</p>

<p><code>
Android
  |
  |- MainProject(自分が作成するアプリ)
  |
  |- Volley
</code></p>

<p>git submoduleのコマンドは以下です。
<code>
$git submodule add https://android.googlesource.com/platform/frameworks/volley Volley
</code>
submodule化したものを更新する場合は、以下のコマンドです<br/>
# 初回の場合は、updateではなくinitをしてsubmodule化したファイル類を取得する必要があります
<code>
$git submodule update
</code></p>
]]></content>
  </entry>
  
</feed>
