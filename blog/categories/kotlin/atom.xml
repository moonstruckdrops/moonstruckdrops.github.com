<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kotlin | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/kotlin/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2017-09-21T22:25:44+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kotlin 1.0リリース記念勉強会 in 京都に行ってきた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2016/04/02/kotlin-study-for-kansai/"/>
    <updated>2016-04-02T19:30:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2016/04/02/kotlin-study-for-kansai</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>界隈の情報を収集しておきたかったので行ってきました</p>

<p>結論的なところを言ってしまうと、<br/>
もうプロダクトに放り込んでも良さそうという印象でした<br/>
(kobaltやKotolin for JSのようなエコシステムはまだまだですが・・・)</p>

<p>とはいえ、多少は混ぜるな危険(nullとか)もあるようなので<br/>
<strong>ビジネスロジック</strong>や<strong>データクラス</strong>(所謂JavaBeanとか)からやり進めたほうがいいかなという感覚です<br/>
(swiftでobj-C混ぜて大変なことになったのは、大体一年前の話w)</p>

<p>AndroidだとActivityとかコアなところをやるのではなくロジック周りからかな<br/>
# 新規に作る場合、その限りではない</p>

<p>JetBrainsさん、<a href="http://blog.jetbrains.com/kotlin/2016/03/kotlins-android-roadmap/">ロードマップ</a>出すぐらいに本気！！<br/>
(大したことでは無いが唯一の懸念としてあるとすれば、Androidに限ればGoogle本家のサポートでは無いというところぐらいかな)</p>

<h3>SIerアーキテクト視点でみたKotlinの紹介</h3>

<hr />

<p><strong>期待</strong></p>

<ul>
<li>新しく覚えることを少なくできる</li>
<li>一番期待しているのは後方互換性(コンパイラは古いバイナリを使える)</li>
</ul>


<p><strong>機能</strong></p>

<ul>
<li>NullSafe(no-null type / nullable type)

<ul>
<li>言語レベルでnull safeサポート</li>
<li>Java8のOptionalは使い勝手がよくなかった(バッドコードが生まれやすかった)</li>
</ul>
</li>
<li>Dataクラス

<ul>
<li>valueオブジェクトとして使ったほうがよい</li>
</ul>
</li>
<li>smartcast

<ul>
<li>ソースの文脈で、判断してくれる</li>
<li>型分岐で処理するのがやりやすい(instanceof &amp; キャストしなくていい)</li>
</ul>
</li>
<li>extension

<ul>
<li>既存クラスを拡張することが可能

<ul>
<li>swiftとだいたい同じ</li>
</ul>
</li>
</ul>
</li>
<li>delegation

<ul>
<li>インターフェースだけ可能</li>
<li>移譲プロパティ

<ul>
<li>遅延評価とか可能</li>
</ul>
</li>
</ul>
</li>
<li>演算子のオーバーロード

<ul>
<li>BigDecimapを演算子で計算可能</li>
</ul>
</li>
</ul>


<p><strong>まとめ</strong></p>

<ul>
<li>実用的で使いやすい</li>
<li>後方互換性がある(サポートすることを名言している)</li>
<li>webで勉強できる</li>
</ul>


<h3>kotilinはじめました</h3>

<hr />

<ul>
<li>scalaとかswiftやってれば似ているのでやりやすい</li>
<li>scalaのoptionalとkotolinのnull safeは似ているようで微妙に違う</li>
<li>scalaからbetter javaを抜き出してシュリンクした感じ</li>
<li>言語仕様が少ないので覚えやすい</li>
<li>scalaの入り口にはなりやすい(基本構文が似ていることがいい)</li>
<li>swiftっぽい感(構文似ているけど、違うことはそれなりにある)</li>
<li><code>?:</code>はエルビス演算子(scalaのgetOrElse)って言うんだよ！</li>
</ul>


<h3>kotlinとjavaee</h3>

<hr />

<ul>
<li>インジェクションがちょっと面倒そう(明示的に)</li>
<li>none null型にはcdiで注入するのが面倒

<ul>
<li>コンストラクタで初期化するとか</li>
<li>lateinit修飾子をつけるとか工夫が必要</li>
</ul>
</li>
<li>JAX-RSはjavaのコードをそのままで

<ul>
<li>継承するためにopenアノテーション必要</li>
</ul>
</li>
<li>JPA

<ul>
<li>static fieldはcompanionオブジェクトにする(static backing field)</li>
</ul>
</li>
<li>混ぜるな危険はあんまり無さそう

<ul>
<li>どう書くかというのは悩むことは非常に多いかも</li>
</ul>
</li>
<li>少しずつkotolinに置換は現実的かも</li>
<li>古いドキュメントが多いので注意</li>
</ul>


<h3>springboot + kotlin</h3>

<hr />

<ul>
<li>springbootでkotlinが使えるようになった模様</li>
<li>DIはlateinit使え！</li>
<li>JRebel(ホットスポットVMかな)

<ul>
<li>問題無く動く</li>
</ul>
</li>
<li>Spring AOP

<ul>
<li>finalになっているのでopenにすることが必要</li>
<li>@Beanはfunc hoge() = "hoge"でかけるとおもいきやopen</li>
</ul>
</li>
<li>getter/setter書かなくてよいのですっきり</li>
<li>none null対策にはいい

<ul>
<li>@NonNullアノテーションは書かないやつでてくるので、none nullを強制できる</li>
</ul>
</li>
</ul>


<h3>kotlinとモダンライブラリを使ってアプリを作る</h3>

<hr />

<ul>
<li>dagger2と相性良さそう

<ul>
<li>そこそこ記述量が減ってる</li>
<li>登壇者もActivity書いたりやcontextの引き回しは気になる模様</li>
</ul>
</li>
<li>databinding

<ul>
<li>プロパティクラス使えばいい</li>
<li>java同様に普通に使える</li>
<li>lazyやnone null、delegateでデータ作らないと表示されないかも</li>
</ul>
</li>
<li>property observer

<ul>
<li>変更監視可能なプロパティ</li>
<li>ListViewとかで有効

<ul>
<li>データが更新される</li>
</ul>
</li>
</ul>
</li>
<li>binding adapter

<ul>
<li>JvmStaticアノテーションでstaicなメソッドになる</li>
</ul>
</li>
<li>value converter

<ul>
<li>kotolinでは使えなかった模様</li>
<li>javaで書くしかない</li>
</ul>
</li>
<li>JetBrainのankoというライブラリが素敵

<ul>
<li>context, serviceとかに便利拡張がある</li>
<li>dslはデータバインディングと組み合わせは辛い(相性があまり良くない模様)</li>
</ul>
</li>
<li>ハマりどころあるものの大体使える

<ul>
<li>Javaのライブラリもそのまま使える模様</li>
</ul>
</li>
</ul>


<h3>Kotlinこんなん出ましたけど</h3>

<hr />

<ul>
<li>kotlin as JS

<ul>
<li>JVM側はメジャーリリースで仕様が大体固まった</li>
<li>JSはもうちょい変更入る</li>
</ul>
</li>
<li>kobalt

<ul>
<li>gradleライク</li>
<li>kobaltプロジェクトを参考するといい模様</li>
<li>ドキュメント生成可能だけど、フォーマット</li>
</ul>
</li>
<li>エコシステムも作ろうとしている模様

<ul>
<li>Androidだけに注力している訳ではない</li>
</ul>
</li>
</ul>


<h3>Dataクラスから始めるKotlin / JetBrains行ってきたよ！</h3>

<hr />

<ul>
<li>groovy柔軟性を引き換えにパフォーマンスと型安全が犠牲</li>
<li>scalaは別の世界</li>
<li>kotolinはスムーズ</li>
<li>lombokプラグインは時々壊れる</li>
<li>データクラスからの以降がよい</li>
<li>ロジックに集中して、細かいところを以降していくといい</li>
<li>java to kotlinはたまに失敗することがある

<ul>
<li>コンバート後のコンパイルに失敗</li>
<li>修正過程で勉強になるとポジティブに捉えるといいかも</li>
</ul>
</li>
<li>Jankinsでビルドががが

<ul>
<li>サブモジュールの.ktが見つからない</li>
</ul>
</li>
<li>突然のillegalstateexception

<ul>
<li>javaの世界からnullが渡されると起きる</li>
<li>javaからも使うフィールドはnone nullにするか慎重になる必要</li>
</ul>
</li>
<li>おしいところ

<ul>
<li>shift + commnad + enterが効かない</li>
</ul>
</li>
<li>ゆるやかに以降できる</li>
<li>データオブジェクトとかビジネスロジックから手をつけて以降するのがオススメ</li>
</ul>


<h3>攻めるラムダ式禁止おじさん</h3>

<hr />

<ul>
<li>関数参照を使えば、ラムダ式を消せる</li>
<li>引数を取らないものもできる</li>
<li>引数を２つとるものは、かりー化</li>
<li>メソッド参照</li>
<li>java的なメソッド参照は使えないけど、かりー化使えば対応可能</li>
<li>ラムダ式をきちんと使う方向で・・・</li>
</ul>

]]></content>
  </entry>
  
</feed>
