<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GAS | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/gas/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2017-09-21T22:25:44+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GoogleAppsScript勉強会に行って来ました]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/07/13/kyoto-gas-study/"/>
    <updated>2013-07-13T17:54:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/07/13/kyoto-gas-study</id>
    <content type="html"><![CDATA[<p>GDG京都さんとKyotoGASさんが主催する勉強会に行って来ました。<br/>
正直なところ今更感、漂う感じの記事ですが気にしないでください。<br/>
実は、用事があって関西に行っていたのです。</p>

<p>以下にメモを記載します。。。</p>

<h3>GASとは</h3>

<hr />

<p>大雑把に言うとMSOfficeのVBAみたいなもの</p>

<ul>
<li>JS 1.8Base(既存のJS資産が使える)</li>
<li>サーバサイド実行</li>
<li>Googleのサービスと連携できるAPIがいっぱいある</li>
<li>GoogleAppsの拡張</li>
<li>Advanced Google Serviceが利用(API Keyが必要)</li>
<li>Charts(グラフ)</li>
<li>JDBCでクラウドSQL利用可</li>
<li>ウェブアプリケーションの作成が可能</li>
<li>スクリプトトリガーで、任意or一定間隔でスクリプト実行できる</li>
</ul>


<h5>制限</h5>

<hr />

<p>主にあげられる制限</p>

<ul>
<li>メールの本数など(GoogleAppsのユーザーや一般ユーザーの違いなど)</li>
</ul>


<h5>その他</h5>

<hr />

<ul>
<li>GAEよりもお手軽にできる</li>
<li>ソースの共有(ソースの共有を設定していれば)</li>
<li>GAEよりも制限がゆるい</li>
</ul>


<h3>AppsScriptとクラウドBPM</h3>

<hr />

<ul>
<li>GASの学習コストは低い</li>
<li>GAS自身に足りないところはSpreadSheetで補う(最適な方法)</li>
<li>サーバ処理、クライアント処理の連携がよい</li>
</ul>


<h4>連携例</h4>

<h5>1.Sheetでマスタ管理</h5>

<hr />

<h6>(連携例)  サイト<->GAS(処理を実施)<->SpreadSheat</h6>

<p>JSONPでデータを返してやればサイト側でJS処理をするだけでよい</p>

<p>問題</p>

<ul>
<li>JSとGASお通信でクロスドメイン問題</li>
<li>ブラウザの設定だけでやると戻すデータがカラになってしまう</li>
</ul>


<h5>2.リアルタイム集計</h5>

<hr />

<h6>(連携例) サイト<->GAS(処理を実施)<->SpreadSheat</h6>

<p>データ送信してSheetで集計</p>

<h5>3.帳票出力</h5>

<hr />

<h6>(連携例) サイト<->GAS(処理を実施)<->SpreadSheat</h6>

<p>SpreadSheetを利用して、帳票を出す</p>

<h5>4.一括処理</h5>

<hr />

<h6>(連携例) SpreadSheetからGASに投げ、GASからサイトのAPIを実行する</h6>

<p>定期実行をするようにしてやる</p>

<h5>5.Googleカレンダー連携</h5>

<hr />

<ul>
<li>キーワードをGASで取得してやる</li>
</ul>


<h5>考慮点</h5>

<hr />

<ul>
<li>セキュリティ(サーバからアクセスするので、GoogleApps認証ができない、Keyというパラメータをもたせる)</li>
<li>運用監視(ログをspreadSheetへ)</li>
<li>エラーの発生を極力回避するようにする</li>
</ul>


<h5>GASを使用していて困るところ</h5>

<hr />

<ul>
<li>ソースコードの構成管理</li>
<li>httpリクエストのデバッグ(実際に手動で実行してみてリクエストを送信するしかない)</li>
<li>IP制限がない</li>
<li>予期せぬエラーが出た場合の対処</li>
</ul>


<h3>GoogleAppsScriptを積極活用</h3>

<hr />

<p>GAS+SpreadSheetがすごいという事例紹介
特に以下がやりやすい</p>

<ul>
<li>GASで勤怠管理</li>
<li>集客ツール</li>
</ul>


<h5>勤怠管理</h5>

<hr />

<ul>
<li>SpreadSheetをDBのように扱う</li>
<li>SpreadSheetの変更管理が大変(ユーザーが大変)</li>
<li>受託ではやらないほうがいいかもしれない。(予期せぬ問題が起きたときの解析などが大変)</li>
<li>プログラムが得意ではない人でもGASは使いやすい(Excelユーザ向け)</li>
<li>各種GoogleServiceとの連携に向いている</li>
</ul>


<h3>GoogleAppsScriptの新機能</h3>

<hr />

<p>GoogleAppSAPIは以下の使用方法がある</p>

<ul>
<li>DATA API</li>
<li>AppsScript</li>
</ul>


<p>GAE vs GAS</p>

<ul>
<li>速さGAE</li>
<li>柔軟GAE(なんでもできる)</li>
<li>お仕事GAE(GASは不安定)</li>
<li>お手軽GAS(GAEよりも圧倒的に楽にアプリが組める)</li>
</ul>


<p>GAS</p>

<ul>
<li>Forms + GAS</li>
<li>Documents + GAS</li>
<li>new UI Component(Dialog,sidebar)</li>
<li>GoogleDriveIntegration</li>
</ul>


<p>新しくFormsにToolsというメニュー項目が追加</p>

<h5>GASからフォーム作る</h5>

<hr />

<p>ソースから新しくFormを作成するソースコード</p>

<ul>
<li>フォームの作成</li>
<li>メールの送信</li>
<li>ログ出力</li>
</ul>


<p>```
function myFunction{</p>

<pre><code>// 空のフォーム
var form = FormApp.create("アンケートひな形").setDescription("アンケート用のフォームです");    
//入力フォーム
form.addtextItem().setTitle("Email")
// 1-5までのラジオボタンを作る
form.addScaleItem().setTitle("評価").setBound(1,5).setHelpText("1..5");
//  自由入力欄
form.setParagrapheTextItem.setTitle("")
// メールの送信
MailApps.sendEmail("宛先","本文")
// 公開用のアドレス
Loger.log(form.getPublishedUrl())
// 編集用のアドレス
Loger.log(form.getEditUrl())
</code></pre>

<p>}
```</p>

<h5>Document + GAS</h5>

<hr />

<ul>
<li>文章の構造化(DOM構造みたいにItemとか)を制御できるようになった</li>
</ul>


<p>```
function myFunction{</p>

<pre><code>//ドキュメント本体
var body = DocumentApps.getActiveDocument().getBody();
// インデックス
body numChild = body.getNumChild();

var i = 0,chld,type,hending,html="&lt;div&gt;";
for(;i&lt;numChild;i++){
    //  子要素
    child = body.getChild(i)
    type = child.getType()

    if(type == DocumentApps.ElementType.PARAGRAPH){
        heading = child.getHeading()
        // 不要なHeadingが付いている。これは、文章自身もパラグラフと認識されてるためだったっけ(?)
        if(heading != DocumentApps.ParagraphHeding.Normal &amp;&amp; child.getNumChild() &gt; 0){
            Logger.log(heading +" "+child.getChild(0).getText() )
            html + ="&lt;p&gt;" +heading +" "+child.getChild(0).getText()+"&lt;/p&gt;" 
        }
    }
html +="&lt;/div&gt;"
</code></pre>

<p>}
```</p>

<p>ダイアログ表示</p>

<p>```
function showDialog(){</p>

<pre><code>var ui = HtmlService.createHtmlOutput(myFunction()).setWidth(400).setHeight(300)
DocumnetApps.getUi().showoDialog(ui)
</code></pre>

<p>}
```</p>

<p>サイドバー表示</p>

<p>```
function showSideBar(){</p>

<pre><code>var ui = HtmlService.createHtmlOutput(myFunction()).setWidth(300)
DocumnetApps.getUi().showSideBar(ui)
</code></pre>

<p>}
```</p>

<h5>DriveSDKを使う</h5>

<hr />

<p>以下のようなコードでGoogleDriveを操作できる</p>

<ul>
<li>ファイル名取得</li>
<li>ファイルをゴミ箱へ送る</li>
<li>ファイルへアクセス権を追加</li>
</ul>


<p>```
function drive(){</p>

<pre><code>// ファイル検索
// 結果はイテレータで帰ってくる
var fails = DriveApp.searchFiles("title contains","検索ファイル")
var file
while(fails.hasNext()){
    file  = fails.next();
    // ファイル名を取得する
    file.getName()
    try{
        // ファイルをゴミ箱へおくる
        // 権限がないとエラーが出るかも
        file.setTrash(true)
        // 権限を追加(Owner権を追加)
        file.setOwner("追加するユーザー")
    }catch(e){
    }
}
</code></pre>

<p>}
```</p>

<h5>質問</h5>

<hr />

<ul>
<li>補完は出ないときは、一回保存して開き直すとかで対処(リファレンス読み直せばいい)</li>
<li>GASでプレゼンテーションは操作できない(予定もない)</li>
<li>GASで作ったファイルはドライブに保存される</li>
<li>FormはSpreadSheetにプログラムでひもづけることもできる</li>
</ul>

]]></content>
  </entry>
  
</feed>
