<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2015-02-18T01:30:08+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TimeCapsuleのethernetを確認する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/01/28/timecapsule-eth0/"/>
    <updated>2015-01-28T00:45:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/01/28/timecapsule-eth0</id>
    <content type="html"><![CDATA[<h3>備忘録的に</h3>

<hr />

<p>TimeCapsuleのIPアドレスを固定にしたかったので、MACアドレスを調べる必要が出てきた</p>

<p>また同じことにならないようにメモしておく</p>

<h3>確認方法</h3>

<hr />

<p>下記の図のように、AirMacユーティリティを開き機器のタイトルを選択すると表示されます</p>

<p><img src="/images/airmac.png" alt="AirMac" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrewでバージョンを指定してパッケージをインストールする]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/02/23/homebrew-package-version/"/>
    <updated>2014-02-23T20:52:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/02/23/homebrew-package-version</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>某モバイルアプリでですね、要求しているビルド用のパッケージが<br/>
今、インストールされているものよりも古いバージョンでした。</p>

<p>そのままだと、ビルド出来ないのでバージョンを古くしようとしたのがキッカケです。。。</p>

<p># 某モバイルアプリはAndroidで、ビルドパッケージはGradleなんですけどw</p>

<h3>インストール(される|した)バージョンを確認</h3>

<hr />

<p>バージョンを確認します。</p>

<p><code>
$brew info gradle
</code></p>

<p>するとこんな感じで結果が出ます</p>

<p><code>
gradle: stable 1.10
http://www.gradle.org/
/usr/local/Cellar/gradle/1.10 (143 files, 42M) *
  Built from source
From: https://github.com/Homebrew/homebrew/commits/master/Library/Formula/gradle.rb
</code></p>

<h3>インストール可能なバージョンを調べる</h3>

<hr />

<p>古いバージョンと言いつつも、バージョンがあるかどうかも調べないといけません。<br/>
という訳で、バージョンを調べます。</p>

<p><code>
$brew versions gradle
</code></p>

<p>すると、こんな感じでズラズラとバージョンと対応するgitのハッシュ値が出てきます。</p>

<p><code>
  https://github.com/Homebrew/homebrew-versions
1.10     git checkout 2b10422 Library/Formula/gradle.rb
1.9      git checkout 5bab5e9 Library/Formula/gradle.rb
1.8      git checkout 9214e60 Library/Formula/gradle.rb
1.7      git checkout f826cc9 Library/Formula/gradle.rb
...
</code></p>

<p>これで、一つ前のバージョンがあることが分かりますね。<br/>
このタイミングでパッケージは削除しましょう。</p>

<p><code>
$brew remove gradle
</code></p>

<h3>古いバージョンをインストールするよ</h3>

<hr />

<p>ハッシュ値がわかったので、そのFormulaだけ前のバージョンに戻せばいいわけです。<br/>
戻した後にインストールすれば、古いバージョンのパッケージがインストールできるという・・・</p>

<p><code>
$ cd /usr/local/Library/Formula
$ git checkout 5bab5e9 gradle.rb
</code></p>

<p>バージョンを確認してからのインストール</p>

<p>```
$brew info gradle
gradle: stable 1.9, devel 1.10-rc-1
http://www.gradle.org/
Not installed
From: https://github.com/Homebrew/homebrew/commits/master/Library/Formula/gradle.rb</p>

<p>$brew install gradle
```</p>

<p>と、簡単にできましたとさ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time Capsule(NAS)をMacとLinuxの両方から使えるようにする]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/11/29/timecapsule-mac-linux/"/>
    <updated>2013-11-29T00:18:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/11/29/timecapsule-mac-linux</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>糞お高いNASを買ってしまいました・・・<br/>
というか、買わざるを得ませんでしたorz</p>

<p>とりあえず、こんな理由で選定</p>

<ul>
<li>自宅の外付けHDDが故障気味</li>
<li>Macも自動でバックアップ取っておきたい</li>
</ul>


<p>勿論、QNAPでも良かったのですが、以下の理由で諦め</p>

<ul>
<li>HDDが別売とかでお高い(故障交換ができるのは強みですが・・・)</li>
<li>サイズが大きい</li>
<li>ルーター機能までついてるので省スペース</li>
</ul>


<p>で、バックアップだけではもったいないため、
よく使うOSで表題のようにNAS利用を使用と思いました。</p>

<h3>やってみる</h3>

<hr />

<p>やるまでに結構苦労しました。<br/>
そもそも、どうやって手をつけるのか若干悩みましたw</p>

<h5>障壁</h5>

<hr />

<p>Mac側(よしなにやってくれるが故の問題)</p>

<ul>
<li>GUI操作で自動的にマウントされる</li>
<li>自動的にマウントされるが故に何処にマウントされたか不明</li>
<li>マウント先不明の為、コマンドでlsとかcd実行できない</li>
</ul>


<p>Linux側</p>

<ul>
<li>使用プロトコルが分からない</li>
<li>マウントするためのファイルシステムは？？？</li>
<li>そもそもマウント先のIPとかディレクトリが不明</li>
</ul>


<h5>解決編</h5>

<hr />

<p>AirMacユーティリティをGUI操作して、以下を設定</p>

<ul>
<li>ファイル共有にチェック</li>
<li>共有ディスクのセキュリティをアカウントに変更(デフォルトはディスクパスワード)</li>
</ul>


<p>他の項目は、すぐにわかりました</p>

<ul>
<li>IPはすぐに発覚(GW + 末尾に数字の1追加)</li>
<li>プロトコルはafpもGUI操作時の情報で発覚</li>
</ul>


<p>Mac側は、afpをマウントする際のコマンド(mount_afp)を参照することでわかりました</p>

<p>以下のコマンドを実行するとよいようです。</p>

<p><code>
$mount -t afp afp://YOUR_USERNAME:YOUR_PASSWORD@&lt;TimeCapsuleのIP&gt;/Data &lt;マウント先ディレクトリ
</code></p>

<p>umountコマンドで普通に実行できます。</p>

<p>Mac側が判明したので、Linux側もほぼ同じようにしてできました。
但し、ファイルシステムを「cifs」に設定することやディスクの指定方法が異なりました。</p>

<p>以下のようにすればできます。</p>

<p><code>
$mount -t cifs -o user="YOUR_USERNAME",password="YOUR_PASSWORD" //&lt;TimeCapsuleのIP&gt; &lt;マウント先ディレクトリ&gt;
</code></p>

<h3>シェル化</h3>

<hr />

<p>一々、上記の内容を手打ちするのは面倒なので、シェル化しました。</p>

<p>こんなことをします。</p>

<ol>
<li>マウント先のディレクトリをチェック</li>
<li>ディレクトリがなければ作成</li>
<li>ディレクトリにマウント実行</li>
</ol>


<p>以下の環境で動作確認しています。</p>

<ul>
<li>MacOSX 10.8.5</li>
<li>CentOS6.4 x86_64</li>
</ul>


<p>```</p>

<h1>!/bin/sh</h1>

<h1>TimeCapsuleの共有ディスクをアカウント認証にしておくこと</h1>

<p>USER="YOUR_USER_NAME"
PASSWORD="YOUR_PASSWORD"
MAC_DIRECTORY="/Volumes/timecapsule"
LINUX_DIRECTORY="/mnt/timecapsule"
TC_DIRECTORY="YOUR_TIMECAPSULE_DIRECTORY"</p>

<p>if [ <code>echo "${OSTYPE}" |grep "linux*"</code> ]&amp;&amp;[ ! -d "$LINUX_DIRECTORY" ]; then</p>

<pre><code>mkdir -p "$LINUX_DIRECTORY"
</code></pre>

<p>elif [ ! -d "$MAC_DIRECTORY" ]; then</p>

<pre><code>mkdir -p "$MAC_DIRECTORY"
</code></pre>

<p>fi</p>

<p>if [ <code>echo "${OSTYPE}" |grep "linux*"</code> ]; then</p>

<pre><code># for Linux
# use cifs-utils(RedHat)
mount -t cifs -o user="$USER",password="$PASSWORD" //"$TC_DIRECTORY" "$LINUX_DIRECTORY"
</code></pre>

<p>else</p>

<pre><code># for Mac
# ユーザ:パスワード@TimeCapusleのIPアドレス
mount -t afp afp://"$USER":"$PASSWORD"@"$TC_DIRECTORY" "$MAC_DIRECTORY"
</code></pre>

<p>fi
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTerm2のMetaキーを変更する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/08/25/iterm-meta-key/"/>
    <updated>2013-08-25T13:11:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/08/25/iterm-meta-key</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>MetaキーはEmacsライクのように使いたい人です。<br/>
変更と書けば物凄く大げさな内容です。</p>

<h3>変更方法</h3>

<hr />

<p>iTerm2の環境設定で変更します。</p>

<ol>
<li>Profiles</li>
<li>Left option key acts asで+Escを選択</li>
<li>Right option key acts asで+Escを選択</li>
<li>閉じる</li>
</ol>


<p>これだけ。<br/>
これで、optionキーがMetaキーとして動作します。</p>

<h3>他の方法は？</h3>

<hr />

<p>方法としては幾らでもあって思いつくだけでもこんだけですね。</p>

<ol>
<li>Keyremap4macbookを使って変更する</li>
<li>inputrcファイルを作成する</li>
</ol>


<p>神保町でお安くOreiiy本(入門bash)をゲットしたので<br/>
ちょっと気になることとかやってるうちに小ネタが出ましたw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macのディレクトリ名を英語化する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/08/22/mac-dir/"/>
    <updated>2013-08-22T00:09:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/08/22/mac-dir</id>
    <content type="html"><![CDATA[<p>色々不便なのでやりました。<br/>
理由は、「ソートや補完とかが辛い」です。</p>

<p>英語化対象は、デフォルトで日本語化されているディレクトリです。<br/>
(「デスクトップ」という名前のディレクトリなど)</p>

<p>以下のコマンドを実行すれば、ディレクトリ名が英語化します。
やっていることは単純で、再帰的に権限維持したまま対訳表があるディレクトリをコピーです。</p>

<p><code>
$ cd /System/Library/CoreServices/SystemFolderLocalizations/
$ sudo mv Japanese.lproj Japanese.lproj.bak
$ sudo cp -pr en.lproj Japanese.lproj
</code></p>

<p>これで英語化されるね。。。</p>
]]></content>
  </entry>
  
</feed>
