<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2014-03-23T22:33:29+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Railsで定数を定義する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/03/23/rails-consts/"/>
    <updated>2014-03-23T20:34:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/03/23/rails-consts</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>Railsで定数を作るとき、いつもどうしてたっけ？っていう個人まとめをつくってみました。</p>

<p>決定版みたいなものが無い感じというのもあったりするので参照用という感じです。</p>

<h3>グローバルな定数定義</h3>

<hr />

<p>以下のような感じの内容で、「config/initializers」に適当なRubyファイルを作成して定義します</p>

<p><code>
HOGE = "HOGE"
FUGA = "FUGA"
</code></p>

<p>もしくは、yamlに定数を切り出して、実行タイミング(Rails起動時)にロードという方式でもいいかもしれません。<br/>
# yamlに切り出すと管理が大変になるかも・・・という欠点は無きにしもあらずですね。</p>

<p>欠点は以下が考えられます。</p>

<ul>
<li>namespaceの概念が無いので少々使いづらい</li>
<li>環境ごとに値を変更したい場合、切り替え処理を自前でやる必要がある</li>
</ul>


<p>特に、環境差分とか無ければこれでいいかもしれませんね。<br/>
# 尤も、namespaceを使わなくて済む程度という前提が付きますが・・・</p>

<h3>コントローラー内で共通な定数定義</h3>

<hr />

<p>以下のような感じで、app/controllers/application_controller.rb 内で定義します</p>

<p><code>
class ApplicationController &lt; ActionController::Base
  HOGE = "HOGE"
  FUGA = "FUGA"
end
</code></p>

<p>単にApplicationControllerがすべてのcontrollerのスーパークラスになっているから参照できるというだけの話です。
# あまりここに定義はしたくないですね。</p>

<h3>rails_configを使って環境ごとに変更する</h3>

<hr />

<p><a href="https://github.com/railsjedi/rails_config">rails_config</a>というgemを使う方法ですね。</p>

<p>以下をGemfileに記述し、インストールします。</p>

<p><code>
gem 'rails_config'
</code></p>

<p>rails_configを使うように初期設定をします(ただのインストールですが)
<code>
$rails g rails_config:install
</code></p>

<p>ファイルに関しては以下の通り</p>

<table>
<thead>
<tr>
<th align="left">環境</th>
<th align="left">ファイルパス</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">全ての環境で共通</td>
<td align="left">config/settings.yml</td>
</tr>
<tr>
<td align="left">ローカル環境</td>
<td align="left">config/settings.local.yml</td>
</tr>
<tr>
<td align="left">開発環境</td>
<td align="left">config/settings/development.yml</td>
</tr>
<tr>
<td align="left">テスト環境</td>
<td align="left">config/settings/test.yml</td>
</tr>
<tr>
<td align="left">本番環境</td>
<td align="left">config/settings/production.yml</td>
</tr>
</tbody>
</table>


<p>YAMLの記述は以下のような感じで行います</p>

<p><code>
hoge:
  fuga: 'fugafuga'
  test: 'test'
</code></p>

<p>使用する場合は、以下のようなコードで出来ます。</p>

<p><code>
Settings.hoge[:fuga]
Settings.hoge['fuga']
Settings[:hoge][:fuga]
</code></p>

<p>他に、同じようなことをする有名なgemに、「settingslogic」があります。<br/>
以下の感想でsettingslogicはあまりつかわないです。</p>

<ul>
<li>一つのファイルで全て定義なのでファイルが肥大化しそう</li>
<li>クラス定義も作る必要があるので若干面倒(シンプルに使えない)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでSolrを使うときに気をつけること]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2014/03/23/ruby-solr/"/>
    <updated>2014-03-23T12:31:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2014/03/23/ruby-solr</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>タイトルは釣り臭が半端ないですねw</p>

<p>正確なことを言うと使用ライブラリは、<br/>
特性を理解の上で使いましょうということが言いたいだけです</p>

<h3>RubyでSolrを使う際のライブラリと言えば</h3>

<hr />

<p>大体、以下の２つになると思います</p>

<ul>
<li><a href="https://github.com/rsolr/rsolr">RSolr</a></li>
<li><a href="http://sunspot.github.io/">sunspot</a></li>
</ul>


<p>前者は、シンプルな機能に対して、後者は多機能になっています</p>

<h3>RSolr</h3>

<hr />

<p>ここら編は、ドキュメントを見たほうがよいですが自分の理解をダラっと</p>

<ul>
<li>接続やプロキシは、自分で設定できる(タイムアウトやリトライ設定も可能)</li>
<li>上記の為、(実装に応じるが)自由に検索先のスキーマを変更できる</li>
<li>検索クエリ(ファセットクエリ等も含む)は自前で実装しないといけない</li>
<li>rowsやstartなども自前で実装する必要がある</li>
<li>更新や削除(クエリベースやidベースで)もできる上にメソッドとして用意してある</li>
<li>responseはハッシュになっているので、自前で検索結果を整形(ActiveRecordオブジェクト等)する必要がある</li>
<li>ページングも対応している</li>
</ul>


<p>一声で言うと・・・</p>

<ul>
<li>クエリ構築は自前でやる必要がある</li>
<li>検索結果の整形も自前でやる必要がある</li>
<li>実装次第で、接続先のSolrも自由に変更することができる</li>
</ul>


<p>シンプルとか言っておきながら、結構ありますね<sup>^;;</sup></p>

<p>実際、使うとわかりますがかなりシンプルですよ</p>

<h3>sunspot</h3>

<hr />

<p>こちらもドキュメントを見たほうがよいのですが・・・</p>

<ul>
<li>検索クエリ(facetクエリなら)をDSLライクに記述できる</li>
<li>検索はdismaxで行ってくれる</li>
<li>検索クエリの結果はActiveRecordオブジェクトで取得できる</li>
<li>全文検索も直感的に記述できるうえにboost値も設定できる</li>
<li>ページングやグルーピングにも対応している</li>
<li>緯度、経度のデータも検索できる</li>
<li>検索ハイライトやスキーマデータの結合にも対応している</li>
<li>indexingもsunspotのみで完結することができる(削除もできます)</li>
<li>勿論、手動でクエリを構築することも可能</li>
<li>sunspot自体がRSolrに依存しているので、その気になればRSolrの機能も一応使うことができる</li>
</ul>


<p>これだけ、高機能なので当然の如く欠点もありまして・・・</p>

<ol>
<li>Solrのスキーマ定義がsunspotに依存した形になってしまうこと</li>
<li>indexするデータの一部もsunspotに依存した形になってしまうこと</li>
<li>Solrのフィールドに対応する形でActiveRecordのmodelクラスに定義が必要になること</li>
<li>sunspotが吐き出すクエリを理解しないと使いづらいこと</li>
<li>sunspot自体がmethod_missingを使った実装なのでコードが読みづらいこと・・・</li>
</ol>


<h3>日本語を扱う場合の注意点</h3>

<hr />

<p>基本的に、検索文字列の処理はSolr側のtokenizerで行われます。</p>

<p>ところがsunspotで日本語を使う場合だと、全文字列がエスケープされてしまいます。</p>

<p>例えば、「あいうえお」を検索したい場合だと「\あ\い\う\え\お」になってしまいます。</p>

<p>因みに、英語検索は問題ありません。</p>

<p>原因がどこにあるかと言うと、 <a href="https://github.com/sunspot/sunspot/blob/master/sunspot/lib/sunspot/query/restriction.rb">restriction.rb</a>にあります。</p>

<p>具体的な箇所は、このmodule内で使用されているescapeメソッドが原因です。<br/>
このescapeメソッドの実装は、<a href="https://github.com/rsolr/rsolr/blob/master/lib/rsolr/char.rb">char.rb</a>ですね。<br/>
つまり、RSolr側の不具合に近いでしょう。<br/>
また、RSolrを使って自前で実装するときもこのescapeメソッドを使用しないほうがいいです。</p>

<p>sunspotの依存gem側の問題なので、簡単に修正するのも難しいですね。</p>

<h3>対処方法は？</h3>

<hr />

<p>モンキーパッチを使えば、対処できました。</p>

<p>escapeメソッドを使っているところを全部上書き実装すればいいだけです。</p>

<p>Railsで使う場合だと、「config/initialize/sunspot.rb」みたいなのを作ればいいですね。<br/>
その中で、上記の処理を使えば対応可能です。</p>

<p>まぁ、根本解決ではないなと思いますが・・・</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails(ActiveRecord)でBULK INSERTする方法]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/11/25/ar-bulk-insert/"/>
    <updated>2013-11-25T00:12:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/11/25/ar-bulk-insert</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>RailsでRake Taskなんか作ったときは、バッチ処理するようなことを書くと思います。<br/>
多分ですが・・・</p>

<p>この前、バルクインサートをすることがあったのでやり方を残しておきます。</p>

<p>因みに、普通にrubyスクリプトの中でも使うこともできると思います(これも多分w)</p>

<h3>やり方</h3>

<hr />

<p><a href="https://github.com/zdennis/activerecord-import/wiki">activerecord-import</a>というGemを使用します。</p>

<p>Gemfileに以下を追加すれば、Rake Taskで使用することができます。<br/>
ぶっちゃけRake Taskだけではなく、普通に使うこともできますが・・・</p>

<p><code>
gem 'activerecord-import'
</code></p>

<p>利用できるデータベースは以下のものです。</p>

<ul>
<li>mysql(アダプターはmysql, mysql2の両方で使用可能)</li>
<li>postgresql</li>
<li>sqlite3</li>
</ul>


<h3>前提</h3>

<hr />

<p>かなり簡単です。</p>

<p>以下のようなモデルを用意したとします。</p>

<ul>
<li>モデル名:Hoge</li>
<li>カラム(主キー): id</li>
<li>カラム(名前): name</li>
<li>カラム(テキスト): text</li>
</ul>


<p>このモデルを10個まとめてバルクインサートしたいとします。</p>

<h3>やり方</h3>

<hr />

<p>かなり簡単です。。。</p>

<ol>
<li>バルクインサートしたい数だけモデルオブジェクトを格納したリストを用意する</li>
<li>該当のモデルのimportメソッドに1で作成したリストを渡す</li>
</ol>


<p>コードに起こすとこんな感じです。。。</p>

<p>```
hoge_list = []
10.times do |i|
  hoge_list &lt;&lt; Hoge.new(id: i, name: "hoge #{i}", text: "fugafuga")
end</p>

<p>Hoge.import hoge_list
```</p>

<p>実行するとこんな感じのSQLが一気に発行されます。。。</p>

<p><code>
INSERT INTO `hoge` (`id`,`name`,`text`,`created_at`,`updated_at`) VALUES (1,'hoge 1','fugafuga','2013-11-25 00:30:30','2013-11-25 00:30:30') ON DUPLICATE KEY UPDATE `messages`.`updated_at`=VALUES(`updated_at`)
INSERT INTO `hoge` (`id`,`name`,`text`,`created_at`,`updated_at`) VALUES (2,'hoge 2','fugafuga','2013-11-25 00:30:30','2013-11-25 00:30:30') ON DUPLICATE KEY UPDATE `messages`.`updated_at`=VALUES(`updated_at`)
</code></p>

<p>因みに、以下のようなオプションがあります。
利用する場合、importメソッドの引数にハッシュで指定するだけです。</p>

<ul>
<li>「:on_duplicate_key_update」: ユニークキーが重複したカラムを更新したい場合に設定</li>
<li>「:timestamps」: falseを設定すると、自分でcreated_at,created_on,update_at,update_onを設定</li>
<li>「:validate」: falseを設定すると、モデル検証をスキップする(デフォルトはtrue)</li>
</ul>


<p>こんな感じで設定します。。。</p>

<p><code>
columns = [:id, :name, :text]
Hoge.import hoge_list, :on_duplicate_key_update =&gt; columns, :timestamps =&gt; false, :validate =&gt; false
</code></p>

<h3>使用感</h3>

<hr />

<p>結構、問題ない感じで使えました。。。</p>

<p>自分が使用した感じだと10万件の更新に1分程度かかったので、<br/>
データが増えていくようなモデル(テーブル)に対して、多用するのは危険かなと思いました。</p>

<p>コードベースで、バルクインサートやバルクアップデートができるところがいいですね。<br/>
データをまとめて引っ張って→データ処理→まとめて更新なんかの使い方では便利かもｗ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecordメモ その2]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/11/19/ar-memo-2/"/>
    <updated>2013-11-19T00:13:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/11/19/ar-memo-2</id>
    <content type="html"><![CDATA[<p>前回書いたので、メモをまたまた残しておく</p>

<p>今回は、以下の３つを書き起こす。</p>

<ul>
<li>既存行の更新処理</li>
<li>データ保存系メソッドの違い</li>
<li>既存行の削除処理</li>
<li>コールバック</li>
</ul>


<h3>既存行の更新</h3>

<hr />

<p>1.更新する行を特定してから更新するやり方</p>

<p>```
table = Tables.find(12)
table.name = "column name"
table.save</p>

<p>```</p>

<p>2.属性の値を変更してからモデルオブジェクトを取得するやり方</p>

<p><code>
table = Tables.find(12)
table.update_attribute(:name, "column_name")
</code></p>

<p>上はシンボルを使って、特定の１カラムのみの更新の場合</p>

<p>まとめて行を更新する場合、ハッシュを使いますね。</p>

<p><code>
table = Tables.find(12)
table.update_attributes(name: "column_name", text: "ActiveRecord")
</code></p>

<p>因みに、Railsだとこんな感じで使ってますね。</p>

<p>```
def update
  table = Tables.find(params[:id])
  if table.update_attributes(params[:table])</p>

<pre><code>redirect_to action: :index
</code></pre>

<p>  else</p>

<pre><code>redirect_to action: :edit
</code></pre>

<p>  end
end
```</p>

<p>3.行の読み込みと更新を一度に行う方法</p>

<p>これは特に言うこともないですね。<br/>
指定した行を更新し、結果をDBに反映、そのままオブジェクトを取得します</p>

<p><code>
table = Tables.update(12, name: "column_name", text: "ActiveRecord")
</code></p>

<p>因みに、update_allメソッドを使えばまとめて更新することができます。<br/>
第1引数にupdate文、第2引数にwhere句を指定という形でやります。</p>

<p><code>
table = Tbales.update_all("name = column_name, text = ActiveRecord", "id = 12")
</code></p>

<p>戻り値は、データベースのアダプターによって異なるようです。<br/>
大体、更新行数が返るようですが、Oracleだけ何故か違うみたいです。。。</p>

<h3>データ保存系メソッドの違い</h3>

<hr />

<table>
<thead>
<tr>
<th align="left">メソッド </th>
<th align="left"> 違い </th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">save    </td>
<td align="left">レコードが保存された場合、trueを返し、そうでなければnilを返す</td>
</tr>
<tr>
<td align="left">save!   </td>
<td align="left">保存が成功した、trueを返し、そうでなければ例外を発生</td>
</tr>
<tr>
<td align="left">create  </td>
<td align="left">保存に成功したかどうかは関係なく、ActiveRecordオブジェクトを返す。データが保存されたかどうかの確認は検証チェックが必要</td>
</tr>
<tr>
<td align="left">create! </td>
<td align="left">成功時は、ActiveRecordオブジェクトを返し、そうでなければ例外を発生</td>
</tr>
</tbody>
</table>


<p>なので、使い分けはこんな感じに行う</p>

<p><code>
if table.save
  検証と保存に成功
else
  検証エラー
end
</code></p>

<p><code>
begin
  table.save!
rescue ActiveRecord::RecordInvalid =&gt; error
  検証エラー
rescue ActiveRecord::RecordNotSaved =&gt; error
  保存に失敗(コールバックで保存が出来なかった)
end
</code></p>

<h3>既存行の削除処理</h3>

<hr />

<p>これは２種類の方法があります。<br/>
１つ目、データベースを直接操作する感じのやり方</p>

<p>こんな感じで、id指定で削除できます。<br/>
idを格納した配列を指定することで、まとめて削除もできます。</p>

<p><code>
Tables.delete(12)
</code></p>

<p>SQLのwhereを使ってまとめて削除する方法</p>

<p><code>
Tables.delete_all(["id = 12"])
</code></p>

<p>これもupdate_allメソッドと同じで削除した行数が返ってきます。</p>

<p>もう一つのやり方は、destroyメソッドを使う方法です。<br/>
こいつは、削除というよりもデータの凍結ですね。</p>

<p>特定の行のみ凍結</p>

<p><code>
Tables.destroy(12)
</code></p>

<p>まとめて凍結する方法</p>

<p><code>
Tables.destroy_all("name = ?", "column_name")
</code></p>

<p>因みにdeleteメソッドを使った場合、<br/>
ActiveRecordの検証メソッドが実行されないことに注意かも。</p>

<h3>コールバック順序</h3>

<hr />

<p>コールバックで独自に処理を入れたい場合ってあると思うので、ついでにメモしておく</p>

<p>新規レコードでmodel.saveを実行した場合、以下の順序でコールバックされる</p>

<ol>
<li>before_validation</li>
<li>検証処理</li>
<li>after_validation</li>
<li>before_save</li>
<li>before_create</li>
<li>挿入処理</li>
<li>after_create</li>
<li>after_save</li>
</ol>


<p>更新の場合だと以下になる</p>

<ol>
<li>before_validation</li>
<li>検証処理</li>
<li>after_validation</li>
<li>before_save</li>
<li>before_update</li>
<li>更新処理</li>
<li>after_update</li>
<li>after_save</li>
</ol>


<p>削除(model.destroy)だと、以下になる</p>

<ol>
<li>before_destroy</li>
<li>destroy処理</li>
<li>after_destory</li>
</ol>


<p>ここまでそれなりに書いたので、もうちょい参照系も書いておきたいなw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecordメモ]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/11/12/ar-memo/"/>
    <updated>2013-11-12T00:20:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/11/12/ar-memo</id>
    <content type="html"><![CDATA[<p>使ってるけど、意外と知らなかったのでメモ</p>

<h3>抽出方法は全部同じ</h3>

<hr />

<p>whereの条件指定の方法ですね。</p>

<p>以下の３つは、全て同じSQLを発行します</p>

<p>1.Hashで条件設定する方法(AR独自チックな感じで大体使う方法)</p>

<p><code>
Hoge.where(:title =&gt; "title", :id =&gt; 1)
</code></p>

<p>2.プレースホルダで地道にパラメータ設定する方法(どの言語でも通用する)</p>

<p><code>
Hoge.where("title = ? and id = ?", "title1", 1)
</code></p>

<p>3.シンボルで対応付けをわかりやすくする方法</p>

<p><code>
Hoge.where("title = :title and id = :id", {:title =&gt; "title", :id =&gt;1})
</code></p>

<h3>抽出結果がなかったらレコードの新規作成をする</h3>

<hr />

<p>これ、一発でできるメソッドあったんですね。<br/>
知らなかった。。。</p>

<p>どうやらfirst_or_createというメソッドを使えばよいみたい。<br/>
で、ブロックを取ることができるので、ブロック内で挿入する値を自由に設定できる</p>

<p>以下のような感じで書くとできる模様。</p>

<p>```
Hoge.where(:title => "title").first_or_create do |p|</p>

<pre><code>p.body = "hogehoge"
</code></pre>

<p>end
```</p>

<p>結局は裏で2回SQL発行してるだけなんですけどね。(selectとinsert)</p>

<p>と、まぁ色々とありますがこんなところで。</p>
]]></content>
  </entry>
  
</feed>
