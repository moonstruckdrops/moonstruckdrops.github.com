<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2016-06-19T02:07:32+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[認証系のgemをちょっと見てみた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2016/06/19/auth-gem/"/>
    <updated>2016-06-19T01:34:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2016/06/19/auth-gem</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>だいたいのwebサービスにはユーザー登録をしてはじめて使用することが多いと思います</p>

<p>ご多分にもれずに、これから実装しようとしたものでメンバースキルを鑑みるとRailsという形ですすむことになりました。</p>

<p>では、Railsでアプリを書くときに認証系のgemって、今は何が使えるものだろうかということを軽く見てみました。</p>

<p># ちょっと実装してよと軽く言われるものの困ったものですorz</p>

<h3>RubyToolboxを眺める</h3>

<hr />

<p>自分の個人内の観測範囲でよく聞くもの</p>

<ul>
<li>warden</li>
<li>devise</li>
<li>Authlogic</li>
<li>Sorcery</li>
<li>doorkeeper</li>
<li>OmniAuth</li>
</ul>


<p># provider提供も関係無く書いてますが、話と毛色が違う感あるのでこの後は出てきません</p>

<h3>メンテ厳しいらしいもの</h3>

<hr />

<p>この２つの模様</p>

<ul>
<li><a href="https://github.com/binarylogic/authlogic/issues/487">Authlogic</a></li>
<li>Sorcery(<code>Currently Sorcery project is not actively maintained.</code>という文章がREADMEにあった)</li>
</ul>


<p>PR眺める限り、Authlogicは対応させようと頑張っている模様
Sorceryは、ちょっと厳しそうかな(とはいえ、一応動く&amp;issueとPRをあげたら対応自体はしてくれる模様)</p>

<h3>devise&amp;warden</h3>

<hr />

<p><a href="https://github.com/plataformatec/devise/blob/master/CHANGELOG.md">changelog</a>見ると、<br/>
4.0.0rc1からRails5に対応していました<br/>
流石ですね。</p>

<p># が、多機能で便利でいいのですが癖が強いのとdeviseのレールから外れた瞬間悲惨な目に遭うので避けたいところ</p>

<h3>他に無いか？</h3>

<hr />

<p>個人的に良さそうかなと思ったのは、<a href="https://github.com/halogenandtoast/monban">monban</a>ですかね。<br/>
(ちょっとgithubのスター数が少ないのは気になりますが・・・)</p>

<p>Rails使ってるなぁと思ってみたら、殆どconcern(helper)と初期ロード&amp;設定(railtie&amp;configure)だけだった模様<br/>
案外Railsのアップデート影響も少なそうな印象でした。</p>

<p>実装や設定内容を読む限り、拡張の幅も広いので好印象でした<br/>
実際、Rails5でカスタム実装してみましたが問題なく認証させることができました</p>

<p>肌感&amp;経験上ですが、認証機能自身はサービスによって独自の仕様、または既存機能との併用となることが多いので<br/>
拡張しやすいgemの方が対応のさせやすさ、メンテナンスさせやすいほうがやりやすいかなと思ってます</p>

<p>そういう意味では、(余計な機能が無いという意味で)軽量かつ、拡張可能、機能の置き換え可能なmonbanはいいなと思いました</p>

<p># ぶっちゃけ、monbanカワイイよってことだけが言いたかったｗ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsのリクエストヘッダーを調べる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2016/02/23/rails-mimetype/"/>
    <updated>2016-02-23T19:30:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2016/02/23/rails-mimetype</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>リクエストヘッダーの中身を見ようとしたときの備忘録<br/>
ヘッダーを利用してゴニョゴニョしてた時とかに使ってましたｗ</p>

<h3>Railsのリクエストで一覧を取得</h3>

<hr />

<p>requestで来たhederの一覧を調べる場合、以下のコードを<code>before_action</code>に仕込んでおく</p>

<p><code>
request.headers.sort.map { |k, v| logger.info "#{k}:#{v}" }
</code></p>

<h3>特定のヘッダーの内容確認</h3>

<hr />

<p><code>HTTP_ACCEPT</code>を見たい場合は、以下のコードを<code>before_action</code>に仕込んでおく<br/>
(多分このコードはよく使うかも)</p>

<p><code>
accept = request.headers['HTTP_ACCEPT']
</code></p>

<h3>利用可能なMIME Typeの確認</h3>

<p>Railsで定義されているMIME Typeを観る場合は以下のコードを利用する<br/>
以下はjsonに対応したMIME Typeを確認するコード</p>

<p><code>
Mime::EXTENSION_LOOKUP.each { |m| puts m}
Mime::Type.lookup_by_extension(:json)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi3日目に行ってきた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/12/13/ruby-kaigi/"/>
    <updated>2015-12-13T11:24:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/12/13/ruby-kaigi</id>
    <content type="html"><![CDATA[<h3>The OMR GC Talk</h3>

<hr />

<p>OMRというランタイム</p>

<ul>
<li>多くの言語に対応している</li>
<li>(plugin機構で実現？)</li>
</ul>


<p>調査はこれを使っていた模様
https://www.ibm.com/developerworks/jp/java/library/j-ibmtools5/</p>

<p>allocationを早くした</p>

<ul>
<li>スレッドローカルヒープ</li>
<li>ロック無しでallocate</li>
</ul>


<p>可変長のバッファを作る
OMRのランタイム上で動作するGCがMRIに比べてよかった</p>

<p>GCのmark速度は早い(MRI)</p>

<p>OMR GCを確認するのはこれ
https://github.com/rubyomr-preview/rubyomr-preview</p>

<h3>Refinements - the Worst Feature You Ever Loved</h3>

<hr />

<p>method aliasとかモンキーパッチだと元の動きの振る舞いが全体に影響するからよくない</p>

<p>assertとかの振る舞いもかわってしまう</p>

<p>refinementsなら影響範囲を制御できる</p>

<p>スコープは働くので継承とかcalss_evalでも有効</p>

<p>文字列で与えたもので使えるeval 'using SomeClass; hoge.fuga'みたいな感じなの</p>

<h3>Discussion on Thread between version 1.8.6 and 2.2.3</h3>

<hr />

<p>Thread#status
スレッドの状態が取れないような状況が起きた
→mission crtalなシステムでも使えるThreadの使い方</p>

<ul>
<li>子スレッドでforを同期的に上がった場合</li>
<li>同期的にraiseが上がった場合</li>
</ul>


<p>Ruby2.2.3でも早くなったけど、CPU負荷も上がった
実行回数は変わらなかった</p>

<p>raiseのインスタンスは重い
メモリ消費は少ない
selectで対応することができる</p>

<p>早くなったけど、リソース消費も多いのでスレッドとかはメモリ消費量を意識したほうがよい</p>

<h3>Plugin-based software design with Ruby and RubyGems</h3>

<hr />

<ul>
<li>多くの機能</li>
<li>コアコードがシンプル</li>
<li>testが簡単</li>
<li>developerコミュニティが活発</li>
</ul>


<p>デザインパターン</p>

<ol>
<li>ホストアプリを拡張する(拡張ポイントを用意している、コールバックで実行)</li>
<li>DIでプラグインを追加(I/Fとか決めてDIコンテナを置き換え、ホストからアプリを実行)</li>
<li>動的にプラグインをロードする方法</li>
<li>1と2を組み合わせる方法</li>
</ol>


<p>プラグインのバージョンコントロール(依存ライブラリのコンフリクト解消)</p>

<p>fluentdは動的にpluguin
emblukは組み合わせ</p>

<h3>Actor, Thread and me</h3>

<hr />

<p>アクター</p>

<ul>
<li>メッセージを適当なタイミングで送る</li>
<li>レシーブ</li>
<li>仕事をする</li>
</ul>


<p>破綻の予兆</p>

<ul>
<li>複数のイベントを待つ</li>
<li>DBへの問い合わせとか</li>
<li>資源の協調</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi2日目に行ってきた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/12/12/ruby-kaigi/"/>
    <updated>2015-12-12T13:24:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/12/12/ruby-kaigi</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>RubyKaigi2日目に参加してきました。</p>

<p>気になるセッションもチラホラあり期待していました</p>

<p>ただ、盛大に寝坊しましたorz</p>

<p>という訳で、メモ</p>

<h3>Data Analytics Service Company and Its Ruby Usage</h3>

<hr />

<p>ミドルウェア
* データ処理をする上でスループットが重要
* 一度書いたものはそのまま運用されるので、固めにつくることが多い</p>

<p>集めてくるところとか、加工整形した結果などは固くつくる必要はない
(書捨ても多いから)</p>

<p>要素</p>

<ul>
<li>データを集めて保存</li>
<li>総うさするコンソr−るapi</li>
<li>データしゅべつ、型だとかのスキーマ管理</li>
<li>計算処理(batch,query)-> Java</li>
<li>キューイングやスケジュール処理</li>
<li>データを格納&amp;エクスポート</li>
</ul>


<p>キューとワーカーの話</p>

<p>perfedtsched(スケジューラー)
→SPOFのないcrontabと思えばよい
→1回も実行されないよりも２回実行されたほうがよい(別途担保が必要だが・・・)</p>

<p>リトライ可能かは、状況やエラー内容による
実行時間
jobの実行内容が重いものやら軽いものまで</p>

<p>perfectqueue(キュー)</p>

<ul>
<li>優先どの高いキューは高いものは素早く処理</li>
<li>graceful restart(字工事のjobは分離して実行)</li>
<li>RDBMSのようなinsertで実現</li>
<li>RDS(MySQL)を使ってる</li>
</ul>


<p>パフォーマンスコントロールとかでジョブ実行を制御している
安全側に倒している(顧客情報のisolationとか)</p>

<p>何故Rubyを使っているか</p>

<ul>
<li>ワーカーのコードが複雑だけど重要</li>
<li>テストが一番重要なので、書きやすいのでrspecを採用</li>
<li>テストコードの書きやすさが重要だった(可読性とか、オーバーライドとか)</li>
<li>新しい機能とか新しいライブラリは使っていく</li>
</ul>


<p>スケジューラーとキュー気になる</p>

<h3>Ruby for one day game programming camp for beginners</h3>

<hr />

<p>京大マイコンクラブで事例</p>

<p>Windowsの環境が殆どなので以下を実行するようにした</p>

<ul>
<li>Ruby1.8.4(starter kit)</li>
<li>MyGame and Ruby/SDL(ゲーム用)</li>
<li>sakura editor</li>
</ul>


<p>インストールして終わりぐらいの単純なものがよい</p>

<ul>
<li>講義みたいなことはしない</li>
<li>1対1のペアプロ</li>
<li>楽しいRubyが教本</li>
</ul>


<p>プログラム未経験の参加者の8割が大体できる
→やる気に繋がる
→自信によって自分が勉強する</p>

<p>考察してみる</p>

<ul>
<li>教えかたが勉強できる</li>
<li>つくるものが決まっている</li>
<li>締め切り</li>
<li>教えるものが少ない(基本的な制御構造)</li>
</ul>


<h3>Ruby and PostgreSQL, a love story</h3>

<hr />

<p>plmruby
zombodb</p>

<ul>
<li>producael language handler(他の言語のサポート)</li>
<li>indexがすぐれてる(通常indexだけなく、elastic searchとかのラッパーにもできる)</li>
<li>foreginData(他にデータが投げられる, csvなりなんなりにｄけいる)</li>
</ul>


<p>postgresql fdl</p>

<ul>
<li>callbackルーチンで駆動するライフサイクル(コールバックチェーンかな)</li>
<li>rubyがサポートする</li>
</ul>


<p>holycorn</p>

<h3>Rhebok, High Performance Rack Handler</h3>

<hr />

<p>Rhebok</p>

<ul>
<li>rack handler</li>
<li>unicorn比較で1.5x</li>
<li>gazelle(perlnのpluck)の置き換え</li>
</ul>


<p>使いドコロ</p>

<ul>
<li>高いトラフィックのあるところ</li>
<li>最適化が進んでるところに最適(SNS, gameとか)</li>
<li>rackがネックになったとき</li>
</ul>


<p>使えないところ</p>

<ul>
<li>websocket</li>
<li>streaming</li>
<li>リバースプロキシかまさないといけない</li>
</ul>


<p>性能</p>

<ul>
<li>http1.1(keepaliveは未サポート)</li>
<li>unix socket</li>
<li>ホットデプロイ可能</li>
<li>rackアプリの起動でOK</li>
</ul>


<p>Rack</p>

<ul>
<li>仕様(webserverとF/WをつなぐI/F)</li>
<li>middleware</li>
<li>Rack::Handlerの名前空間の下に同時実装をすれば自動認識できる</li>
</ul>


<p>パフォーマンス上げる</p>

<ul>
<li>マルチプロセス</li>
<li>マルチスレッド</li>
<li>IO多重化</li>
</ul>


<p>timeoutの実現</p>

<ul>
<li>IO.selectを使用する</li>
<li>pollを使うことで実現</li>
</ul>


<p>parser</p>

<ul>
<li>pico_http_parserに渡すように変更</li>
</ul>


<p>tcp</p>

<ul>
<li>tco_nodelayをオフにする</li>
<li>バッファリング遅延対策</li>
<li>tcpのやり取りが増えるのでフラグメンテーションいっぱい</li>
<li>書き込み回数を1回にしておく</li>
</ul>


<h3>Pragmatic Testing of Ruby Core</h3>

<p>テストを実行してみる
テストが落ちた報告をするといい</p>

<p>Makefleにテストがなく、common.mkにある
btest-ruby => bootstraptest
sample/test.rbが通った後に実行(runner.rb経由で実行)
make test-allなどは、標準ライブラリのテスト</p>

<p>make test-all TESTS="-j4"すると並列で動く</p>

<p>test/ruby : 組み込み
test/logger : 添付ライブラリ
test/-ext- : C拡張</p>

<p>envutil.rb &lt;- ヤバイ
leakchecker.rb</p>

<p>rubyspecは現行の振る舞いだけしか書いてないので、
言語仕様ではない(by Matz)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord単体で使用した際に単一モデルにdefault_timezoneを設定する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/12/12/ar-default-timezone/"/>
    <updated>2015-12-12T12:50:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/12/12/ar-default-timezone</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>DBアクセスがあるような検証用のプログラムを書いたりするときってActiveRecord便利ですよね</p>

<p>このとき、timezoneの設定がうまくいって無くてすごく嵌ったので備忘録代わりにメモしておきます</p>

<h3>設定方法</h3>

<hr />

<p>単純にこれだけです</p>

<p><code>
class TestModel &lt; ActiveRecord::Base
  self.default_timezone = :local
end
</code></p>

<p>もしくはこちらでもよいかと</p>

<p>```
class TestModel &lt; ActiveRecord::Base
  def self.default_timezone</p>

<pre><code>:local
</code></pre>

<p>  end
end
```</p>

<p>簡単でしたね</p>
]]></content>
  </entry>
  
</feed>
