<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2015-12-12T02:52:07+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyKaigi１日目に行ってきた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/12/11/2015-ruby-kaigi/"/>
    <updated>2015-12-11T10:09:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/12/11/2015-ruby-kaigi</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>ここ最近はRubyを書くことが少なくなってきたのですが、<br/>
RubyKaigiの一日目に行ってきた</p>

<p>ミドルウェアとかインフラとか、設計とかコードから離れた生活を繰り広げております</p>

<p>RubyKaigiの一日目は、これまた時間と仕事の都合上午前中のみしか参加できずorz</p>

<p>なので、一日目は、keynoteだけ聞いてきました</p>

<p>Crystalにも興味はあったので、ちょっと気になるのですがここは涙を飲んで・・・</p>

<p>ところでマネーフォワードさん、すごいですね。</p>

<p>Rubyコミッターのフルタイム採用とか松田さんの技術顧問就任とか。</p>

<p>という訳でメモを残しておく</p>

<h3>keynote</h3>

<hr />

<p>プログラマーの美徳</p>

<ul>
<li>怠惰(怠けるための努力をしない)</li>
<li>ガマンしない(PCが活用されていないことに怒る)</li>
<li>傲慢(ソフトウェアのクォリティ)</li>
</ul>


<p>全て、怒りに通じている<br/>
(Rubyにケチ付けられていることも・・・)</p>

<p>怒りは伝染るので、親切も伝染る</p>

<p>なので、内心腹たってても親切に対応するといいことがある</p>

<p>親切な対応が多いので、Rubyコミュニティは素晴らしい</p>

<h4>最近のニュース</h4>

<ul>
<li>Ruby2.3.0リリースが出た(クリスマスにリリースする)</li>
<li>RubyKaigiに合わせてやった</li>
<li>もしかして機能をつけた(NameErrorの際にスペル指摘とか)</li>
<li>Enumerable#grep_vが追加(マッチしないものを提示)</li>
<li>Hash#fetch_at(指定しないキーがあれば例外)</li>
<li>Numeric#negative? positive?</li>
<li>Hashの包含関係をチェックできるようになった</li>
<li>Hash#to_proc(h= {1: 2,2: 4,4: 6} (1..3)..map(&amp;h))</li>
<li>Array,Hash#digメソッド追加(data.dig(:user, 0)のようにあればアクセスして値を返す)</li>
<li>ヒアドキュメントにチルダをつけると、インデントの浅いところに合わせる</li>
<li>frozen-string-literalをつけると、文字列に追加するとエラー、パフォーマンスがよくなる&amp;エラーがはっきりする</li>
<li>safe navigation オペレーター「&amp;.」の追加(ぼっちオペレーター・・・) u &amp;&amp; u.first &amp;&amp; u.name が u&amp;.first&amp;.name になる</li>
<li>年に5%~10%の改善(2.3も同様)</li>
</ul>


<p>よくなる提案を受け入れてもっと良い物をという、Rubyコミュニティの成果</p>

<ul>
<li>mruby1.2</li>
<li><p>ビルドプロセスとか、諸々の改善</p></li>
<li><p>Streem</p></li>
<li>githubに公開してた</li>
<li>何もしないのに取り上げられて、色々とバズってしまった</li>
</ul>


<h4>Ruby3</h4>

<ul>
<li>変化はコスト、苦痛</li>
<li>言語デザインは難しい</li>
<li>矛盾する要求がある</li>
</ul>


<p>未来の状況はわからない</p>

<p>スクリプト言語にオブジェクト指向要らない<br/>
→21世紀になってくると何らかの形でオブジェクト指向を持つものが多くなった<br/>
→人に合わせてつくることが無かった<br/>
新しい当たり前になれた<br/>
Ruby成功の秘訣<br/>
webappの分野ではトップ近くまでなれた<br/>
とはいえ、言語して完成しているわけではない</p>

<p>互換性の問題や、移行の問題(5年かかった)<br/>
# Python3よりはマシ</p>

<p>全部を捨てることはせず、段階的に変化させていく方法を取った<br/>
１つずつ、テストを書いて確認して実施<br/>
移行パスの提示</p>

<p>ドラスティックな変更はしないし、ひとつずつの進歩<br/>
バージョニング問題(1.8 vs 1.9のときは除くの轍は踏まなかった)は他の言語のようなことは起きなかった</p>

<p>変化のうえで学んだこと</p>

<ul>
<li>何もかもいっぺんに捨てない</li>
<li>劇的な変化はしない(互換性を理由なく捨ててはいけない)</li>
<li>変化を続ける</li>
<li>ユーザーへの利益(簡潔にかけるとか)</li>
</ul>


<p>Ruby3では以下をやりたい</p>

<ul>
<li>マルチコアへの対応(開発当時はシングルコアでマルチスレッド)</li>
<li>コードの拡大(主戦場が変った)</li>
<li>扱うデータ量の増加でのパフォーマンス対応</li>
</ul>


<p>こんな感じ(約束はしていない)</p>

<ul>
<li>アクターモデル(goroutin+channelも一応こちらに)</li>
<li>オーナーシップモデル</li>
<li>STM(software transaction)は難しいし、無理かも</li>
<li>streamモデル</li>
<li>pipeラインを使ったイベントループ(２番めのVMを動かすことで実現)</li>
<li>コンパイルを賢く</li>
<li>soft typing(flowtyped interfaceでFlow / Crystal言語、ある程度の型チェックDialyzar(Erlang))</li>
<li>3倍早くをパフォーマンスも目標にする(Ruby2.0よりも３倍)</li>
<li>2020までにRuby3を出したい・・・</li>
<li>難しいことに挑戦</li>
<li>メモリを大量に使うけど、消費量をおさえるようにはしたい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails5を使ってみる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/11/06/edge-rails5/"/>
    <updated>2015-11-06T00:16:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/11/06/edge-rails5</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>とある要件があり、使用するFramework最近ブログネタに賑わっているRailsでということになった<br/>
せっかくなので、開発開始&amp;リリースはいつになるのかという噂のRails5を使ってみることにした</p>

<p>開発変更時期にRails5もリリースされているだろうという多少の先を見越す形でもありますがｗ</p>

<h3>準備</h3>

<hr />

<p>どうやら、後方互換とはなんだったのかの勢いで最新っぽいので、以下を準備します。</p>

<ul>
<li>Ruby2.2.2以降のインストール</li>
<li>railsのリポジトリをclone</li>
</ul>


<p>なにはともあれ、現時点の最新版だとスッキリした気分ですねw</p>

<p><code>
$git clone https://github.com/rails/rails.git
</code></p>

<h3>まずはバージョン情報</h3>

<hr />

<p>昔は<code>railties/bin/rails</code>だったのですが、<code>railties/exe/rails</code>変更になったようです<br/>
ちょっと焦りましたw</p>

<p><code>``
$./rails/railties/exe/rails -v
/usr/local/var/rbenv/versions/2.2.2/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in</code>require': cannot load such file -- concurrent/map (LoadError)</p>

<pre><code>from /usr/local/var/rbenv/versions/2.2.2/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'
from /Users/moonstruckdrops/rails/activesupport/lib/active_support/inflector/inflections.rb:1:in `&lt;top (required)&gt;'
from /usr/local/var/rbenv/versions/2.2.2/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'
from /usr/local/var/rbenv/versions/2.2.2/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'
from /Users/moonstruckdrops/rails/activesupport/lib/active_support/inflections.rb:1:in `&lt;top (required)&gt;'
(省略)
</code></pre>

<p>```</p>

<p>どうやら、<code>activesupport/activesupport.gemspec</code>を見ると、<br/>
<code>concurrent-ruby</code>が足りなかったようなので追加します(正式版では無く、alpha版が必要です)</p>

<p><code>
$gem install concurrent-ruby -v 1.0.0.pre5 --no-ri --no-rdoc
</code></p>

<p>気を取り直してもう一度実行すると動作します</p>

<p><code>
$./rails/railties/exe/rails -v
Rails 5.0.0.alpha
</code></p>

<h3>プロジェクト生成</h3>

<hr />

<p>せっかくなのでRails-APIオプションを使います<br/>
(api以外のオプションはお好みで設定してください)</p>

<p><code>
$./rails/railties/exe/rails new my_app --api -d mysql -T --skip-javascript --skip-test-unit --skip-turbolinks
</code></p>

<p>が、そのまま実行してもエラーになりますのでGemfileを修正します</p>

<ul>
<li><code>rails</code>は、cloneしたソースコードになるようにする</li>
<li><code>rack</code>,<code>arel</code>はgit or cloneしたソースコードになるようにする</li>
</ul>


<p>最終的にGemfileを以下のようにする(コメントのみ削除)</p>

<p>```
source 'https://rubygems.org'</p>

<p>gem 'rack', path: '../rack'
gem 'arel', path: '../arel'</p>

<p>gem 'rails', '5.0.0.alpha', path: '../rails'
gem 'mysql2', '>= 0.3.18', '&lt; 0.5'</p>

<h1>gem 'bcrypt', '~> 3.1.7'</h1>

<h1>gem 'unicorn'</h1>

<h1>gem 'capistrano-rails', group: :development</h1>

<p>gem 'active_model_serializers', '~> 0.10.0.rc2'</p>

<h1>gem 'rack-cors'</h1>

<p>group :development, :test do
  gem 'byebug'
end</p>

<p>group :development do
  gem 'spring'
end</p>

<p>gem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby]
```</p>

<h3>起動する</h3>

<hr />

<p>ここは普段どおりにrackで起動します
rails</p>

<p><code>
$cd my_app
$bin/rails s
=&gt; Booting WEBrick
=&gt; Rails 5.0.0.alpha application starting in development on http://localhost:3000
=&gt; Run `rails server -h` for more startup options
=&gt; Ctrl-C to shutdown server
[2015-11-06 00:00:05] INFO  WEBrick 1.3.1
[2015-11-06 00:00:05] INFO  ruby 2.2.2 (2015-04-13) [x86_64-darwin14]
[2015-11-06 00:00:05] INFO  WEBrick::HTTPServer#start: pid=14583 port=3000
</code></p>

<h3>ポイント</h3>

<hr />

<p>特に挙げることもないですが、
rails配下にあるgemspecファイルに目を通しておけば、インストールや起動に必須なgemがわかるので問題解決が早くなるということぐらいでしょうか</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[deviseでemailを空白でもよいようにする]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/08/10/devise-email/"/>
    <updated>2015-08-10T10:22:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/08/10/devise-email</id>
    <content type="html"><![CDATA[<h3>やりたいこと</h3>

<hr />

<p>以下の２つを実現したい</p>

<ul>
<li>ユーザー登録した場合はemailの入力は不要</li>
<li>ユーザー情報編集時、emailが空文字でも、uniqueバリデーションに引っかからないよう</li>
<li>ただし、uniqueは別なもので担保</li>
</ul>


<h3>対応方法</h3>

<hr />

<ol>
<li>indexの削除</li>
<li>別のものでuniqueを担保</li>
<li>email判定のロジック箇所をオーバライド</li>
</ol>


<h3>indexの削除</h3>

<hr />

<p>以下のコマンドでマイグレーション用ファイルを作成する</p>

<p><code>
$rails g migration remove_index_email_from_users
</code></p>

<p>以下のように実装し、migrationを実行する</p>

<p>```
class RemoveIndexEmailFromUsers &lt; ActiveRecord::Migration
  def change</p>

<pre><code>remove_index :users, column: :email, unique: true
</code></pre>

<p>  end
end
```</p>

<h3>別のものでuniqueを担保</h3>

<hr />

<p>こちらは普通にunique制約と<code>validates_uniqueness_of</code>を付与するのみ</p>

<p>とりあえずunique制約のみ</p>

<p><code>
$rails g migration add_index_item_from_users
</code></p>

<p>以下のような形でunique制約をつける</p>

<p>```
class AddIndexItemFromUsers &lt; ActiveRecord::Migration
  def change</p>

<pre><code>add_index :users, :item, unique: true
</code></pre>

<p>  end
end
```</p>

<p>こんな感じにしておく</p>

<p><code>
class User &lt; ActiveRecord::Base
  validates_uniqueness_of :item
end
</code></p>

<h3>email判定のロジック箇所をオーバライド</h3>

<hr />

<p>emailカラムには<a href="https://github.com/plataformatec/devise/blob/c179cef365f7188c91cbbc3db924a9f1f9563c3c/lib/devise/models/validatable.rb#L29">バリデーションが設定されている</a>ので、<br/>
これをオーバライドすることでバリデーション周りの挙動を変更できる</p>

<p><a href="https://github.com/plataformatec/devise/blob/c179cef365f7188c91cbbc3db924a9f1f9563c3c/lib/devise/models/validatable.rb#L58">判定箇所を追いかける</a>と、デフォルトで有効になっているのでここをfalseに変更する</p>

<p>こんな感じにしておく</p>

<p>```
class User &lt; ActiveRecord::Base
  def email_required?</p>

<pre><code>false
</code></pre>

<p>  end
end
```</p>

<p>勿論、状況によって<code>email_required?</code>が必要なこともあるのでここは要仕様検討というところでしょうか。</p>

<p>当たり前ですが、デカイライブラリなので、ちょっとしたことをやるだけでも結構ややこし目の実装だったりソースを読むことが必須になりますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでSTI（単一テーブル継承）の予約語でハマった話対処]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/06/27/rails-sti/"/>
    <updated>2015-06-27T11:38:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/06/27/rails-sti</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>ここ数日、自分用のアプリを作っているわけなのですが<br/>
その時に起きたエラーを記載しておきます</p>

<p>(STIの予約語のこと忘れてたというオチｗ)</p>

<h3>事象</h3>

<hr />

<p>ActiveRecordで「type」というカラムをもつテーブルに接続し、取得系のメソッドを呼ぶと以下の様なエラーが出た</p>

<p><code>
[1] pry(main)&gt; Hoge.find(1)
  Hoge Load (0.4ms)  SELECT `hoges`.* FROM `hoges` WHERE `hoges`.`id` = 1 LIMIT 1
ActiveRecord::SubclassNotFound: The single-table inheritance mechanism failed to locate the subclass: 'fuga'. This error is raised because the column 'type' is reserved for storing the class in case of inheritance. Please rename this column if you didn't intend it to be used for storing the inheritance class or overwrite Hoge.inheritance_column to use another column for that information.
</code></p>

<p>エラーメッセージから分かるように「type」というカラムをrenameしろと出ています<br/>
こんなの場合によっては出来無いわけで・・・</p>

<h3>これは何？</h3>

<hr />

<p>STI（単一テーブル継承）と呼ばれる機能のことを指しています<br/>
つまり、1つのテーブルを複数のModelで利用する仕組みのことを言います。</p>

<p>で、その仕掛けように予約語として、"type"という名前をActiveRecordが利用しているようです。</p>

<p>クラスで言うとこんなところでしょうか。<br/>
Humanクラスを継承した、Manクラス、Womanクラスがあったとした場合、以下のような形になります</p>

<p>```
class Human &lt; ActiveRecord::Base</p>

<p>end</p>

<p>class Man &lt; Human</p>

<p>end</p>

<p>class Woman &lt; Human</p>

<p>end
```</p>

<p>で、例えばManオブジェクトをsaveすると、Humanテーブルにtype:Manとして保存されます。<br/>
Womanならtype:Womanになるようです</p>

<p>それぞれのモデルからデータへの操作を行った場合、適合するTypeのデータのみを操作対象となります<br/>
ManもWomanも関係なく取得したい(両方をまとめて扱いたい)場合は、Humanモデルから操作すればOKです</p>

<p>当然ひとつのテーブルを使っていますので、片方にしか無い項目(カラム)もテーブルに含まなければならないです。<br/>
例えばManとHumanの持つ項目があまりにも違う場合、カラム数が爆発的に増えます。<br/>
(ここは注意するところですね)</p>

<h3>対処</h3>

<hr />

<p>もうざっくりというと、以下の2つの対応ができます</p>

<ol>
<li>カラム名に「type」という名前をつけず、別名に変更する</li>
<li>エラーメッセージにあるようにSTIのカラム名を変更する</li>
</ol>


<p>というわけなので、自分は1の対応を行いました。</p>

<p>では、2の場合はどうするかというと・・・
エラーメッセージにありますが、以下ように設定すればよいようです</p>

<p><code>
class Hoge &lt; ActiveRecord::Base
  self.inheritance_column = :_type_disabled
end
</code></p>

<h3>どういう場合に起きそう</h3>

<hr />

<p>ざっと思いつくのはこんなところかな</p>

<ul>
<li>既存のアプリケーション(PHPなりJavaなり)をRailsにのせかえるとき</li>
<li>設計上どうしても止むえずつけたいとき(これはビジネスドメインの場合が当てはまる)</li>
<li>(あんまりないと思うが)STIの機能を使ってリファクタリングするとき</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsのモデル周りのマイグレーション]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/06/21/rails-migration-command/"/>
    <updated>2015-06-21T14:15:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/06/21/rails-migration-command</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>Railsでmigrationするときにいつもアレなんだっけなぁとなることが多いので、<br/>
備忘録程度にまとめておく</p>

<p>こんなものドキュメント見れば理解できるので、ざっくりレベルのサマリー程度にしておく</p>

<h3>基本</h3>

<hr />

<p>マイグレーションファイル作成コマンド</p>

<p><code>
$rails generate migration クラス名
</code></p>

<p>モデル作成</p>

<p><code>
$rails generate model モデル名
</code></p>

<h3>モデル&amp;テーブル作成</h3>

<hr />

<p>フィールド指定で作成する場合、以下の形で行う<br/>
(大体はフィールド指定を行わずに、実行することが多いかも)</p>

<p><code>
$rails g model モデル名 フィールド:型
</code></p>

<h3>カラムの型指定</h3>

<hr />

<p>細かい調整をしようと思えばできるけど、一旦これだけ覚えておけば良い</p>

<table>
<thead>
<tr>
<th align="left">Ruby側の型 </th>
<th align="left"> DB側の型</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> string </td>
<td align="left"> 文字列</td>
</tr>
<tr>
<td align="left"> text </td>
<td align="left"> 長い文字列</td>
</tr>
<tr>
<td align="left"> integer </td>
<td align="left"> 整数</td>
</tr>
<tr>
<td align="left"> float </td>
<td align="left"> 浮動小数</td>
</tr>
<tr>
<td align="left"> decimal </td>
<td align="left"> 精度の高い小数</td>
</tr>
<tr>
<td align="left"> datetime </td>
<td align="left"> 日時</td>
</tr>
<tr>
<td align="left"> timestamp </td>
<td align="left"> タイムスタンプ</td>
</tr>
<tr>
<td align="left"> time </td>
<td align="left"> 時間</td>
</tr>
<tr>
<td align="left"> date </td>
<td align="left"> 日付</td>
</tr>
<tr>
<td align="left"> binary </td>
<td align="left"> バイナリデータ</td>
</tr>
<tr>
<td align="left"> boolean </td>
<td align="left"> Boolean</td>
</tr>
</tbody>
</table>


<h3>(補足)MySQLで使用する場合の文字列型</h3>

<hr />

<p>MySQLで使用できる文字列型は以下が存在している</p>

<table>
<thead>
<tr>
<th align="left"> DB側の型 </th>
<th align="left"> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> CHAR </td>
<td align="left"> 255Bまでの固定長文字列</td>
</tr>
<tr>
<td align="left"> VARCHAR </td>
<td align="left"> 64KBまでの可変長文字列</td>
</tr>
<tr>
<td align="left"> TINYTEXT </td>
<td align="left"> 255Bまでの可変長文字列</td>
</tr>
<tr>
<td align="left"> TEXT </td>
<td align="left"> 64KBまでの可変長文字列</td>
</tr>
<tr>
<td align="left"> MEDIUMTEXT </td>
<td align="left"> 約1.6MBまでの可変長文字列</td>
</tr>
<tr>
<td align="left"> LONGTEXT </td>
<td align="left"> 約4.3GBまでの可変長文字列</td>
</tr>
</tbody>
</table>


<p>上記をそれぞれmigrationで利用する場合<br/>
以下のようにlimitをつけることで、使用する文字列型を変更することができる</p>

<p>```
class CreateHoges &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :articles do |t|
  t.text :value, :limit =&gt; 4294967295

  t.timestamps null: false
end
</code></pre>

<p>  end
end
```</p>

<p>実行すると以下のようになる</p>

<p><code>
$ rails db
mysql&gt; show columns from hoges;
+-------------+--------------+------+-----+---------+----------------+
| Field       | Type         | Null | Key | Default | Extra          |
+-------------+--------------+------+-----+---------+----------------+
| id          | int(11)      | NO   | PRI | NULL    | auto_increment |
| value       | longtext     | YES  |     | NULL    |                |
| created_at  | datetime     | NO   |     | NULL    |                |
| updated_at  | datetime     | NO   |     | NULL    |                |
+-------------+--------------+------+-----+---------+----------------+
</code></p>

<p>limitの値は、以下のように対応している</p>

<table>
<thead>
<tr>
<th align="left"> 設定値 </th>
<th align="left"> DB側の型</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> 1 ~ 255 </td>
<td align="left"> TINYTEXT</td>
</tr>
<tr>
<td align="left"> 256 ~ 65535 </td>
<td align="left"> TEXT</td>
</tr>
<tr>
<td align="left"> 65536 ~ 16777215 </td>
<td align="left"> MEDIUMTEXT</td>
</tr>
<tr>
<td align="left"> 16777216 ~ 4294967295 </td>
<td align="left"> LONGTEXT</td>
</tr>
</tbody>
</table>


<h3>マイグレーション実行</h3>

<hr />

<p>DB作成</p>

<p><code>
$rake db:create
</code></p>

<p>マイグレーションの実行</p>

<p><code>
$rake db:migrate
</code></p>

<p>マイグレーション結果確認</p>

<p><code>
$rake db:migrate:status
</code></p>

<p>ロールバック</p>

<p><code>
$rake db:rollback
</code></p>

<p>DBの削除</p>

<p><code>
$rake db:drop
</code></p>

<p>シードの投入(マスターデータなどシードで投入することが多い)</p>

<p><code>
$rake db:seed
</code></p>

<h3>既存カラムの変更</h3>

<hr />

<p>カラムを変更したい場合、以下のコマンドでマイグレーションファイルを生成する</p>

<p><code>
$rails g migration ChangeColumnTo&lt;モデル名&gt;
</code></p>

<p>変更は以下のような形で行う(upとdownを定義することでrollbackにも対応できる)</p>

<p>```
class ChangeColumnToYourModel&lt; ActiveRecord::Migration</p>

<p>  # 変更内容
  def up</p>

<pre><code>change_column :users, :hoge, :string, null: false, default: 0
</code></pre>

<p>  end</p>

<p>  # 変更前の状態
  def down</p>

<pre><code>change_column :users, :hoge, :string, null: true, default: 0
</code></pre>

<p>  end
end
```</p>

<p>気をつけることとして、change_columnは以下のような順で記載すること</p>

<p><code>
change_column :&lt;テーブル名&gt;, :&lt;カラム名&gt;, :&lt;型&gt;, &lt;default値やindexといったオプション指定&gt;
</code></p>

<h3>カラムの追加/削除</h3>

<hr />

<p>カラムの追加/削除をしたい場合、以下のコマンドでマイグレーションファイルを生成する<br/>
追加の場合は、フィールド指定可能</p>

<p><code>
$rails g migration AddColumnTo&lt;モデル&gt;
</code></p>

<p>以下のような形で記載する</p>

<p>```
class AddColumnToYourModel &lt; ActiveRecord::Migration
  def change</p>

<pre><code># 追加
add_column :hoges, :hoge, :string

# 削除
remove_column :hoges, :fuga, :string

# 追加する場所を指定する場合
add_column :hoges, :fugafuga, :string, :after =&gt; :hoge
</code></pre>

<p>  end
end
```</p>

<h3>インデックスの追加/削除</h3>

<hr />

<p>カラムの追加/削除と基本は変わらない</p>

<p><code>
$rails g migration AddIndexTo&lt;モデル&gt;
</code></p>

<p>以下のようにしてindexを設定する</p>

<p>```
class AddIndexToYourModel &lt; ActiveRecord::Migration
  def change</p>

<pre><code># 追加
add_index :hoges, :hoge

# 削除
remove_index :hoges, :fuga

# 複合インデックスの場合
add_index :hoges, [:hoge, :fuga]
</code></pre>

<p>  end
end
```</p>

<h3>参考</h3>

<hr />

<p>ここに書いてる内容は、Railsドキュメント見れば一発で理解できるけどな</p>

<ul>
<li><a href="http://railsdoc.com/model">モデル(model)</a></li>
<li><a href="http://railsdoc.com/migration">マイグレーション(migration)</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
