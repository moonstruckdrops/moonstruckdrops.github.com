<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2018-05-26T01:10:33+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RuubyKaigi2017に参加してきた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2017/09/21/ruby-kaigi/"/>
    <updated>2017-09-21T21:32:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2017/09/21/ruby-kaigi</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>Rubykaigi2017に参加してきましたので、メモを共有しておきます</p>

<h3>Keynote</h3>

<hr />

<p><a href="http://rubykaigi.org/2017/presentations/n0kada.html">Nobuさんの発表</a></p>

<ul>
<li>ゆるふわRuby生活

<ul>
<li>デバッグ</li>
<li>新機能</li>
<li>バグ作成</li>
</ul>
</li>
<li>リポジトリ

<ul>
<li>Rubyのgithubはミラーなのであんまり見ない</li>
<li>移行コスト(svn to git)</li>
<li>hashが明確でない(リビジョン番号と比較して)</li>
<li>gitがwindows非サポート</li>
</ul>
</li>
<li>issue

<ul>
<li>redmine</li>
<li>mailinglist</li>
</ul>
</li>
<li>meeting

<ul>
<li>(物理で会う場合)バグチケットの棚卸し</li>
</ul>
</li>
<li>build

<ul>
<li>out-of-place-build

<ul>
<li>configureのオプション</li>
</ul>
</li>
<li>baseruby

<ul>
<li>ソース生成したりなど</li>
</ul>
</li>
<li>miniruby

<ul>
<li>ビルド時の中間生成物</li>
<li>拡張ライブラリ</li>
<li>共有ライブラリの非サポート

<ul>
<li>単独で動かせる</li>
<li>エンコードが固定</li>
<li>共有ライブラリの機能が無理</li>
</ul>
</li>
</ul>
</li>
<li>extconfのビルドが遅い

<ul>
<li>別プロセスでビルドするようにした(2.5以降)

<ul>
<li>依存関係がなければ</li>
</ul>
</li>
</ul>
</li>
<li>ヘッダーや共有ライブラリの位置</li>
<li>trace_var

<ul>
<li>ビルド時に変数の代わり内容をhookする</li>
</ul>
</li>
</ul>
</li>
<li>bug?</li>
</ul>


<p>```
p = 2
p (-1.3).abs #=> 1.3</p>

<p>```</p>

<ul>
<li>カッコの前にspaceを置く</li>
<li>キーワード引数の名前を内部的にはラベルと呼称</li>
<li>parse_ident()

<ul>
<li>小文字で始まってるか識別する</li>
</ul>
</li>
<li>lavr_ident

<ul>
<li>既に定義済みかチェック</li>
</ul>
</li>
<li>lvar_definedを外せば多分意図通りになって直るけど・・・</li>
<li>string.intern(symbol作成)の再定義するとsymbolにならない

<ul>
<li>:"#{aaa}"みたいな書き方で、refineでstring.internを上書きしたのだとsymbolにならない</li>
</ul>
</li>
<li>2.5にnew featureはないのか？

<ul>
<li>rescure inside do-end</li>
<li>hash,transform_keys</li>
</ul>
</li>
<li>議論中

<ul>
<li>メソッドオブジェクトを作るためのメソッドみたいなのは議論中</li>
<li>右代入(rightward assignment)</li>
</ul>
</li>
</ul>


<h3>Fiber in the 10th year</h3>

<hr />

<p><a href="http://rubykaigi.org/2017/presentations/ko1.html">ko1さんの発表</a></p>

<ul>
<li>suspend/continueはprocはできないけどfiberならできる</li>
<li>Fiberの応用

<ul>
<li>使うところ

<ul>
<li>ブロックの仲で繰り返す</li>
<li>ブロックの外で制御</li>
</ul>
</li>
<li>ゲームのキャラクタごとにパラメータ制御</li>
<li>IOscheduler(none-blockingio)

<ul>
<li>timerがない</li>
<li>ioblockingでも切り替え無し</li>
<li>共有データの同期処理を書く必要がおそらく無い</li>
</ul>
</li>
</ul>
</li>
<li>当初、Fiberは任意のFiberに処理を渡すpassというAPIだけを持っていた(coroutineだった)。</li>
<li>coroutineは強すぎて管理が難しい。</li>
<li>contextの切替

<ul>
<li>thread state</li>
<li>vm stack</li>
<li>machine stack</li>
</ul>
</li>
<li>昔はコピー

<ul>
<li>コードを参考にできた</li>
<li>殆どの環境で使える</li>
<li>スタックが深いと領域が必要で時間かかる</li>
</ul>
</li>
<li>その次

<ul>
<li>nativeのスタック領域を使うように</li>
</ul>
</li>
<li>今

<ul>
<li>ポインター切替で実行

<ul>
<li>5%早くなった</li>
<li>30%メモリ消費減った(但し、局所的)</li>
</ul>
</li>
</ul>
</li>
<li>autofiber

<ul>
<li>既存コード変更不要</li>
<li>blockimgioを勝手に切り替える(ioblockのみ)</li>
<li>fiberの指定不要</li>
<li>同期処理を書く必要が出て来る</li>
</ul>
</li>
</ul>


<h3>How Close is Ruby 3x3 For Production Web Apps?</h3>

<hr />

<p><a href="http://rubykaigi.org/2017/presentations/codefolio.html">Noah Gibbsさんの発表</a></p>

<ul>
<li>Real Web Appsはproductionで人々に使われていることで、fasterはベンチマークテスト結果を改善</li>
<li>くりかえしすることを実行</li>
<li>通常アクションを記録</li>
<li>optcarrotでwarmup</li>
<li>discurseで採取(https://github.com/discourse/discourse)</li>
<li>Ruby2.0.0からRuby2.4.1で速度はどうなったか。途中でDiscourse自体がv1.5からv1.8に変わってしまったが、同バージョンの中ではRuby Versionが上がるにつれて着実に改善</li>
<li>DiscourseでのベンチマークではRuby2.0.0 -> Ruby 2.4.1にかけて150%ほど速くなっている</li>
<li>ウォームアップについて。MRIでもwarmupについれてスループットが改善する。どのRubyバージョンでも同程度。5000</li>
<li>warmup iterationで5-7%程度の改善。</li>
<li>firstrequestは2.0.0に比較して30%確実に早くなている</li>
<li>https://github.com/noahgibbs/rails_ruby_bench</li>
<li>https://docs.google.com/presentation/d/1tUQpblTufP0IWiZSfnky56y9WvYeqMQF9ve45yIcpYY/edit</li>
</ul>


<h3>Gemification for Ruby 2.5/3.0</h3>

<hr />

<p><a href="http://rubykaigi.org/2017/presentations/hsbt.html">hsbtさんの発表</a></p>

<ul>
<li>現状と展望について

<ul>
<li>raa</li>
<li>rubyforge</li>
<li>gems.github.com</li>
<li>gemcutter.org</li>
<li>rubygems.org</li>
<li>bundler &lt;= イマココ</li>
</ul>
</li>
<li>標準添付ライブラリ

<ul>
<li>requireしなくても使えるもの</li>
<li>standard libraries

<ul>
<li>svnと一致しているもの</li>
</ul>
</li>
<li>default gems

<ul>
<li>rubyと一致orメンテナがリリース</li>
</ul>
</li>
<li>bundled gems

<ul>
<li>メンテナがリリース</li>
</ul>
</li>
</ul>
</li>
<li>default gems

<ul>
<li>openssl

<ul>
<li>githubで開発</li>
<li>あるタイミングでsvn側に取り込み</li>
<li>rubyのバージョン違っていても、使える</li>
</ul>
</li>
<li>psych

<ul>
<li>jruby/crubyの互換性確保</li>
</ul>
</li>
<li>rdoc</li>
</ul>
</li>
<li>bundledgems

<ul>
<li>testunit/minitest</li>
<li>ビルド時にinstallするもの</li>
<li>rake

<ul>
<li>標準添付する必要があんまりないので</li>
</ul>
</li>
<li>デメリット

<ul>
<li>開発中のrubyでbundledgemsが動くかも保証もできない</li>
</ul>
</li>
</ul>
</li>
<li>gemfication

<ul>
<li>standaradのもをgemで配布していく</li>
<li>標準添付ライブラリをgemとして切り出していく</li>
<li>2.5,2.6で追加したものを2.4でも使える可能性ある</li>
</ul>
</li>
<li>問題

<ul>
<li>標準添付ライブラリ間の依存関係</li>
<li>バックポートによるメンテナの負担がヤバイ</li>
<li>メンテナが古いのでも使えうように頑張る必要でてくる

<ul>
<li>1.8.7のサポート対応</li>
</ul>
</li>
</ul>
</li>
<li>rubygems/rubygems.org

<ul>
<li>サイト</li>
</ul>
</li>
<li>rubygems/rubygems

<ul>
<li>ライブラリ周り(bundlerチーム)</li>
</ul>
</li>
<li>rubyfication

<ul>
<li>rubygems上に名前空間周りでバッティングして調整して上書き</li>
</ul>
</li>
<li>3.0へ向けて

<ul>
<li>bundlerはデフォルトgemになる</li>
<li>標準添付は全てgemにしておきたい</li>
<li>標準ライブラリのバージョン周りでもしかしたらバージョンの不具合起きるかも</li>
<li>Bundler がないと RubyGems 2.7 の動きが怪しい</li>
</ul>
</li>
</ul>


<h3>Development of Data Science Ecosystem for Ruby</h3>

<hr />

<p><a href="http://rubykaigi.org/2017/presentations/mrkn.html">mrknさんの発表</a></p>

<ul>
<li>現在

<ul>
<li>Rubyだけで頑張る方法

<ul>
<li>データ処理部分</li>
</ul>
</li>
<li>併用する方法

<ul>
<li>メイン処理に関わる箇所でｍデータの受け渡し処理</li>
<li>2重変更が必要(データ処理とメイン処理)</li>
<li>pythonやrを呼び出すとデータ交換コストが高く、データ形式の変更時などは両方に変更が必要</li>
</ul>
</li>
<li>rubyからpythonを呼び出す方法</li>
<li>rails上でpandasで表示

<ul>
<li>パフォーマンスに問題ありそうだけど、pandas呼べてる</li>
</ul>
</li>
<li>rubyからpythonを呼び出すことに不自然ではない

<ul>
<li>先入観では？</li>
<li>RPy2みたいなものも存在している

<ul>
<li>大体のことがPythonでできるから、Pythonになっている</li>
</ul>
</li>
</ul>
</li>
<li>issue登録が欲しい</li>
</ul>
</li>
<li>将来への展望

<ul>
<li>未来を見据えてPycallでないようにしたい</li>
<li>一つの言語では完結しない

<ul>
<li>pysparとはいえ、spark自信はscala,java</li>
</ul>
</li>
<li>apache arrowを例にとっても、bindingを作っておけば将来apache arrowが流行れば使われるようになる</li>
<li>red data toolsに参加してもらいたい</li>
<li>pycallにissue/prが欲しい</li>
</ul>
</li>
</ul>


<h3>Ruby Committers vs the World</h3>

<hr />

<ul>
<li>型注釈、結局コミッターはどう思ってるのか？

<ul>
<li>全体的に「別にあってもいいんじゃないの」って空気感</li>
</ul>
</li>
<li>右代入？

<ul>
<li>matz右代入ありなんだけど、いい記号がない。。。</li>
</ul>
</li>
</ul>


<h3>keynote</h3>

<hr />

<p>Matzによるkeynote</p>

<ul>
<li>言語愛が最大の要因</li>
<li>プログラミング言語面白い</li>
<li>例外なくプログラミング言語が好き</li>
<li>他の言語を貶めることは無い</li>
<li>simula(一番最初と言われるオブジェクト指向言語)

<ul>
<li>inheritance</li>
<li>差分プログラミング</li>
</ul>
</li>
<li>simulaからではなくlisp, smalltalkから影響を受けているのでsimulaから直接ではない</li>
<li>super classは２つでは？</li>
<li>roleは複数持ってるのでは？</li>
<li>単一継承ではなく多重継承

<ul>
<li>Lisp(flavors)の世界から</li>
<li>自然な拡張だが、複雑化しやすい

<ul>
<li>daiamond継承など</li>
<li>c3 linialization algorizm(線形化アルゴリズムで、継承順序を決定する)</li>
</ul>
</li>
</ul>
</li>
<li>mix-in

<ul>
<li>lisp内ではflavorsと呼ばれる

<ul>
<li>バニラアイスに、チョコチップやミントの味を追加するみたいな意味

<ul>
<li>アイスクリームはインスタンスにできるが、チョコチップはできない</li>
<li>混ぜた味(ミントアイスクリーム)はインスタンスにできる</li>
</ul>
</li>
</ul>
</li>
<li>モジュールはmixinの単位</li>
<li>Rubyではグループ分けの単位として使われてる

<ul>
<li>Net::HTTPのNetなど</li>
</ul>
</li>
<li>singletonとしても使われている

<ul>
<li>FileUtilsなど</li>
</ul>
</li>
<li>メソッドや機能の集まりとして使われている

<ul>
<li>Mathモジュールなど

<ul>
<li>includeすると直接使えるようになる(モジュールファンクション)</li>
<li>メソッドをコピーしてオブジェクトに注入</li>
</ul>
</li>
</ul>
</li>
<li>メソッド結合としての単位

<ul>
<li>alias method chain

<ul>
<li>メソッドの別名をつけて、置き換えることができる</li>
</ul>
</li>
<li>module prepend

<ul>
<li>dynamicに変更することができなくなる</li>
</ul>
</li>
<li>最初は入れる気がなかったが考える事で入れるようになった

<ul>
<li>lispのメソッドコンビネーション</li>
<li>classにおけるaround hook</li>
<li>aspect思考からも影響</li>
</ul>
</li>
</ul>
</li>
<li>refinement

<ul>
<li>open classの機能はあった

<ul>
<li>monkey patching機能(昔はgerilla -> gorilla -> monky)</li>
<li>ActiveSupport</li>
</ul>
</li>
<li>グローバルに影響与える

<ul>
<li>selector namaspaceも候補にあった</li>
<li>usingを都度書く必要があるので、イマイチ使われていない？</li>
</ul>
</li>
<li>スコープを区切ったmonkey patch</li>
<li>レキシカル</li>
<li>使い方

<ul>
<li>C#のエクステンション</li>
<li>既存のメソッドを置き換える

<ul>
<li>ローカル里バインディングがない</li>
<li>想定外に置き換わることもない</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>structural signature

<ul>
<li>type check

<ul>
<li>Javaのインターフェースでは?</li>
</ul>
</li>
<li>まだ導入されていない</li>
</ul>
</li>
</ul>
</li>
<li>performanace

<ul>
<li>Benchmark suite</li>
<li>MJIT</li>
<li>Rubex</li>
</ul>
</li>
<li>concurrency

<ul>
<li>fiber</li>
<li>autofiber</li>
<li>guild</li>
</ul>
</li>
<li>static analytics</li>
</ul>


<h3>An introduction and future of Ruby coverage library</h3>

<hr />

<p><a href="http://rubykaigi.org/2017/presentations/mametter.html">mameさんの発表</a></p>

<ul>
<li>型システムだけではなくカバレッジ方面でも活躍していく</li>
<li>カバレッジ

<ul>
<li>コード</li>
<li>未テストのコード検出</li>
<li>テストスイートの良さ体語</li>
<li>function coverage

<ul>
<li>簡単可視化しやすい</li>
<li>関数の中はみないので指標として弱い</li>
</ul>
</li>
<li>line coverage &lt;= Rubyはこちらのみサポート

<ul>
<li>簡単可視化しやすい</li>
<li>関数の中はみないので指標として弱い</li>
<li>後置ifなど見落としやすい</li>
</ul>
</li>
<li>branch coverage

<ul>
<li>網羅的に検証できている</li>
<li>可視化が難しい(多くのツールでサポートできてない)</li>
<li>更に細かいcondition coverageがある</li>
</ul>
</li>
<li>C0/C1/C2の指す内容については人によって異なる可能性あるので注意</li>
</ul>
</li>
<li>理解してつかっていくには

<ul>
<li>よいテストスイートは？

<ul>
<li>仕様を満たしているかは取れない

<ul>
<li>設計に対する網羅性はない</li>
</ul>
</li>
<li>間違えてたしてもテストコードがありカバレッジがあるとないとでは大違い

<ul>
<li>カバレッジは指標なので、100%を目指してもダメ</li>
</ul>
</li>
</ul>
</li>
<li>未テストを理解</li>
<li>テストデザインを考える

<ul>
<li>特に観点が重要</li>
</ul>
</li>
<li>どれくらい網羅性があれば？

<ul>
<li>重要なものに関しては100%を目指す(ぐらいの温度感)</li>
<li>費用対効果も考慮に入れて考える

<ul>
<li>ioとかテストしにくいものは、割に合うか考えてやる</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>ライブラリの現状と展望

<ul>
<li>simplecov

<ul>
<li>coverage.soのラッパー</li>
<li>htmlで結果出力</li>
<li>テストの一番最初に呼ばないと、それ以前に呼ばれたものは測定対象にならないことに注意</li>
<li>関数定義も実行対象になってしまうので、意味が無いことに注意(メソッドが呼ばれてない場合)</li>
</ul>
</li>
<li>concov

<ul>
<li>時系列カバレッジ</li>
<li>追加されたコードに対してテストがされているかのチェック</li>
</ul>
</li>
<li>other lang

<ul>
<li>C/c++

<ul>
<li>gcov/lcov</li>
</ul>
</li>
<li>java

<ul>
<li>covertura emma, clover, jacoco</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>今後の計画と展望

<ul>
<li>function / branch coveargeの測定追加

<ul>
<li>issueにコメント欲しい</li>
<li>互換性を持って作っている</li>
</ul>
</li>
<li>100%既存に互換性</li>
<li>他のcoverageツールも参考

<ul>
<li>lcovなど</li>
</ul>
</li>
<li>overhead

<ul>
<li>現状ruby本体だと5倍弱時間がかかる</li>
<li>railsだと2倍くらい？の見込み</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>workshop</h3>

<hr />

<p>前日のmrknさんが発表されていたPycallについてのworkshop<br/>
リポジトリは<a href="https://github.com/rubydata/rubykaigi2017.git">こちら</a><br/>
docker runをすることで、workshopの内容が出てきます</p>

<h3>Ruby Language Server</h3>

<hr />

<p><a href="http://rubykaigi.org/2017/presentations/mtsmfm.html">mtsmfm</a>さんの発表</p>

<ul>
<li>lanugageserver

<ul>
<li>エディタの補完</li>
<li>メソッド定義</li>
<li>ビルド</li>
<li>languageserverプロトコル</li>
<li>ドキュメントの整形</li>
</ul>
</li>
<li>今までのものはエディタ向けのもの

<ul>
<li>viならvi, emacsならemacs</li>
</ul>
</li>
<li>msが仕様を公開している

<ul>
<li>でもvsコードの拡張プラグイン向け</li>
</ul>
</li>
<li>Languageserverprotocol

<ul>
<li>汎用と専用がある</li>
</ul>
</li>
<li>rubyで書くには？

<ul>
<li>基本はnode</li>
<li>JSON-RPCでアクセスができればOK

<ul>
<li>但し、クライアントがうまくサーバと通信できるようにする必要がある</li>
</ul>
</li>
<li>gemでlanguage_server-protocolとして公開している</li>
</ul>
</li>
<li>内容

<ul>
<li>rocodetoolsで補完

<ul>
<li>動的解析に利用、副作用とか到達不能な場合は無力</li>
<li>インスタンスレベルの補完はできてない(静的解析)</li>
</ul>
</li>
<li>エラーメッセージは実行して(wcオプション)、正規表現で結果取得</li>
</ul>
</li>
<li>将来

<ul>
<li>静的解析の改良</li>
<li>ドキュメント</li>
<li>rubocop</li>
<li>syntax highlight</li>
</ul>
</li>
</ul>


<h3>Compacting GC in MRI</h3>

<hr />

<p><a href="http://rubykaigi.org/2017/presentations/tenderlove.html">Aaron</a>さんの発表</p>

<ul>
<li>copy on write最適化

<ul>
<li>性質や定義に注意</li>
<li>コピーしたものは、複製元のメモリ上の場所だけを持ってる

<ul>
<li>配列も同じだが、hashはできない</li>
<li>コピー元に変更があったら、コピー先に掛かれる</li>
<li>プロセスforkだとコピーしない</li>
<li>Copy on Writeは何かの変更が起きない限り、コピーを作る必要はなく、必要になったときにはじめてコピーを作る</li>
<li>unicornは親プロセスをforkしている

<ul>
<li>unicornはforkして子プロスを立てるので、Railsが子プロセスで別々に読み込まれてつらい</li>
<li>子プロセスは親プロセスのメモリを指してるのでメモリ使用量を減少させることができる

<ul>
<li>子で書き込むとコピーされる</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>pagefault(共有メモリの変更が原因 => GC)

<ul>
<li>GCのobject allocationでpage faultが起きる。ruby objectのサイズはOSのpageよりも小さいので、object割り当てをするとページまるごとコピーされるし、無駄に使用量がどんどん増える</li>
<li>オブジェクトのサイズはページサイズより小さいので1オブジェクトの変更でも1ページ分のメモリコピーが行われて非効率</li>
</ul>
</li>
<li>heap compaction

<ul>
<li>two finger compaction(単純なクイックソートアルゴリズム)

<ul>
<li>欠点 ランダムに移動するので遅い</li>
<li>利点 他のアルゴリズムよりに簡単に実装できる(下記の２つしかない)

<ul>
<li>オブジェクトの移動</li>
<li>更新</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>gc

<ul>
<li>ヘルパー関数を用意した</li>
<li>移動できないビットテーブル</li>
<li>rb_gc_mark

<ul>
<li>lowlevelでC拡張</li>
</ul>
</li>
<li>GC.compaction

<ul>
<li>rb_gc_mark以外が対象</li>
</ul>
</li>
<li>難しいもの

<ul>
<li>hash key</li>
<li>２重参照</li>
<li>global変数</li>
<li>rb_class_define

<ul>
<li>gcはglobal変数を変更することはできない</li>
</ul>
</li>
<li>string literalの移動するとbytecode更新が続いているので対応が難しい</li>
<li>結局、何も動かせていないような・・・

<ul>
<li>とはいえRailsでも46%程度削減できている</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>inspect memory

<ul>
<li>object_space.dump_all

<ul>
<li>rubyのメモリ</li>
<li>address: 位置</li>
<li>reference: 参照先メモリ</li>
<li>size: メモリサイズ</li>
</ul>
</li>
<li>グラフを作成して変化を追ってみるといいかも
tendorlover/heap-utils</li>
<li>spaps</li>
<li>pss</li>
</ul>
</li>
<li>conclusion

<ul>
<li>プロダクションでテスト中</li>
<li>小さいものでは全然効かない</li>
</ul>
</li>
</ul>


<h3>Ruby for Distributed Storage System</h3>

<hr />

<p><a href="http://rubykaigi.org/2017/presentations/tagomoris.html">tagomoris</a>さんの発表</p>

<ul>
<li>disk &amp; networkioがボトルネックではなくなってきてる

<ul>
<li>storageは最近早いのでネックではない</li>
<li>networkはクラウド事業者のものが早い</li>
</ul>
</li>
<li>disk/networkioには、serialization/deseriazationが走る</li>
<li>分散ストレージの場合はさらにレプリケーションが発生する

<ul>
<li>検証やネットワークioの非同期化</li>
<li>これらをこなすためのさらなるThreadなど</li>
</ul>
</li>
<li>quoram

<ul>
<li>最低２つのレプリカをできればよいというもの

<ul>
<li>短いレイテンシ

<ul>
<li>最後のレスポンスは無視する</li>
</ul>
</li>
<li>非同期処理のコストを下げる</li>
</ul>
</li>
</ul>
</li>
<li>bigdam(TD)

<ul>
<li>データ入力系(pipeline)の見直しのPJ名

<ul>
<li>小さいデータから大きいものまで</li>
</ul>
</li>
<li>世界中に配備する</li>
<li>bigdam-pool

<ul>
<li>分散key-value storage</li>
<li>buffer pool

<ul>
<li>S3は使わなくてもよいように</li>
</ul>
</li>
<li>MB単位くらいをそうてい</li>
<li>追記も可能にする</li>
<li>同一データを書き込みできないようにしている</li>
<li>replicationもする

<ul>
<li>無くなったデータの補充みたいなのは内</li>
</ul>
</li>
<li>edge locationで一度受けて、center locationに置くうような仕組みを取ってる</li>
</ul>
</li>
</ul>
</li>
<li>design bigdom

<ul>
<li>mockから先につくたり、IFを全部先に用意</li>
<li>ここをRubyで実装

<ul>
<li>柔軟なので、作って足りない場合に修正したりしてた</li>
<li>手早く</li>
</ul>
</li>
<li>integration /interface test

<ul>
<li>hashっぽいものを書くにはjavaは辛い</li>
<li>さっさとシリアライズ、デシリアライズでサクッと使えて嬉しい</li>
<li>Rubyだと型がないのでシリアライズ、デシリアライズが書きやすく、Mockやテストが書きやすかった。</li>
</ul>
</li>
</ul>
</li>
<li>bigdum-pool-ruby

<ul>
<li>java版と同じものを用意している</li>
</ul>
</li>
<li>非同期networkio

<ul>
<li>eventmachine</li>
<li>cool.io</li>
<li>celluloid::id</li>
</ul>
</li>
<li>thread/timer

<ul>
<li>javaのほうが若干便利かも</li>
<li>executerservie(Java)</li>
</ul>
</li>
<li>monitormixin

<ul>
<li>mutexと似ているもの</li>
</ul>
</li>
<li>resourcecontrol

<ul>
<li>try-with-resourceがrubyにはない</li>
<li>begin_with_rescueが2.5から追加される</li>
</ul>
</li>
<li>型

<ul>
<li>型を混ぜてしまうこと(ArrayにIntegerやStringを混ぜるなど)

<ul>
<li>多言語に対応させるときには・・・・</li>
</ul>
</li>
</ul>
</li>
<li>アプリケーションサーバ

<ul>
<li>Rubyだと基本webサーバしか・・・</li>
<li>ストレージで動かせるとか汎用があると嬉しい</li>
</ul>
</li>
</ul>


<h3>Bundler 2</h3>

<hr />

<p><a href="http://rubykaigi.org/2017/presentations/0xColby.html">0xColby</a>さんの発表</p>

<ul>
<li>bundle addコマンド経由でできるようになる</li>
<li>plugin機構を取り入れて、事前処理や後処理も追加できる</li>
<li>エラーメッセージの改良</li>
<li>1.16が1.x系最終</li>
<li>Bundler2は2.3以上</li>
<li>sourceの名前付けをショートカットさせる(:githubみたいな指定)

<ul>
<li>gem 'rack' github: 'user/repo'</li>
<li>ブロック指定もできる</li>
</ul>
</li>
<li>bundle infoやbundle gemの情報が出て来る</li>
<li>bundle packageがbundle cacheに変更</li>
<li>bundler 1.xとの後方互換製ない</li>
<li>bundlerは今後1年ごとにメジャーリリース（メジャーバージョンアップという意味ではなく)

<ul>
<li>ruby2.5ではruby側に同梱</li>
</ul>
</li>
<li>bundler2でGemfile.lockが解釈できるが逆はできない(だったかな)</li>
</ul>


<h3>Memory Fragmentation and Bloat in Ruby</h3>

<hr />

<p><a href="http://rubykaigi.org/2017/presentations/nateberkopec.html">nateberkopec</a>さんの発表</p>

<ul>
<li>512MBのDYNOでRails動かしてる場合は50%くらい(？)はMemory-constrained</li>
<li>Rubyでのメモリ確保の挙動はレイヤーが深くて難しい、みたいな話をしてる。Ruby Code自体/Ruby Runtime/Allocator/MMU/実メモリ配置</li>
<li>Rubyコード自体からランタイム、アロケーター、MMU、RAM構造まで考えること沢山</li>
<li>freeは本当にfreeするわけではない。OSに領域を返すわけではない.初期化コストかかるのでガバッと拾ってしまってる</li>
<li>web request allocation pattern</li>
<li>http requestが終われば関連するメモリ全部捨てられる</li>
<li>確保したメモリを更に小分けにして、リクエストごとに割り当ててレスポンスが終わったらまとめてfreeして再利用</li>
<li>全てのオブジェクトには40ByteのRVALUEが与えられている。また、実際にmallocされて割り当てられた実際のオブジェクトデータへのポインタを持つ</li>
<li>文字列も短いとRVALUEに入り大きければmallocで確保された場所へのポインタ</li>
<li>GC.statの:heap_live_slotsでスロット数が、:heap_eden_pagesでページ数が取れる。GC::INTERNAL_CONSTANTS[:HEAP_PAGE_OBJ_LIMIT]でページごとの上限が取れる</li>
<li>eden_pages * slots_per_pageで確保できるオブジェクトの上限が取れる。live_slotsをこれで割れば使用率が出せる</li>
<li>PUMAはUnicornより多くのメモリを使ったり、Sidekiqがリークしたりする。スレッドごとのメモリ領域がメインスレッドのメモリ領域に還元</li>
<li>スレッドごとにメモリ領域を確保した後、スレッドが終了しても開放されずにメインスレッドのメモリに統合される</li>
<li>MALLOC_ALENA_MAXを指定すると確保するメモリ領域の上限を制限できるけど、速度とトレードオフになる</li>
</ul>


<h3>Writing Lint for Ruby</h3>

<hr />

<p><a href="http://rubykaigi.org/2017/presentations/p_ck_.html">p_ck_</a>さんの発表</p>

<ul>
<li>ripper</li>
<li>Rubyのparserはほかにもある。標準のRipper。パースのRubyと実行するRubyが同じバージョンになってしまう問題</li>
<li>ASTのトラバースでも無視するnilの可能性</li>
<li>Traverserパターンで解析をする。nodeとvisitorを受け取り再帰的に呼び出していますね。</li>
<li>node.source で括弧の有無など AST で欠損するソースそのものの情報を入手することができる</li>
<li>lintの限界

<ul>
<li>ローカル変数の中身はparserは知らない

<ul>
<li>要はエラーがあったものを代入して回避なおｄ</li>
</ul>
</li>
<li>method呼び出しで定義がわからない

<ul>
<li>静的解析とRubyの相性がイマイチよくない</li>
</ul>
</li>
<li>monkypatch / params(rails) / evalだとLintではできない

<ul>
<li>実行できないという制約</li>
</ul>
</li>
</ul>
</li>
<li>構造が理解ができる

<ul>
<li>全てのケースに対して警告出せる</li>
</ul>
</li>
<li>解析時間が短い

<ul>
<li>実行したりしないので</li>
</ul>
</li>
<li>rubocopは汎用ルールなので、こっち使ったほうが楽</li>
<li>Rubocop(Lintのルール)の作り方。rakeタスクがある。lintの実装とテストのテンプレートを作ってくれる

<ul>
<li>rubocop-plugin(特化したもの)</li>
</ul>
</li>
<li>Lintはバグ検出に使えるもの</li>
<li>解析は、ASTトラバースして見つける</li>
<li>静的解析にはいくつか方法はある</li>
</ul>


<h3>終わりに</h3>

<hr />

<p>スピーカー、スタッフの皆様ありがとうございました</p>

<p>久しぶりな方々ともお会いできて、新たな刺激がありました
印象深いのが型、parser周りの話が多かった印象です<br/>
来年は仙台なので、広島よりは都内から近いですね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[認証系のgemをちょっと見てみた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2016/06/19/auth-gem/"/>
    <updated>2016-06-19T01:34:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2016/06/19/auth-gem</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>だいたいのwebサービスにはユーザー登録をしてはじめて使用することが多いと思います</p>

<p>ご多分にもれずに、これから実装しようとしたものでメンバースキルを鑑みるとRailsという形ですすむことになりました。</p>

<p>では、Railsでアプリを書くときに認証系のgemって、今は何が使えるものだろうかということを軽く見てみました。</p>

<p># ちょっと実装してよと軽く言われるものの困ったものですorz</p>

<h3>RubyToolboxを眺める</h3>

<hr />

<p>自分の個人内の観測範囲でよく聞くもの</p>

<ul>
<li>warden</li>
<li>devise</li>
<li>Authlogic</li>
<li>Sorcery</li>
<li>doorkeeper</li>
<li>OmniAuth</li>
</ul>


<p># provider提供も関係無く書いてますが、話と毛色が違う感あるのでこの後は出てきません</p>

<h3>メンテ厳しいらしいもの</h3>

<hr />

<p>この２つの模様</p>

<ul>
<li><a href="https://github.com/binarylogic/authlogic/issues/487">Authlogic</a></li>
<li>Sorcery(<code>Currently Sorcery project is not actively maintained.</code>という文章がREADMEにあった)</li>
</ul>


<p>PR眺める限り、Authlogicは対応させようと頑張っている模様
Sorceryは、ちょっと厳しそうかな(とはいえ、一応動く&amp;issueとPRをあげたら対応自体はしてくれる模様)</p>

<h3>devise&amp;warden</h3>

<hr />

<p><a href="https://github.com/plataformatec/devise/blob/master/CHANGELOG.md">changelog</a>見ると、<br/>
4.0.0rc1からRails5に対応していました<br/>
流石ですね。</p>

<p># が、多機能で便利でいいのですが癖が強いのとdeviseのレールから外れた瞬間悲惨な目に遭うので避けたいところ</p>

<h3>他に無いか？</h3>

<hr />

<p>個人的に良さそうかなと思ったのは、<a href="https://github.com/halogenandtoast/monban">monban</a>ですかね。<br/>
(ちょっとgithubのスター数が少ないのは気になりますが・・・)</p>

<p>Rails使ってるなぁと思ってみたら、殆どconcern(helper)と初期ロード&amp;設定(railtie&amp;configure)だけだった模様<br/>
案外Railsのアップデート影響も少なそうな印象でした。</p>

<p>実装や設定内容を読む限り、拡張の幅も広いので好印象でした<br/>
実際、Rails5でカスタム実装してみましたが問題なく認証させることができました</p>

<p>肌感&amp;経験上ですが、認証機能自身はサービスによって独自の仕様、または既存機能との併用となることが多いので<br/>
拡張しやすいgemの方が対応のさせやすさ、メンテナンスさせやすいほうがやりやすいかなと思ってます</p>

<p>そういう意味では、(余計な機能が無いという意味で)軽量かつ、拡張可能、機能の置き換え可能なmonbanはいいなと思いました</p>

<p># ぶっちゃけ、monbanカワイイよってことだけが言いたかったｗ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsのリクエストヘッダーを調べる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2016/02/23/rails-mimetype/"/>
    <updated>2016-02-23T19:30:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2016/02/23/rails-mimetype</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>リクエストヘッダーの中身を見ようとしたときの備忘録<br/>
ヘッダーを利用してゴニョゴニョしてた時とかに使ってましたｗ</p>

<h3>Railsのリクエストで一覧を取得</h3>

<hr />

<p>requestで来たhederの一覧を調べる場合、以下のコードを<code>before_action</code>に仕込んでおく</p>

<p><code>
request.headers.sort.map { |k, v| logger.info "#{k}:#{v}" }
</code></p>

<h3>特定のヘッダーの内容確認</h3>

<hr />

<p><code>HTTP_ACCEPT</code>を見たい場合は、以下のコードを<code>before_action</code>に仕込んでおく<br/>
(多分このコードはよく使うかも)</p>

<p><code>
accept = request.headers['HTTP_ACCEPT']
</code></p>

<h3>利用可能なMIME Typeの確認</h3>

<p>Railsで定義されているMIME Typeを観る場合は以下のコードを利用する<br/>
以下はjsonに対応したMIME Typeを確認するコード</p>

<p><code>
Mime::EXTENSION_LOOKUP.each { |m| puts m}
Mime::Type.lookup_by_extension(:json)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi3日目に行ってきた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/12/13/ruby-kaigi/"/>
    <updated>2015-12-13T11:24:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/12/13/ruby-kaigi</id>
    <content type="html"><![CDATA[<h3>The OMR GC Talk</h3>

<hr />

<p>OMRというランタイム</p>

<ul>
<li>多くの言語に対応している</li>
<li>(plugin機構で実現？)</li>
</ul>


<p>調査はこれを使っていた模様
https://www.ibm.com/developerworks/jp/java/library/j-ibmtools5/</p>

<p>allocationを早くした</p>

<ul>
<li>スレッドローカルヒープ</li>
<li>ロック無しでallocate</li>
</ul>


<p>可変長のバッファを作る
OMRのランタイム上で動作するGCがMRIに比べてよかった</p>

<p>GCのmark速度は早い(MRI)</p>

<p>OMR GCを確認するのはこれ
https://github.com/rubyomr-preview/rubyomr-preview</p>

<h3>Refinements - the Worst Feature You Ever Loved</h3>

<hr />

<p>method aliasとかモンキーパッチだと元の動きの振る舞いが全体に影響するからよくない</p>

<p>assertとかの振る舞いもかわってしまう</p>

<p>refinementsなら影響範囲を制御できる</p>

<p>スコープは働くので継承とかcalss_evalでも有効</p>

<p>文字列で与えたもので使えるeval 'using SomeClass; hoge.fuga'みたいな感じなの</p>

<h3>Discussion on Thread between version 1.8.6 and 2.2.3</h3>

<hr />

<p>Thread#status
スレッドの状態が取れないような状況が起きた
→mission crtalなシステムでも使えるThreadの使い方</p>

<ul>
<li>子スレッドでforを同期的に上がった場合</li>
<li>同期的にraiseが上がった場合</li>
</ul>


<p>Ruby2.2.3でも早くなったけど、CPU負荷も上がった
実行回数は変わらなかった</p>

<p>raiseのインスタンスは重い
メモリ消費は少ない
selectで対応することができる</p>

<p>早くなったけど、リソース消費も多いのでスレッドとかはメモリ消費量を意識したほうがよい</p>

<h3>Plugin-based software design with Ruby and RubyGems</h3>

<hr />

<ul>
<li>多くの機能</li>
<li>コアコードがシンプル</li>
<li>testが簡単</li>
<li>developerコミュニティが活発</li>
</ul>


<p>デザインパターン</p>

<ol>
<li>ホストアプリを拡張する(拡張ポイントを用意している、コールバックで実行)</li>
<li>DIでプラグインを追加(I/Fとか決めてDIコンテナを置き換え、ホストからアプリを実行)</li>
<li>動的にプラグインをロードする方法</li>
<li>1と2を組み合わせる方法</li>
</ol>


<p>プラグインのバージョンコントロール(依存ライブラリのコンフリクト解消)</p>

<p>fluentdは動的にpluguin
emblukは組み合わせ</p>

<h3>Actor, Thread and me</h3>

<hr />

<p>アクター</p>

<ul>
<li>メッセージを適当なタイミングで送る</li>
<li>レシーブ</li>
<li>仕事をする</li>
</ul>


<p>破綻の予兆</p>

<ul>
<li>複数のイベントを待つ</li>
<li>DBへの問い合わせとか</li>
<li>資源の協調</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi2日目に行ってきた]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/12/12/ruby-kaigi/"/>
    <updated>2015-12-12T13:24:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/12/12/ruby-kaigi</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>RubyKaigi2日目に参加してきました。</p>

<p>気になるセッションもチラホラあり期待していました</p>

<p>ただ、盛大に寝坊しましたorz</p>

<p>という訳で、メモ</p>

<h3>Data Analytics Service Company and Its Ruby Usage</h3>

<hr />

<p>ミドルウェア
* データ処理をする上でスループットが重要
* 一度書いたものはそのまま運用されるので、固めにつくることが多い</p>

<p>集めてくるところとか、加工整形した結果などは固くつくる必要はない
(書捨ても多いから)</p>

<p>要素</p>

<ul>
<li>データを集めて保存</li>
<li>総うさするコンソr−るapi</li>
<li>データしゅべつ、型だとかのスキーマ管理</li>
<li>計算処理(batch,query)-> Java</li>
<li>キューイングやスケジュール処理</li>
<li>データを格納&amp;エクスポート</li>
</ul>


<p>キューとワーカーの話</p>

<p>perfedtsched(スケジューラー)
→SPOFのないcrontabと思えばよい
→1回も実行されないよりも２回実行されたほうがよい(別途担保が必要だが・・・)</p>

<p>リトライ可能かは、状況やエラー内容による
実行時間
jobの実行内容が重いものやら軽いものまで</p>

<p>perfectqueue(キュー)</p>

<ul>
<li>優先どの高いキューは高いものは素早く処理</li>
<li>graceful restart(字工事のjobは分離して実行)</li>
<li>RDBMSのようなinsertで実現</li>
<li>RDS(MySQL)を使ってる</li>
</ul>


<p>パフォーマンスコントロールとかでジョブ実行を制御している
安全側に倒している(顧客情報のisolationとか)</p>

<p>何故Rubyを使っているか</p>

<ul>
<li>ワーカーのコードが複雑だけど重要</li>
<li>テストが一番重要なので、書きやすいのでrspecを採用</li>
<li>テストコードの書きやすさが重要だった(可読性とか、オーバーライドとか)</li>
<li>新しい機能とか新しいライブラリは使っていく</li>
</ul>


<p>スケジューラーとキュー気になる</p>

<h3>Ruby for one day game programming camp for beginners</h3>

<hr />

<p>京大マイコンクラブで事例</p>

<p>Windowsの環境が殆どなので以下を実行するようにした</p>

<ul>
<li>Ruby1.8.4(starter kit)</li>
<li>MyGame and Ruby/SDL(ゲーム用)</li>
<li>sakura editor</li>
</ul>


<p>インストールして終わりぐらいの単純なものがよい</p>

<ul>
<li>講義みたいなことはしない</li>
<li>1対1のペアプロ</li>
<li>楽しいRubyが教本</li>
</ul>


<p>プログラム未経験の参加者の8割が大体できる
→やる気に繋がる
→自信によって自分が勉強する</p>

<p>考察してみる</p>

<ul>
<li>教えかたが勉強できる</li>
<li>つくるものが決まっている</li>
<li>締め切り</li>
<li>教えるものが少ない(基本的な制御構造)</li>
</ul>


<h3>Ruby and PostgreSQL, a love story</h3>

<hr />

<p>plmruby
zombodb</p>

<ul>
<li>producael language handler(他の言語のサポート)</li>
<li>indexがすぐれてる(通常indexだけなく、elastic searchとかのラッパーにもできる)</li>
<li>foreginData(他にデータが投げられる, csvなりなんなりにｄけいる)</li>
</ul>


<p>postgresql fdl</p>

<ul>
<li>callbackルーチンで駆動するライフサイクル(コールバックチェーンかな)</li>
<li>rubyがサポートする</li>
</ul>


<p>holycorn</p>

<h3>Rhebok, High Performance Rack Handler</h3>

<hr />

<p>Rhebok</p>

<ul>
<li>rack handler</li>
<li>unicorn比較で1.5x</li>
<li>gazelle(perlnのpluck)の置き換え</li>
</ul>


<p>使いドコロ</p>

<ul>
<li>高いトラフィックのあるところ</li>
<li>最適化が進んでるところに最適(SNS, gameとか)</li>
<li>rackがネックになったとき</li>
</ul>


<p>使えないところ</p>

<ul>
<li>websocket</li>
<li>streaming</li>
<li>リバースプロキシかまさないといけない</li>
</ul>


<p>性能</p>

<ul>
<li>http1.1(keepaliveは未サポート)</li>
<li>unix socket</li>
<li>ホットデプロイ可能</li>
<li>rackアプリの起動でOK</li>
</ul>


<p>Rack</p>

<ul>
<li>仕様(webserverとF/WをつなぐI/F)</li>
<li>middleware</li>
<li>Rack::Handlerの名前空間の下に同時実装をすれば自動認識できる</li>
</ul>


<p>パフォーマンス上げる</p>

<ul>
<li>マルチプロセス</li>
<li>マルチスレッド</li>
<li>IO多重化</li>
</ul>


<p>timeoutの実現</p>

<ul>
<li>IO.selectを使用する</li>
<li>pollを使うことで実現</li>
</ul>


<p>parser</p>

<ul>
<li>pico_http_parserに渡すように変更</li>
</ul>


<p>tcp</p>

<ul>
<li>tco_nodelayをオフにする</li>
<li>バッファリング遅延対策</li>
<li>tcpのやり取りが増えるのでフラグメンテーションいっぱい</li>
<li>書き込み回数を1回にしておく</li>
</ul>


<h3>Pragmatic Testing of Ruby Core</h3>

<p>テストを実行してみる
テストが落ちた報告をするといい</p>

<p>Makefleにテストがなく、common.mkにある
btest-ruby => bootstraptest
sample/test.rbが通った後に実行(runner.rb経由で実行)
make test-allなどは、標準ライブラリのテスト</p>

<p>make test-all TESTS="-j4"すると並列で動く</p>

<p>test/ruby : 組み込み
test/logger : 添付ライブラリ
test/-ext- : C拡張</p>

<p>envutil.rb &lt;- ヤバイ
leakchecker.rb</p>

<p>rubyspecは現行の振る舞いだけしか書いてないので、
言語仕様ではない(by Matz)</p>
]]></content>
  </entry>
  
</feed>
