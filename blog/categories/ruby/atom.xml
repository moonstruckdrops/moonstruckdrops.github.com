<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2013-07-13T18:41:22+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyのStructクラスが便利]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/07/02/ruby-struct/"/>
    <updated>2013-07-02T01:15:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/07/02/ruby-struct</id>
    <content type="html"><![CDATA[<p>特にちょっとしたデータ構造を作成したいときなんかは非常に有効な手段かも</p>

<h3>Structクラス</h3>

<hr />

<p>Rubyの組み込みクラスです。(Classに比べて影が薄いですが・・・)</p>

<p>平たく言うと、Classクラスに似ているものです。</p>

<p>じゃー違いは何なの？ってなります。</p>

<ol>
<li>newしたとき、引数で指定したアクnセッサをもつクラスを生成する</li>
<li>第一引数の文字列がクラス名となるが、指定がない場合は無名のクラスになる</li>
</ol>


<p>これだけ。</p>

<p><code>
Point = Struct.new("Point", :x, :y)
item = Point.new(100,200)
p item =&gt; #&lt;struct Struct::Point x=100, y=200&gt;
p item.x =&gt; 100
</code></p>

<p>無名クラスだと、こんな感じ</p>

<p><code>
Point2 = Struct.new(:z)
Point2.class =&gt; Class
item2 = Point2.new(300)
p item2 =&gt; #&lt;struct Point2 z=300&gt;
</code></p>

<h3>ドキュメントに無い機能</h3>

<hr />

<p>ブロックを使うことができることです。<br/>
ブロック内では、独自のメソッドを定義することができます。</p>

<p>こんな感じです。</p>

<p>```
Point = Struct.new(:x, :y) do
  def sum</p>

<pre><code>    x + y
</code></pre>

<p>  end</p>

<p>  def minus</p>

<pre><code>    x - y 
</code></pre>

<p>  end
end
p Point.new(600, 700).sum => 1300
p Point.new(800,900).minus => -100
```</p>

<p>他にも、superを使うことで、上位のコンストラクタを実行することができます。</p>

<p>```
class Point &lt; Struct.new(:x, :y)
  def initialize(x, y)</p>

<pre><code>z = x + y
super(z, y)
</code></pre>

<p>  end
end</p>

<p>item = Point.new(400, 500)
p item => #<struct Point x=900, y=500>
```</p>

<h3>使いどころ</h3>

<hr />

<p>正直、あんまり無いような気がしなくもないですが、自分だと以下で使います。</p>

<ul>
<li>csvファイルとか読み込むとき、ちょっとしたデータ構造を定義するとき</li>
<li>ちょっとしたデータのソート</li>
<li>ちょっとしたアルゴリズムの追加</li>
<li>ハッシュの代わりとか(既にデータ構造が分かってる場合など)</li>
</ul>


<p>データソートする場合の例</p>

<p>```
class Point &lt; Struct.new(:x, :y)
  def initialize(x, y)</p>

<pre><code>z = x + y
super(z, y)
</code></pre>

<p>  end
end</p>

<p>item = Point.new(400, 500)
item2 = Point.new(200,300)</p>

<p>p item => #<struct Point x=900, y=500>
p item2 => #<struct Point x=500, y=300></p>

<p>array = []
array &lt;&lt; item
array &lt;&lt; item2</p>

<p>p array => [#<struct Point x=900, y=500>, #<struct Point x=500, y=300>]</p>

<p>result = array.sort{ |item1,item2|</p>

<pre><code>                item1.x &lt;=&gt; item2.x
           }
</code></pre>

<p>p result => [#<struct Point x=500, y=300>, #<struct Point x=900, y=500>]
```</p>

<p>書き捨てみたいなRubyコードを書くときにはちょうどいいのかもしれないですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubymineを使ってみる]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/06/08/use-rubymine/"/>
    <updated>2013-06-08T17:26:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/06/08/use-rubymine</id>
    <content type="html"><![CDATA[<p>皆さんはRubyやRailsでアプリを書くときどのようなエディタを使いますでしょうか？</p>

<h6>僕は、Emacsで書いていることが多いです。。。</h6>

<p>多いのですが・・・<br/>
こんな感じで若干面倒な面もあってですね。</p>

<ul>
<li>設定がともかく面倒くさい・・・。</li>
<li>色々設定を追加しているので、重くなってきた(僕の設定が悪いのかもしれませんが・・・)</li>
<li>補完周りも効くのか効かないのか微妙な時も(僕の設定が悪いry)</li>
<li>オムニ補完が・・・効きすぎてお節介すぎる(僕の設定がry)</li>
<li>その他色々。。。</li>
</ul>


<p>良い面もありまして、僕が思う良い面はこんな感じ。</p>

<ul>
<li>キーバインドがカスタムできるよ</li>
<li>画面が分割できるので、TDDにも向いてるよ</li>
<li>オムニ補完が良い感じに効いたときは、さくさくコードが書ける</li>
<li>タブやフォーマットとか「{ }」の自動補完とかきっちりやってくれる</li>
<li>あとは、タグを使ってソースからソースへのコードジャンプができる</li>
</ul>


<p>殆ど、Emacsの機能ですねw</p>

<p>で、面倒くさい面もあるのでRuby開発に限ってはEmacsを卒業してもいいのではないかと最近思うようになりました。</p>

<p>なので、Rubyをスムーズに開発できるエディタってなんだろうとか気になりだした訳です。<br/>
エディタとして候補が挙げれたものは・・・</p>

<ul>
<li>Vim</li>
<li>Text Mate</li>
<li>Sublime text2</li>
<li>Coda</li>
<li>Aptana Studio(Eclipse)</li>
<li>RubyMine</li>
</ul>


<p>自分が観測できた範囲だとこんだけ。</p>

<p>色々ありますね。とりかえず今回はRubyMineを使ってみます。</p>

<h6>Rails コマンド</h6>

<p>「$rails migration」とか実行する場合、「Ctrl + Option + G」<br/>
よく使いそうなものは大体実行できます。<br/>
主に以下のようなことができる。(ここでは一部のみ記載)</p>

<ul>
<li>scaffold</li>
<li>migration</li>
<li>helper</li>
<li>controller</li>
<li>その他色々</li>
</ul>


<h6>Rails Server</h6>

<p>サーバを起動する場合、「Option + Shift + F10」<br/>
デバッグ実行やプロダクション起動、リリース</p>

<h6>リファクタリング</h6>

<p>変更箇所をカーソルで選択後「Shift + F6」<br/>
プレビューが表示されるので、「Do Refactor」を実行しましょう。<br/>
いちいち、「Do Refactor」ボタンを押さないといけないところに操作性のムカツキを感じる。</p>

<h6>その他</h6>

<p>エディタ自身の設定でデフォルトで有効になっている「フリーカーソール」をOFFにしたい。(余白をクリックすると、行の末尾にいかない)<br/>
設定項目のエディタ設定で、「Vertual Space」を見つけます。</p>

<h6>「Allow Placement of caret after the end of line」のチェックボックスを外します。</h6>

<p>そうすると、余白をクリックしても行の末尾にいくようになります</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[万葉.rbに参加してきました。#everyrb]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/06/ranyo-rb/"/>
    <updated>2013-04-06T13:01:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/06/ranyo-rb</id>
    <content type="html"><![CDATA[<p>参加メモメモ。</p>

<h3>オープニング</h3>

<hr />

<p>Matzからの挨拶。<br/>
楽しい設計の言語が真面目に仕事になって嬉しい。<br/>
万葉をよろしく!!</p>

<h3>基調公演(島田さん)</h3>

<hr />

<p>言葉は軽く聞こえるけど、会社経営だとすごい!!</p>

<p>最近思う「コミュニティと会社の私」</p>

<ul>
<li>会社は孤立している。契約とか仕事程度(内側のつながりはない)</li>
<li>コミュニティではゆるく繋がっているので、今は繋がっているのではないのか</li>
<li>Rubyのコミュニティは面白い方々多い</li>
<li>地域Ruby会議に行くと、質問したり自分のことを見直すきっかけになるのでいいかもしれない</li>
<li>普通、ビジネス主体としての会社</li>
<li>もう１つは、コミュニティとしての会社</li>
<li>中の人が見えるというのはいい</li>
</ul>


<h3>万葉社長</h3>

<hr />

<p>コードについて言いたいこと</p>

<p>プログラミングはどういう仕事？</p>

<p>良い考えが最良とは限らない(衝突が起きる)</p>

<ul>
<li>クラス名が仕様書番号とか最低すぎる</li>
<li>わかりやすい名前</li>
<li>自動テストあるといいよ</li>
<li>PHP悪くてRubyがいいという意見は、別れる</li>
<li>MVCとオブジェクト指向は？</li>
<li>DRYと読みやすさ</li>
<li>RDB的に最適解とオブジェクト指向</li>
<li>安全と自由(型など)</li>
</ul>


<p>そのため、一般的に悪いといわれることが役立つこともある。</p>

<p>他にも・・・</p>

<ul>
<li>すべてを一気に解決することはできない。</li>
<li>どの局面で問題を解決をするのが重要</li>
<li>正解なんてものはない。</li>
</ul>


<p>大事なこと</p>

<ul>
<li>意思の表明。思ってるだけでは何もできない</li>
<li>考えていることを言語化することが必要</li>
<li>たのしくソフトウェア開発ができること</li>
<li>意思をもって選びとること</li>
</ul>


<h3>LT</h3>

<hr />

<p>角谷さん</p>

<ul>
<li>Rubyで仕事しだすと会社とコミュニティと個人のつながりを考えだす</li>
<li>WHYから始める</li>
</ul>


<p>和田さん</p>

<ul>
<li>6年続くのはすごい</li>
<li>生き生きできるのはレッドじゃなくてサブ</li>
<li>オススメ本:はじめの一歩を踏み出そう</li>
</ul>


<p>これ以外は聞くほうが面白かったのでメモってません。<br/>
ごめんなさいm(<em> </em>)m</p>

<h3>宿題的なアレ</h3>

<hr />

<p>万葉の中の人にやってること、超面白いし聞きたいんで是非LTやってくださいと勧められました。<br/>
なので、機会があればどこかでネタを話たいなーと思います。</p>

<p># 思ってるだけだとダメなので実際どこかで行動しないといけないですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyで画像ファイルをダウンロードする]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/03/28/ruby-web-file/"/>
    <updated>2013-03-28T23:34:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/03/28/ruby-web-file</id>
    <content type="html"><![CDATA[<p>少しばかり、やることがあったのでやってみた。<br/>
煩悩丸出しですいませんw</p>

<h3>HTTP Responseのbodyを利用する</h3>

<hr />

<p>直感的ではないけど、素直なやりかた</p>

<ol>
<li>書き込みモードでファイルを開く</li>
<li>urlで接続したbodyデータをファイルに書き込む</li>
</ol>


<p>```
def save_file(url)
   filename = File.basename(url)
   open(filename, "wb") do  |file|</p>

<pre><code>      file.puts Net::HTTP.get_response(URI.parse(url)).body
</code></pre>

<p>   end
end
```</p>

<h3>open-uriを使用する方法</h3>

<hr />

<p>説明しやすいのでこっちのほうがわかりやすいかもしれない。</p>

<ol>
<li>書き込みモードでファイルを開く</li>
<li>書き込みモードで開いたファイルに対して、urlで接続したデータを書き込む</li>
</ol>


<p>```
def save_file(url)</p>

<pre><code>filename = File.basename(url)
open(filename, 'wb') do |file|
    open(url) do |data|
        file.write(data.read)
  end
end
</code></pre>

<p>end
```</p>

<p>真面目にやるなら、レスポンスコードもチェックしたほうがいいかもしれないですね</p>
]]></content>
  </entry>
  
</feed>
