<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: markdown | kurobaraのブログ]]></title>
  <link href="http://moonstruckdrops.github.com/blog/categories/markdown/atom.xml" rel="self"/>
  <link href="http://moonstruckdrops.github.com/"/>
  <updated>2015-06-28T22:12:14+09:00</updated>
  <id>http://moonstruckdrops.github.com/</id>
  <author>
    <name><![CDATA[kurobara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopressでの画像の表示]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2015/01/28/octopress-picture/"/>
    <updated>2015-01-28T00:55:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2015/01/28/octopress-picture</id>
    <content type="html"><![CDATA[<h3>はじめに</h3>

<hr />

<p>常々、画像ファイルってどう表示するのだっけ？と思っていたのでやってみた感じ</p>

<h3>ファイルの格納先</h3>

<hr />

<p><code>octopress/source/images</code>ディレクトリに画像ファイルを格納する</p>

<p>themeで表示している画像が最初から格納されているので、ビビらず画像ファイルを格納すること</p>

<h3>指定方法</h3>

<hr />

<p><a href="http://octopress.org/docs/plugins/image-tag/">公式</a>を参照すればできる模様</p>

<p>そのため前述の格納先を相対URLで指定すると、以下の形になる</p>

<p><code>
![hoge](/images/hoge.jpg)
</code></p>

<p>こんな感じでやると画像を表示できる</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rsyncを使って自前サーバでOctpressを運用する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/04/08/rsync-octpress/"/>
    <updated>2013-04-08T21:35:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/04/08/rsync-octpress</id>
    <content type="html"><![CDATA[<p>Octpressが便利すぎ。。。<br/>
Bloggerとは何だったんだって感じです。</p>

<p>どうも、どうもこんにちは。kurobaraです。</p>

<p>便利すぎるんで、</p>

<p>「ちょっと、外部に公開できないけどーみたいな感じで何でも書けるようなブログ」</p>

<p>欲しくなるわけですよ。(主に会社で、ですが・・・)</p>

<p>結論から先に言っちゃうと、自前サーバでOctpressを動かせます。<br/>
Apacheのディレクトリ制限を噛ますことでアクセス制限なんてこともできます。</p>

<p>という訳で、Octpressを自前サーバで動かす方法をやってみます。</p>

<h3>準備</h3>

<hr />

<p>思いつく感じのこと</p>

<ul>
<li>クライアントから自前のサーバにSSHでアクセスできること</li>
<li>クライアントにrsyncがあること</li>
<li>クライアントでOctpressが動作すること</li>
</ul>


<p>こんな感じ、移行で設定します。</p>

<h3>Rakefileの編集</h3>

<hr />

<p>Rakeコマンドを使ってる訳なので、deploy先を変更するため以下のように編集します。</p>

<ul>
<li>「ssh_user」を実際のユーザー名とサーバ名に変更します</li>
<li>「document_root」でサーバ配置のディレクトリを指定します</li>
<li>「ssh_port」はデフォルトで22ですが、必要に応じて変えます</li>
<li>「deploy_default」をpushからrsyncに変更します。</li>
</ul>


<p><code>
ssh_user       = "user@server"
ssh_port       = 22
document_root  = "/var/www/html/"
rsync_delete   = true
deploy_default = "rsync"
</code></p>

<p>ぶっちゃけ、自前サーバで動かすだけならこれで終わりです。<br/>
が、これだけだと寂しいのでサブディレクトリで動作するようにしてみます。<br/>
# 当たり前ですが、普通はサブディレクトリ単位でコンテンツをApacheに配備すると思います。</p>

<h3>サブディレクトリ運用</h3>

<hr />

<p>http://＜サーバURL＞/hoge のようにサブディレクトリ運用する場合は、以下のようにします。</p>

<ul>
<li>サブディレクトリを作成します
<code>
$rake set_root_dir[hoge]
</code></li>
<li>_config.yamlでサブディレクトリを追加します
<code>
url: http://&lt;サーバURL&gt;/hoge
</code></li>
<li>Rakefileのdocument_rootをサブディレクトリに変更します
<code>
document_root = "/var/www/html/octopress"
</code></li>
</ul>


<p>あとは、Apache2でサブディレクトリの設定を施してやれば動作します。<br/>
認証を付けたければ、認証の設定をすれば認証付きのBlogになります。</p>

<p>これで、要件を満たせたので作業メモとか残せて幸せになれますね。(多分)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octpressで画像ファイルを扱う]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/03/30/octpress-image-tag/"/>
    <updated>2013-03-30T01:47:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/03/30/octpress-image-tag</id>
    <content type="html"><![CDATA[<p>Octpressで画像を扱う場合、どうすればよかったっけな？ってなりましたのでメモしておきます。</p>

<h3>画像の格納ディレクトリ</h3>

<hr />

<p>画像の格納場所は、
<code>
~source/images
</code>
に格納すればよい</p>

<p>imagesディレクトリの配下にも、blogというディレクトリがあるのでブログ用の画像はそちらに格納すればよいっぽい。</p>

<h3>Octpress公式の手順</h3>

<hr />

<p><a href="http://octopress.org/docs/plugins/image-tag/">公式の手順</a></p>

<p>以下の書式に従って記載すれば、いいらしい。</p>

<p><code>
{\% img [class names] /path/to/image [width] [height] [title text [alt text]] \%}
</code></p>

<p>そのため、画像サイズを640x480で表示させたい場合、以下のように書くことができます。</p>

<p><code>
{\% img left /images/picture.png 640 480 \%}
</code></p>

<p>コード上の「\」は不要です。(何故か、エスケープが正しく動作しなかった)</p>

<h3>markdownを使用した方法</h3>

<hr />

<p>これは、前にも書いたように以下のようにすればよいでしょう。</p>

<p><code>
[テスト画像](/images/picture.png "title")
</code></p>

<p>但し、画像サイズは指定できないという欠点があります。<br/>
画像は、加工するしかないようですね。</p>

<h3>htmlを直接記載する方法</h3>

<hr />

<p>以下のような感じで、htmlを使用した書き方もできるようです。</p>

<p><code>
&lt;img src="http://moonstruckdrops.github.com/images/picture.png" alt="alt" title="title" width="640" height="480"&gt;
</code></p>

<p>注意する点があるとすれば、必ず前後に<p>タグが挿入されてしまうことです。<br/>
インラインで使用することは、できないっぽいです。</p>

<h3>まとめ</h3>

<hr />

<p>個人的な見解は以下のような感じ</p>

<ul>
<li>基本はmarkdown記法で記載</li>
<li>画像サイズを変更したい場合、Octpressの記法に従う</li>
<li>汎用的にしたい場合、htmlで記載する</li>
<li>ブログ記事用の画像の場合、「souce/images/blog」の下に格納する</li>
<li>ブログ記事以外の画像の場合、「source/images」の下に格納する</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octpress始めました]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/03/21/start-octpress/"/>
    <updated>2013-03-21T23:36:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/03/21/start-octpress</id>
    <content type="html"><![CDATA[<p><a href="http://moonstruckdrops.blogspot.jp/">旧ブログ</a>から移行しますよっと。</p>

<p>正直なところ、旧ブログは記事を書くのが大変でした。<br/>
マークダウン記法が使えるブログに移行したいなーと前から思ってたので、思い切って移行することにしました。<br/>
旧ブログの記事はおいおい引っ越すことにします。</p>

<p>という訳で、Octpressの使い方メモを書いておきます。(主に自分用ですがw)</p>

<h4>インストール</h4>

<hr />

<p><a href="http://octopress.org/docs/setup/">公式サイト</a>を見ながら実行します。<br/>
特に難しいことはないです。<br/>
強いて挙げるとすると、rubyのバージョンを1.9.3にしておくことでしょうか。<br/>
が、それもrbenv使用していれば問題無いでしょう。</p>

<h4>テーマの変更</h4>

<hr />

<p>これは、結構めんどかったような記憶がしています。<br/>
といってもコマンド打つだけですがw</p>

<ol>
<li><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">ここから</a>テーマの選択を行います。自分は、justin-kellyを選択しました。</li>
<li>以下のコマンドを実行します。
<code>
$ git clone git@github.com:wallace/justin-kelly-theme.git .themes/justin-kelly
$ rake install['justin-kelly']
$ rake generate
</code>
あ、ちなみにテーマ変更したら何か初期化されてしまって面倒なことになった覚えがあるので気を付けましょう。</li>
</ol>


<h4>ブログの設定変更</h4>

<hr />

<p>_config.ymlで行います。<br/>
<a href="http://octopress.org/docs/configuring/">公式</a>に設定方法が書いてありますので、問題は無いでしょう。(多分)</p>

<h4>記事の作成</h4>

<hr />

<p>投稿用のテンプレートを作成します。<br/>
指定する文字列はURLに使われるので、英数だけで指定します。
<code>
rake new_post['post title']
</code></p>

<p>コマンドを実行すると、以下のような感じでテンプレートができます。</p>

<ul>
<li>source/_posts/yyyy-MM-dd-post-title.markdown</li>
</ul>


<p>テンプレートができるので、好きなエディタで編集します。<br/>
おすすめのエディタは、以下のものです。</p>

<ul>
<li>Mou(リアルタイムでプレビューできます)</li>
<li>Emacs+markdown-mode(コマンドを実行すればプレビューできます)</li>
</ul>


<p>※Emacsのmarkdown-modeはそのうち記事を書くつもりです。</p>

<h4>記事の生成</h4>

<hr />

<p>以下のコマンドを実行して、htmlファイルを生成します。<br/>
<code>
rake generate
</code></p>

<h4>記事のプレビュー</h4>

<p>以下のコマンドを実行して<a href="http;//localhost:4000">localhost:4000</a>にアクセスします。
<code>
rake preview
</code></p>

<p>エディタのプレビューで書きながら確認しつつ、記事投稿前の最終確認で使用するとよいと思います。<br/>
プレビュー状態だと、投稿してないですからね。</p>

<h4>記事を投稿</h4>

<hr />

<p>以下のコマンドを実行して投稿(デプロイ)します。
<code>
rake deploy
</code></p>

<h4>投稿の削除</h4>

<hr />

<p>削除したい「source/_posts/yyyy-MM-dd-post-title.markdown」を削除します。<br/>
削除後、記事の生成を行なってから再度deployを実施します。<br/>
これで、表示するブログからは消えます。。。<br/>
ですが、githubにdeployしているのでgithub上では残ってしまいます。<br/>
なので、完全に削除したい場合は、デプロイしたコミットログも削除しましょう。<br/>
(そこまでひどいものを書くほうが問題だと思いますが)</p>

<h4>まとめ</h4>

<hr />

<p>意外と簡単に導入できるので、おすすめです。<br/>
マークダウン記法が使えて楽に書けるところもいいですね。(bloggerが書きにくすぎるのが問題だと思うのですけど)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopressのサイドバーにタグクラウドを表示する]]></title>
    <link href="http://moonstruckdrops.github.com/blog/2013/03/17/octopress-sidebar/"/>
    <updated>2013-03-17T01:33:00+09:00</updated>
    <id>http://moonstruckdrops.github.com/blog/2013/03/17/octopress-sidebar</id>
    <content type="html"><![CDATA[<p>Octpressのデフォルト設定では、タグクラウドがありません。<br/>
ですが、pluginを組み込むことで、タグクラウドを実現することができます。<br/>
無かったら困るというほどでもないけれど、あったほうが何かと便利なので自分のブログに組み込んでみます。</p>

<h3>プラグインの組み込み</h3>

<hr />

<p>手順は以下の順序で行なっていきます。</p>

<ol>
<li>Githubからプラグインをダウンロード
<code>
$git clone git://github.com/tokkonopapa/octopress-tagcloud.git
</code></li>
<li>ダウンロードしたファイルをpluginディレクトリと_asidesディレクトリにコピー
<code>
$cp plugins/tag_cloud.rb ~/Projects/rails/fakestarbaby.github.com/plugins/tag_cloud.rb
</code>
<code>
$cp source/_includes/custom/asides/* ~/Projects/rails/fakestarbaby.github.com/source/_includes/custom/asides/
</code></li>
<li>_config.ymlを編集
<code>
default_asides: [custom/asides/about.html, asides/recent_posts.html, custom/asides/tag_cloud.html, asides/github.html, asides/twitter.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]
</code></li>
</ol>


<p>これだけ</p>

<h3>タグクラウドを表示するHTMLファイルの変更</h3>

<hr />

<p>必要に応じて編集します。<br/>
以下のファイルに記載されているcounter:trueをcounter:falseに変更することでタグ件数を非表示にできます。<br/>
デフォルトは表示する設定になっています。(デフォルト設定のままでよいと思いますが・・・)</p>

<ul>
<li>source/_includes/custom/asides/category_list.html</li>
<li>source/_includes/custom/asides/tag_cloud.html</li>
</ul>


<h3>参考サイト</h3>

<hr />

<p><a href="http://tokkonopapa.github.com/blog/2012/01/04/octopress-plugin-for-categories-cloud/">作者の導入手順記事</a><br/>
<a href="http://qiita.com/items/944db11e257782749270">Quiitaの記事</a></p>

<p>Octopressもいいけど、Quiitaをブログ代わりにするのもいいかも。<br/>
悩ましいなぁ。。。</p>
]]></content>
  </entry>
  
</feed>
